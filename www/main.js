(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["main"],{

/***/ 90158:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppRoutingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const security_service_1 = __webpack_require__(/*! ./services/security/security.service */ 38713);
const msal_angular_1 = __webpack_require__(/*! @azure/msal-angular */ 14084);
const routes = [
    {
        path: 'TestPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-testseite/common-testseite.module */ 61187))).then(m => m.CommonTestseitePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'RegistrierungPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-registrierung/common-registrierung.module */ 38246))).then(m => m.CommonRegistrierungPageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'LoginPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-login/common-login.module */ 62324))).then(m => m.CommonLoginPageModule),
    },
    {
        path: 'HomePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-home/common-home.module */ 52679))).then(m => m.CommonHomePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'DebugPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-debug/common-debug.module */ 43769))).then(m => m.CommonDebugPageModule),
    },
    {
        path: 'EinstellungenPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-einstellungen/common-einstellungen.module */ 1853))).then(m => m.CommonEinstellungenPageModule),
    },
    { path: 'ErrorPage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/common-error/common-error.module */ 57051))).then(m => m.CommonErrorPageModule),
    },
    {
        path: 'FiStandortelistePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/fi-standorteliste/fi-standorteliste.module */ 89048))).then(m => m.FiStandortelistePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'FiMitarbeiterlistePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/fi-mitarbeiterliste/fi-mitarbeiterliste.module */ 93297))).then(m => m.FIMitarbeiterlistePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'PjListePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/pj-projekt-liste/pj-projekt-liste.module */ 98271))).then(m => m.PjProjektListePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'PjFavoritenlistePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/pj-favoriten-liste/pj-favoriten-liste.module */ 18538))).then(m => m.PjFavoritenListePageModule),
        canLoad: [security_service_1.SecurityService]
    },
    {
        path: 'auth',
        component: msal_angular_1.MsalRedirectComponent
    },
    {
        path: '',
        redirectTo: 'TestPage',
        pathMatch: 'full'
    },
    {
        path: 'PjAufgabenlistePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/pj-aufgaben-liste/pj-aufgaben-liste.module */ 19045))).then(m => m.PjAufgabenListePageModule)
    },
    /*
    {
      path: 'PjAufgabenlisteMeintagPage',
      loadChildren: () => import('./pages/pj-aufgaben-meintagliste/pj-aufgaben-meintagliste.module').then(m => m.PjAufgabenMeintagListePageModule)
    },
  
    {
      path: 'PjAufgabenlisteAllePage',
      loadChildren: () => import('./pages/pj-aufgabenliste-alle/pj-aufgabenliste-alle.module').then(m => m.PjAufgabenlisteAllePageModule)
    },
    {
      path: 'PjAufgabenlisteEinzelprojektPage',
      loadChildren: () => import('./pages/pj-aufgabenliste-einzelprojekt/pj-aufgabenliste-einzelprojekt.module').then(m => m.PjAufgabenlisteEinzelprojektPageModule)
    },
  
     */
    {
        path: 'PjProtokolleListePage',
        loadChildren: () => Promise.resolve().then(() => tslib_1.__importStar(__webpack_require__(/*! ./pages/pj-protokolle-liste/pj-protokolle-liste.module */ 33576))).then(m => m.PjProtokolleListePageModule)
    },
];
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            router_1.RouterModule.forRoot(routes, { preloadingStrategy: router_1.PreloadAllModules })
        ],
        exports: [router_1.RouterModule],
        providers: [security_service_1.SecurityService]
    })
], AppRoutingModule);
exports.AppRoutingModule = AppRoutingModule;


/***/ }),

/***/ 55041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 21778)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AppComponent = void 0;

const tslib_1 = __webpack_require__(/*! tslib */ 34929);

const core_1 = __webpack_require__(/*! @angular/core */ 22560);

const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);

const debug_1 = __webpack_require__(/*! ./services/debug/debug */ 83817);

const database_pool_service_1 = __webpack_require__(/*! ./services/database-pool/database-pool.service */ 73004);

const menue_service_1 = __webpack_require__(/*! ./services/menue/menue.service */ 47314);

const basics_1 = __webpack_require__(/*! ./services/basics/basics */ 7183);

const database_authentication_service_1 = __webpack_require__(/*! ./services/database-authentication/database-authentication.service */ 67334);

const tools_1 = __webpack_require__(/*! ./services/tools/tools */ 9983);

const rxjs_1 = __webpack_require__(/*! rxjs */ 26469);

const const_1 = __webpack_require__(/*! ./services/const/const */ 55005);

const database_mitarbeiter_service_1 = __webpack_require__(/*! ./services/database-mitarbeiter/database-mitarbeiter.service */ 26229);

const database_standorte_service_1 = __webpack_require__(/*! ./services/database-standorte/database-standorte.service */ 60955);

const database_projekte_service_1 = __webpack_require__(/*! ./services/database-projekte/database-projekte.service */ 31222);

const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ./services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);

const localstorage_1 = __webpack_require__(/*! ./services/localstorage/localstorage */ 42117);

let AppComponent = class AppComponent {
  constructor(platform, Pool, Menuservice, AuthService, changeDetector, // private MSALService: MsalService,
  // private MSALBroadcastService: MsalBroadcastService,
  Basics, Tools, Const, MitarbeiterDB, MitarbeitersettingsDB, StandortDB, ProjekteDB, StorageService, Debug) {
    this.platform = platform;
    this.Pool = Pool;
    this.Menuservice = Menuservice;
    this.AuthService = AuthService;
    this.changeDetector = changeDetector;
    this.Basics = Basics;
    this.Tools = Tools;
    this.Const = Const;
    this.MitarbeiterDB = MitarbeiterDB;
    this.MitarbeitersettingsDB = MitarbeitersettingsDB;
    this.StandortDB = StandortDB;
    this.ProjekteDB = ProjekteDB;
    this.StorageService = StorageService;
    this.Debug = Debug;
    this.unsubscribe = new rxjs_1.Subject();

    try {
      this.AuthSubscription = null; // Test
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'App Component', 'constructor', this.Debug.Typen.Component);
    }
  }

  ngOnDestroy() {
    try {
      this.unsubscribe.next(undefined);
      this.unsubscribe.complete();

      if (this.AuthSubscription !== null) {
        this.AuthSubscription.unsubscribe();
        this.AuthSubscription = null;
      }

      this.StandortDB.FinishService();
      this.MitarbeiterDB.FinishService();
      this.ProjekteDB.FinishService();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'App Component', 'OnDestroy', this.Debug.Typen.Component);
    }
  }

  ngOnInit() {
    try {
      this.StartApp(); // Muss wieder entfernt werden -> StartApp Ã¼ber MSAL

      /*
      this.MSALBroadcastService.inProgress$
        .pipe(
          filter((status: InteractionStatus) => status === InteractionStatus.None),
          takeUntil(this.unsubscribe)
        ).subscribe(() => {
                 console.log('Authentication stataus cnhaged');
               this.AuthService.SetAuthenticationStatus();
      });
              */

      /*
             this.MSALBroadcastService.msalSubject$.pipe(
        filter((message: EventMessage) =>  message.eventType === EventType.LOGIN_SUCCESS),
        takeUntil(this.unsubscribe)
      ).subscribe((message: EventMessage) => {
               const AuthResult = <AuthenticationResult>message.payload;
               this.MSALService.instance.setActiveAccount(AuthResult.account);
      });
      */

      this.AuthSubscription = this.AuthService.AuthenticationChanged.subscribe(() => {
        this.StartApp(); // debugger;
      });
      /*
             this.MSALService.instance.handleRedirectPromise().then((res: AuthenticationResult) => {
               debugger;
               if(res !== null && res.account !== null) {
                 this.MSALService.instance.setActiveAccount(res.account);
        }
        else {
                 this.MSALService.instance.setActiveAccount(null);
        }
               this.SetPage();
      });
              */
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'App Component', 'OnInit', this.Debug.Typen.Component);
    }
  }

  StartApp() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        console.log('Start App');
        yield _this.platform.ready();
        _this.Basics.Contentbreite = _this.platform.width();
        _this.Basics.Contenthoehe = _this.platform.height();

        _this.Tools.SetRootPage(_this.Const.Pages.TestPage);

        console.log('Hello World');
        /*
               if(this.AuthService.IsAuthenticated) {
                 let token = await this.StorageService.GetSecurityToken();
                 this.AuthService.SecurityToken = token;
                 let result = await this.MitarbeiterDB.GetMitarbeiterRegistrierung(this.AuthService.ActiveUser.username);
                 debugger;
                 if(result !== null && !lodash.isUndefined(result.error)) {
                   // Databse not available
                   this.Tools.SetRootPage(this.Const.Pages.TestPage);
          }
          else {
                   if (result === null) {
                     // Neuen Mitarbeiter registrieren
                     await this.Pool.ReadStandorteliste();
                     this.Menuservice.ShowRegistrierungPage();
            }
            else {
                     // Mitarbeiter ist bereits registriert
                     this.Pool.Mitarbeiterdaten     = this.Pool.InitMitarbeiter(result.Mitarbeiter);
              this.AuthService.SecurityToken = result.Token;
                     await this.StorageService.SetSecurityToken(this.AuthService.SecurityToken);
              await this.Pool.Init();
                     this.Pool.Mitarbeitersettings = this.Pool.InitMitarbeitersettings();
                     await this.MitarbeitersettingsDB.SaveMitarbeitersettings();
                     // this.Pool.Mitarbeiterdaten.Favoritenliste = [];
                     this.Pool.MitarbeitersettingsChanged.emit();
                     if(this.Pool.Mitarbeiterdaten.SettingsID === null) {
                       this.Pool.Mitarbeiterdaten.SettingsID = this.Pool.Mitarbeitersettings._id;
                       await this.MitarbeiterDB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten);
              }
                     this.MitarbeiterDB.InitService();
              this.StandortDB.InitService();
              this.ProjekteDB.InitService();
                     if(this.Pool.Mitarbeiterdaten.Favoritenliste.length === 0) {
                       this.Tools.SetRootPage(this.Const.Pages.HomePage);
              }
              else {
                       this.ProjekteDB.InitGesamtprojekteliste();
                this.ProjekteDB.InitProjektfavoritenliste();
                       await this.Pool.ReadProjektdaten(this.ProjekteDB.Projektliste);
                       this.ProjekteDB.InitMenuProjektauswahl();
                       this.Menuservice.SetCurrentPage();
              }
                     this.Pool.LoadingAllDataFinished.emit();
            }
          }
        }
        else {
                 this.Menuservice.ShowLoginPage();
        }
                */
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'App Component', 'StartApp', _this.Debug.Typen.Component);
      }
    })();
  }

  ngAfterContentChecked() {
    this.changeDetector.detectChanges();
    /*
    try {
     
    } catch (error) {
           this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'function', this.Debug.Typen.Component);
    }
          */
  }

};

AppComponent.ctorParameters = () => [{
  type: angular_1.Platform
}, {
  type: database_pool_service_1.DatabasePoolService
}, {
  type: menue_service_1.MenueService
}, {
  type: database_authentication_service_1.DatabaseAuthenticationService
}, {
  type: core_1.ChangeDetectorRef
}, {
  type: basics_1.BasicsProvider
}, {
  type: tools_1.ToolsProvider
}, {
  type: const_1.ConstProvider
}, {
  type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
}, {
  type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
}, {
  type: database_standorte_service_1.DatabaseStandorteService
}, {
  type: database_projekte_service_1.DatabaseProjekteService
}, {
  type: localstorage_1.LocalstorageService
}, {
  type: debug_1.DebugProvider
}];

AppComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'app-root',
  template: __webpack_require__(/*! ./app.component.html?ngResource */ 33383),
  styles: [__webpack_require__(/*! ./app.component.scss?ngResource */ 79259)]
})], AppComponent);
exports.AppComponent = AppComponent;

/***/ }),

/***/ 36747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ 34497);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const app_component_1 = __webpack_require__(/*! ./app.component */ 55041);
const app_routing_module_1 = __webpack_require__(/*! ./app-routing.module */ 90158);
const tools_1 = __webpack_require__(/*! ./services/tools/tools */ 9983);
const debug_1 = __webpack_require__(/*! ./services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ./services/const/const */ 55005);
const basics_1 = __webpack_require__(/*! ./services/basics/basics */ 7183);
const loadinganimation_1 = __webpack_require__(/*! ./services/loadinganimation/loadinganimation */ 73253);
const security_service_1 = __webpack_require__(/*! ./services/security/security.service */ 38713);
const menue_service_1 = __webpack_require__(/*! ./services/menue/menue.service */ 47314);
const display_service_1 = __webpack_require__(/*! ./services/diplay/display.service */ 38215);
const animations_1 = __webpack_require__(/*! @angular/platform-browser/animations */ 37146);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const localstorage_1 = __webpack_require__(/*! ./services/localstorage/localstorage */ 42117);
let AppModule = class AppModule {
};
AppModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            app_component_1.AppComponent,
        ],
        imports: [
            platform_browser_1.BrowserModule,
            angular_1.IonicModule.forRoot(),
            app_routing_module_1.AppRoutingModule,
            animations_1.BrowserAnimationsModule,
            http_1.HttpClientModule,
            // MsalModule,
        ],
        providers: [
            tools_1.ToolsProvider,
            debug_1.DebugProvider,
            const_1.ConstProvider,
            basics_1.BasicsProvider,
            menue_service_1.MenueService,
            loadinganimation_1.LoadingAnimationService,
            display_service_1.DisplayService,
            security_service_1.SecurityService,
            localstorage_1.LocalstorageService,
            /*
            {
              provide: MSAL_INSTANCE,
              useFactory: MSALInstanceFactory
            },
        
             */
            // MsalService,
            // MsalBroadcastService,
            {
                provide: router_1.RouteReuseStrategy,
                useClass: angular_1.IonicRouteStrategy,
            }
        ],
        bootstrap: [app_component_1.AppComponent],
        exports: []
    })
], AppModule);
exports.AppModule = AppModule;


/***/ }),

/***/ 92766:
/*!********************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiMitarbeiterAuswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
let FiMitarbeiterAuswahlComponent = class FiMitarbeiterAuswahlComponent {
    constructor(Basics, Debug, Tools, DB, DBStandort, Const, Displayservice, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBStandort = DBStandort;
        this.Const = Const;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.StandortfilterClickedEvent = new core_1.EventEmitter();
        try {
            this.AuswahlIDliste = [];
            this.Mitarbeiterbuchstabenliste = [];
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Mitarbeiteralphabetauswahl = 'Alle';
            this.Mitarbeiteralphabet = this.Standardalphabet;
            this.Alphapetbreite = 44;
            this.Mitarbeiterfiltertext = '';
            this.Multiselect = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.Mitarbeiterliste = [];
            this.FilterSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Mitarbeiterauswahl);
            this.FilterSubscription.unsubscribe();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            if (this.Alphabetcomponent)
                this.Alphabetcomponent.InitScreen();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Mitarbeiterauswahl, this.ZIndex);
            this.FilterSubscription = this.DBStandort.StandortfilterChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'function', this.Debug.Typen.Component);
        }
    }
    PrepareDaten() {
        try {
            let Liste;
            let Merker;
            let Buchstabe;
            let Laenge;
            let TeilA;
            let TeilB;
            let TeilC;
            let Teillaenge;
            let PosA;
            let Solltext;
            let Suchtext;
            let Mitarbeiter;
            if (this.Pool.Mitarbeiterliste !== null) {
                this.Lastletter = '';
                // Nach Namen sortieren
                this.Mitarbeiterliste = lodash.cloneDeep(this.Pool.Mitarbeiterliste);
                Liste = lodash.cloneDeep(this.Pool.Mitarbeiterliste);
                Liste.sort((a, b) => {
                    if (a.Name < b.Name)
                        return -1;
                    if (a.Name > b.Name)
                        return 1;
                    return 0;
                });
                // Standort Filter anwenden
                if (this.DBStandort.MitarbeiterauswahlStandortfilter !== null) {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        if (Eintrag.StandortID === this.DBStandort.MitarbeiterauswahlStandortfilter._id)
                            Liste.push(Eintrag);
                    }
                }
                // Mitarbeiteralphabetauswahl Buchstaben festlegen
                if (Liste.length > 6) {
                    this.Mitarbeiteralphabet = ['Alle'];
                    for (let Eintrag of Liste) {
                        Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
                        if (this.Mitarbeiteralphabet.indexOf(Buchstabe) === -1)
                            this.Mitarbeiteralphabet.push(Buchstabe);
                    }
                }
                else {
                    this.Mitarbeiteralphabet = this.Standardalphabet;
                }
                // Alphabetfilter anwenden
                if (this.Mitarbeiteralphabetauswahl !== 'Alle') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
                        Buchstabe = Buchstabe === 'Ã' ? 'A' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'O' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'U' : Buchstabe;
                        if (this.Mitarbeiteralphabetauswahl === Buchstabe)
                            Liste.push(Eintrag);
                    }
                }
                // Suche Mitarbeiterfilter anwenden
                if (this.Mitarbeiterfiltertext !== '') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Solltext = this.Mitarbeiterfiltertext.toLowerCase();
                        Suchtext = Eintrag.Name.toLowerCase();
                        PosA = Suchtext.indexOf(Solltext);
                        if (PosA !== -1) {
                            Laenge = Eintrag.Name.length;
                            Teillaenge = Solltext.length;
                            TeilA = Eintrag.Name.substr(0, PosA);
                            TeilB = Eintrag.Name.substr(PosA, Teillaenge);
                            Teillaenge = Laenge - Teillaenge - PosA;
                            TeilC = Eintrag.Name.substr(Laenge - Teillaenge, Teillaenge);
                            Eintrag.Filtered = true;
                            Eintrag.Text_A = TeilA;
                            Eintrag.Text_B = TeilB;
                            Eintrag.Text_C = TeilC;
                            Liste.push(Eintrag);
                        }
                    }
                }
                // Buchstabenliste festlegen
                this.Mitarbeiterbuchstabenliste = [];
                for (let Eintrag of Liste) {
                    this.Mitarbeiterbuchstabenliste.push(this.GetMitarbeiterAlphabetbuchstabe(Eintrag));
                }
                // Alle Auswahlen entfernen
                for (Mitarbeiter of Liste) {
                    Mitarbeiter.Selected = false;
                }
                // Auswahl festlegen
                for (let MitarbeiterID of this.AuswahlIDliste) {
                    Mitarbeiter = lodash.find(Liste, { _id: MitarbeiterID });
                    if (!lodash.isUndefined(Mitarbeiter))
                        Mitarbeiter.Selected = true;
                }
                this.Anzeigeliste = lodash.cloneDeep(Liste);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'PrepareDaten', this.Debug.Typen.Component);
        }
    }
    GetMitarbeiterAlphabetbuchstabe(value) {
        try {
            let Buchstabe = value.Name.substring(0, 1).toUpperCase();
            if (Buchstabe !== this.Lastletter) {
                this.Lastletter = Buchstabe;
                return Buchstabe;
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'GetMitarbeiterAlphabetbuchstabe', this.Debug.Typen.Component);
        }
    }
    MitrabeiterButtonClicked(Mitarbeiter) {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'MitrabeiterButtonClicked', this.Debug.Typen.Component);
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Mitarbeiterfiltertext = '';
            this.Mitarbeiteralphabetauswahl = buchstabe;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'AlphabetClicked', this.Debug.Typen.Component);
        }
    }
    CheckedChanged(result) {
        try {
            let Mitarbeiter;
            if (this.Multiselect === false) {
                for (Mitarbeiter of this.Mitarbeiterliste) {
                    Mitarbeiter.Selected = false;
                }
                for (Mitarbeiter of this.Anzeigeliste) {
                    Mitarbeiter.Selected = false;
                }
            }
            // Anpassung in der Gesamtliste
            Mitarbeiter = lodash.find(this.Mitarbeiterliste, { id: this.Anzeigeliste[result.index]._id });
            if (!lodash.isUndefined(Mitarbeiter))
                Mitarbeiter.Selected = result.status;
            // Anpassung in der Anzeigeliste
            this.Anzeigeliste[result.index].Selected = result.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'CheckedChanged', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        let IDListe = [];
        for (let Mitarbeiter of this.Anzeigeliste) {
            if (!lodash.isUndefined(Mitarbeiter.Selected) && Mitarbeiter.Selected === true) {
                IDListe.push(Mitarbeiter._id);
            }
        }
        this.OkClickedEvent.emit(IDListe);
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    StandortfilterButtonClicked() {
        try {
            this.StandortfilterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
        }
    }
    GetStandortfiller() {
        try {
            if (this.DBStandort.MitarbeiterauswahlStandortfilter === null)
                return 'kein Standortfilter';
            else
                return this.DBStandort.MitarbeiterauswahlStandortfilter.Kuerzel + ' / ' + this.DBStandort.MitarbeiterauswahlStandortfilter.Standort;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Auswahl', 'GetStandortfiller', this.Debug.Typen.Component);
        }
    }
};
FiMitarbeiterAuswahlComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: const_1.ConstProvider },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService }
];
FiMitarbeiterAuswahlComponent.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['SmallAlphabet', { static: true },] }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    AuswahlIDliste: [{ type: core_1.Input }],
    Multiselect: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    StandortfilterClickedEvent: [{ type: core_1.Output }]
};
FiMitarbeiterAuswahlComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'fi-mitarbeiter-auswahl',
        template: __webpack_require__(/*! ./fi-mitarbeiter-auswahl.component.html?ngResource */ 37919),
        styles: [__webpack_require__(/*! ./fi-mitarbeiter-auswahl.component.scss?ngResource */ 87845)]
    })
], FiMitarbeiterAuswahlComponent);
exports.FiMitarbeiterAuswahlComponent = FiMitarbeiterAuswahlComponent;


/***/ }),

/***/ 45601:
/*!*****************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiMitarbeiterAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const fi_mitarbeiter_auswahl_component_1 = __webpack_require__(/*! ./fi-mitarbeiter-auswahl.component */ 92766);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const alphabet_relative_module_1 = __webpack_require__(/*! ../../components/alphabet-relative/alphabet-relative.module */ 36255);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
let FiMitarbeiterAuswahlModule = class FiMitarbeiterAuswahlModule {
};
FiMitarbeiterAuswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            fi_mitarbeiter_auswahl_component_1.FiMitarbeiterAuswahlComponent
        ],
        exports: [
            fi_mitarbeiter_auswahl_component_1.FiMitarbeiterAuswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            alphabet_module_1.AlphabetModule,
            alphabet_relative_module_1.AlphabetRelativeModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule
        ],
        providers: []
    })
], FiMitarbeiterAuswahlModule);
exports.FiMitarbeiterAuswahlModule = FiMitarbeiterAuswahlModule;


/***/ }),

/***/ 57838:
/*!******************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiMitarbeiterEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let FiMitarbeiterEditorComponent = class FiMitarbeiterEditorComponent {
    constructor(Debug, Tools, Pool, Const, Displayservice, StandortDB, DB) {
        this.Debug = Debug;
        this.Tools = Tools;
        this.Pool = Pool;
        this.Const = Const;
        this.Displayservice = Displayservice;
        this.StandortDB = StandortDB;
        this.DB = DB;
        this.ValidChanged = new core_1.EventEmitter();
        this.StandortClickedEvent = new core_1.EventEmitter();
        this.FachbereichClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.DeleteClickedEvent = new core_1.EventEmitter();
        this.ErrorEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.DeleteEnabled = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
            this.SkipOkButtonAction = false;
            this.EmailinputEnabled = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Mitarbeitereditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ResetEditor() {
        try {
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'ResetEditor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SetupValidation();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Mitarbeitereditor, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Name: Joi.string().required().max(100),
                Vorname: Joi.string().required().max(100),
                Kuerzel: Joi.string().required().min(3).max(10),
                Email: Joi.string().required().max(255).email({ tlds: { allow: false } }).required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentMitarbeiter);
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
            this.ValidChanged.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    StandortClicked() {
        try {
            this.StandortClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'StandortClicked', this.Debug.Typen.Component);
        }
    }
    FachbereichClicked() {
        try {
            this.FachbereichClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'FachbereichClicked', this.Debug.Typen.Component);
        }
    }
    LoeschenCheckboxChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
        }
    }
    LoeschenButtonClicked() {
        try {
            this.DB.DeleteMitarbeiter(this.DB.CurrentMitarbeiter).then(() => {
                this.ResetEditor();
                this.DeleteClickedEvent.emit();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'LoeschenButtonClicked', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        if (this.SkipOkButtonAction) {
            this.OkClickedEvent.emit();
        }
        else {
            if (this.DB.CurrentMitarbeiter._id === null) {
                this.DB.AddMitarbeiter(this.DB.CurrentMitarbeiter).then(() => {
                    this.ResetEditor();
                    this.OkClickedEvent.emit();
                }).catch((errora) => {
                    this.Debug.ShowErrorMessage(errora, 'Mitarbeiter Editor', 'OkButtonClicked / AddMitarbeiter', this.Debug.Typen.Component);
                });
            }
            else {
                this.DB.UpdateMitarbeiter(this.DB.CurrentMitarbeiter).then(() => {
                    this.ResetEditor();
                    this.OkClickedEvent.emit();
                }).catch((errorb) => {
                    this.Debug.ShowErrorMessage(errorb, 'Mitarbeiter Editor', 'OkButtonClicked / UpdateMitarbeiter', this.Debug.Typen.Component);
                });
            }
        }
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
};
FiMitarbeiterEditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider },
    { type: display_service_1.DisplayService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService }
];
FiMitarbeiterEditorComponent.propDecorators = {
    ValidChanged: [{ type: core_1.Output }],
    StandortClickedEvent: [{ type: core_1.Output }],
    FachbereichClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    DeleteClickedEvent: [{ type: core_1.Output }],
    ErrorEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    SkipOkButtonAction: [{ type: core_1.Input }],
    EmailinputEnabled: [{ type: core_1.Input }]
};
FiMitarbeiterEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'fi-mitarbeiter-editor',
        template: __webpack_require__(/*! ./fi-mitarbeiter-editor.component.html?ngResource */ 46256),
        styles: [__webpack_require__(/*! ./fi-mitarbeiter-editor.component.scss?ngResource */ 76138)]
    })
], FiMitarbeiterEditorComponent);
exports.FiMitarbeiterEditorComponent = FiMitarbeiterEditorComponent;


/***/ }),

/***/ 57763:
/*!***************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiMitarbeiterEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const fi_mitarbeiter_editor_component_1 = __webpack_require__(/*! ./fi-mitarbeiter-editor.component */ 57838);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
let FiMitarbeiterEditorModule = class FiMitarbeiterEditorModule {
};
FiMitarbeiterEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            fi_mitarbeiter_editor_component_1.FiMitarbeiterEditorComponent
        ],
        exports: [
            fi_mitarbeiter_editor_component_1.FiMitarbeiterEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule
        ],
        providers: []
    })
], FiMitarbeiterEditorModule);
exports.FiMitarbeiterEditorModule = FiMitarbeiterEditorModule;


/***/ }),

/***/ 40826:
/*!************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiStandortEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let FiStandortEditorComponent = class FiStandortEditorComponent {
    constructor(Debug, Displayservice, Const, Tools, DB) {
        this.Debug = Debug;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.Tools = Tools;
        this.DB = DB;
        this.ValidChange = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.DeleteClickedEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Valid = true;
            this.Titel = this.Const.NONE;
            this.Iconname = 'location-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
            this.CanDelete = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Standorteditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Standort: Joi.string().required().max(100),
                Kuerzel: Joi.string().required().min(3).max(10),
                Strasse: Joi.string().required().max(100),
                Ort: Joi.string().required().max(100),
                PLZ: Joi.string().required().min(5).max(5),
                Email: Joi.string().required().max(255).email({ tlds: { allow: false } }).required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SetupValidation();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Standorteditor, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentStandort);
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
            this.ValidChange.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    DeleteButtonClicked() {
        try {
            if (this.CanDelete) {
                this.DB.DeleteStandort().then(() => {
                    this.DeleteClickedEvent.emit();
                }).catch((exception) => {
                    this.Tools.ShowHinweisDialog(exception.error.message);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            if (this.DB.CurrentStandort._id === null) {
                this.DB.AddStandort().then((result) => {
                    this.OkClickedEvent.emit();
                }).catch((error) => {
                    this.Tools.ShowHinweisDialog(error.error);
                });
            }
            else {
                this.DB.UpdateStandort().then(() => {
                    this.OkClickedEvent.emit();
                }).catch((exception) => {
                    this.Tools.ShowHinweisDialog(exception.error.message);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    CanDeleteCheckedChanged(event) {
        try {
            this.CanDelete = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standort Editor', 'CanDeleteCheckedChanged', this.Debug.Typen.Component);
        }
    }
};
FiStandortEditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider },
    { type: tools_1.ToolsProvider },
    { type: database_standorte_service_1.DatabaseStandorteService }
];
FiStandortEditorComponent.propDecorators = {
    ValidChange: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    DeleteClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
FiStandortEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'fi-standort-editor',
        template: __webpack_require__(/*! ./fi-standort-editor.component.html?ngResource */ 41789),
        styles: [__webpack_require__(/*! ./fi-standort-editor.component.scss?ngResource */ 2213)]
    })
], FiStandortEditorComponent);
exports.FiStandortEditorComponent = FiStandortEditorComponent;


/***/ }),

/***/ 50339:
/*!*********************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.module.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiStandortEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const fi_standort_editor_component_1 = __webpack_require__(/*! ./fi-standort-editor.component */ 40826);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
let FiStandortEditorModule = class FiStandortEditorModule {
};
FiStandortEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            fi_standort_editor_component_1.FiStandortEditorComponent
        ],
        exports: [
            fi_standort_editor_component_1.FiStandortEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_footer_module_1.PageFooterModule,
        ],
        providers: []
    })
], FiStandortEditorModule);
exports.FiStandortEditorModule = FiStandortEditorModule;


/***/ }),

/***/ 14710:
/*!**********************************************************************************************!*\
  !*** ./src/app/components-page/pj-aufgaben-listefilter/pj-aufgaben-listefilter.component.ts ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjAufgabenListefilterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);
let PjAufgabenListefilterComponent = class PjAufgabenListefilterComponent {
    constructor(Basics, Debug, Tools, Const, MitarbeitersettingsDB, DB, Pool, Displayservice) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.MitarbeitersettingsDB = MitarbeitersettingsDB;
        this.DB = DB;
        this.Pool = Pool;
        this.Displayservice = Displayservice;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        try {
            this.Iconname = 'filter-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.MitarbeiterSubscription = null;
            this.Mitarbeitersettings = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Aufgabenlistefilter, this.ZIndex);
            this.MitarbeiterSubscription = this.Pool.MitarbeitersettingsChanged.subscribe(() => {
                this.PrepareData();
            });
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Aufgabenlistefilter);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ionViewDidEnter() {
        try {
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'ionViewDidEnter', this.Debug.Typen.Component);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'ionViewDidLeave', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            this.Mitarbeitersettings = lodash.cloneDeep(this.Pool.Mitarbeitersettings);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        try {
            this.CancelClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.Pool.Mitarbeitersettings = this.Mitarbeitersettings;
            this.MitarbeitersettingsDB.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings).then(() => {
                this.OkClickedEvent.emit();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    GetDatum(timestamp) {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            if (timestamp !== null)
                return (0, moment_1.default)(timestamp).locale('de');
            else
                return Heute;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Component);
        }
    }
    GetWochenstring() {
        try {
            let Heute = (0, moment_1.default)();
            return 'KW ' + Heute.locale('de').format('WW YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'GetWochenstring', this.Debug.Typen.Component);
        }
    }
    GetMonatsstring() {
        try {
            let Heute = (0, moment_1.default)();
            return Heute.locale('de').format('MMMM YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'GetMonatsstring', this.Debug.Typen.Component);
        }
    }
    SetAufgabenTerminfiltervariante(event) {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            this.Mitarbeitersettings.AufgabenTerminfiltervariante = event.detail.value;
            switch (this.Mitarbeitersettings.AufgabenTerminfiltervariante) {
                case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
                    if (this.Mitarbeitersettings.AufgabenTerminfilterStartwert === null)
                        this.Mitarbeitersettings.AufgabenTerminfilterStartwert = Heute.valueOf();
                    if (this.Mitarbeitersettings.AufgabenTerminfilterEndewert === null)
                        this.Mitarbeitersettings.AufgabenTerminfilterEndewert = Heute.valueOf();
                    break;
                case this.Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt:
                    if (this.Mitarbeitersettings.AufgabenTerminfilterEndewert === null)
                        this.Mitarbeitersettings.AufgabenTerminfilterEndewert = Heute.valueOf();
                    break;
                case this.Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt:
                    if (this.Mitarbeitersettings.AufgabenTerminfilterStartwert === null)
                        this.Mitarbeitersettings.AufgabenTerminfilterStartwert = Heute.valueOf();
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'SetAufgabenTerminfiltervariante', this.Debug.Typen.Component);
        }
    }
    TerminEndeDatumChanged(datum) {
        try {
            this.Mitarbeitersettings.AufgabenTerminfilterEndewert = datum.valueOf();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'TerminEndeDatumChanged', this.Debug.Typen.Component);
        }
    }
    TerminStartDatumChanged(datum) {
        try {
            this.Mitarbeitersettings.AufgabenTerminfilterStartwert = datum.valueOf();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste Filter', 'TerminStartDatumChanged', this.Debug.Typen.Component);
        }
    }
};
PjAufgabenListefilterComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: display_service_1.DisplayService }
];
PjAufgabenListefilterComponent.propDecorators = {
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjAufgabenListefilterComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-aufgaben-listefilter',
        template: __webpack_require__(/*! ./pj-aufgaben-listefilter.component.html?ngResource */ 44672),
        styles: [__webpack_require__(/*! ./pj-aufgaben-listefilter.component.scss?ngResource */ 63614)]
    })
], PjAufgabenListefilterComponent);
exports.PjAufgabenListefilterComponent = PjAufgabenListefilterComponent;


/***/ }),

/***/ 10022:
/*!*******************************************************************************************!*\
  !*** ./src/app/components-page/pj-aufgaben-listefilter/pj-aufgaben-listefilter.module.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjAufgabenListefilterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const pj_aufgaben_listefilter_component_1 = __webpack_require__(/*! ./pj-aufgaben-listefilter.component */ 14710);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const button_value_time_module_1 = __webpack_require__(/*! ../../components/button-value-time/button-value-time.module */ 22353);
let PjAufgabenListefilterModule = class PjAufgabenListefilterModule {
};
PjAufgabenListefilterModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        providers: [],
        declarations: [
            pj_aufgaben_listefilter_component_1.PjAufgabenListefilterComponent,
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            page_header_module_1.PageHeaderModule,
            forms_1.FormsModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            page_footer_module_1.PageFooterModule,
            button_value_module_1.ButtonValueModule,
            button_value_date_module_1.ButtonValueDateModule,
            checkbox_clon_module_1.CheckboxClonModule,
            input_clone_module_1.InputCloneModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            button_value_time_module_1.ButtonValueTimeModule,
        ],
        exports: [
            pj_aufgaben_listefilter_component_1.PjAufgabenListefilterComponent
        ]
    })
], PjAufgabenListefilterModule);
exports.PjAufgabenListefilterModule = PjAufgabenListefilterModule;


/***/ }),

/***/ 88486:
/*!********************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjBeteiligtenAuswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let PjBeteiligtenAuswahlComponent = class PjBeteiligtenAuswahlComponent {
    constructor(Basics, Debug, Tools, DB, DBProjekte, Const, Displayservice, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBProjekte = DBProjekte;
        this.Const = Const;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        try {
            this.AuswahlIDliste = [];
            this.Beteiligtebuchstabenliste = [];
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Beteiligtealphabetauswahl = 'Alle';
            this.Beteiligtealphabet = this.Standardalphabet;
            this.Alphapetbreite = 44;
            this.Beteiligtefiltertext = '';
            this.Multiselect = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.Beteiligteliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Beteiligteauswahl);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            if (this.Alphabetcomponent)
                this.Alphabetcomponent.InitScreen();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Beteiligteauswahl, this.ZIndex);
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'function', this.Debug.Typen.Component);
        }
    }
    PrepareDaten() {
        try {
            let Liste;
            let Merker;
            let Buchstabe;
            let Beteiligte;
            if (this.DBProjekte.CurrentProjekt !== null) {
                this.Lastletter = '';
                // Nach Name/Firma sortieren
                this.Beteiligteliste = lodash.cloneDeep(this.DBProjekte.CurrentProjekt.Beteiligtenliste);
                Liste = lodash.cloneDeep(this.DBProjekte.CurrentProjekt.Beteiligtenliste);
                for (Beteiligte of Liste) {
                    if (Beteiligte.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person)
                        Beteiligte.Sortvalue = Beteiligte.Name;
                    else
                        Beteiligte.Sortvalue = Beteiligte.Firma;
                }
                Liste.sort((a, b) => {
                    if (a.Sortvalue < b.Sortvalue)
                        return -1;
                    if (a.Sortvalue > b.Sortvalue)
                        return 1;
                    return 0;
                });
                // Beteiligtealphabetauswahl Buchstaben festlegen
                if (Liste.length > 6) {
                    this.Beteiligtealphabet = ['Alle'];
                    for (let Eintrag of Liste) {
                        Buchstabe = Eintrag.Sortvalue.substring(0, 1).toUpperCase();
                        if (this.Beteiligtealphabet.indexOf(Buchstabe) === -1)
                            this.Beteiligtealphabet.push(Buchstabe);
                    }
                }
                else {
                    this.Beteiligtealphabet = this.Standardalphabet;
                }
                // Alphabetfilter anwenden
                if (this.Beteiligtealphabetauswahl !== 'Alle') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Buchstabe = Eintrag.Sortvalue.substring(0, 1).toUpperCase();
                        Buchstabe = Buchstabe === 'Ã' ? 'A' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'O' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'U' : Buchstabe;
                        if (this.Beteiligtealphabetauswahl === Buchstabe)
                            Liste.push(Eintrag);
                    }
                }
                // Buchstabenliste festlegen
                this.Beteiligtebuchstabenliste = [];
                for (let Eintrag of Liste) {
                    this.Beteiligtebuchstabenliste.push(this.GetBeteiligteAlphabetbuchstabe(Eintrag));
                }
                // Alle Auswahlen entfernen
                for (Beteiligte of Liste) {
                    Beteiligte.Selected = false;
                }
                // Auswahl festlegen
                for (let BeteiligteID of this.AuswahlIDliste) {
                    Beteiligte = lodash.find(Liste, { _id: BeteiligteID });
                    if (!lodash.isUndefined(Beteiligte))
                        Beteiligte.Selected = true;
                }
                this.Anzeigeliste = lodash.cloneDeep(Liste);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'PrepareDaten', this.Debug.Typen.Component);
        }
    }
    GetBeteiligteAlphabetbuchstabe(value) {
        try {
            let Buchstabe = value.Sortvalue.substring(0, 1).toUpperCase();
            if (Buchstabe !== this.Lastletter) {
                this.Lastletter = Buchstabe;
                return Buchstabe;
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'GetBeteiligteAlphabetbuchstabe', this.Debug.Typen.Component);
        }
    }
    BeteiligteButtonClicked(Beteiligte) {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'BeteiligteButtonClicked', this.Debug.Typen.Component);
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Beteiligtefiltertext = '';
            this.Beteiligtealphabetauswahl = buchstabe;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'AlphabetClicked', this.Debug.Typen.Component);
        }
    }
    CheckedChanged(result) {
        try {
            let Beteiligte;
            if (this.Multiselect === false) {
                for (Beteiligte of this.Beteiligteliste) {
                    Beteiligte.Selected = false;
                }
                for (Beteiligte of this.Anzeigeliste) {
                    Beteiligte.Selected = false;
                }
            }
            // Anpassung in der Gesamtliste
            Beteiligte = lodash.find(this.Beteiligteliste, { BeteiligtenID: this.Anzeigeliste[result.index].BeteiligtenID });
            if (!lodash.isUndefined(Beteiligte))
                Beteiligte.Selected = result.status;
            // Anpassung in der Anzeigeliste
            this.Anzeigeliste[result.index].Selected = result.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'CheckedChanged', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        let IDListe = [];
        for (let Beteiligte of this.Anzeigeliste) {
            if (!lodash.isUndefined(Beteiligte.Selected) && Beteiligte.Selected === true) {
                IDListe.push(Beteiligte.BeteiligtenID);
            }
        }
        this.OkClickedEvent.emit(IDListe);
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Auswahl', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
};
PjBeteiligtenAuswahlComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: const_1.ConstProvider },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService }
];
PjBeteiligtenAuswahlComponent.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['SmallAlphabet', { static: true },] }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    AuswahlIDliste: [{ type: core_1.Input }],
    Multiselect: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }]
};
PjBeteiligtenAuswahlComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-beteiligten-auswahl',
        template: __webpack_require__(/*! ./pj-beteiligten-auswahl.component.html?ngResource */ 23930),
        styles: [__webpack_require__(/*! ./pj-beteiligten-auswahl.component.scss?ngResource */ 10403)]
    })
], PjBeteiligtenAuswahlComponent);
exports.PjBeteiligtenAuswahlComponent = PjBeteiligtenAuswahlComponent;


/***/ }),

/***/ 15438:
/*!*****************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjBeteiligtenAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_beteiligten_auswahl_component_1 = __webpack_require__(/*! ./pj-beteiligten-auswahl.component */ 88486);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const alphabet_relative_module_1 = __webpack_require__(/*! ../../components/alphabet-relative/alphabet-relative.module */ 36255);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
let PjBeteiligtenAuswahlModule = class PjBeteiligtenAuswahlModule {
};
PjBeteiligtenAuswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_beteiligten_auswahl_component_1.PjBeteiligtenAuswahlComponent
        ],
        exports: [
            pj_beteiligten_auswahl_component_1.PjBeteiligtenAuswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            alphabet_module_1.AlphabetModule,
            alphabet_relative_module_1.AlphabetRelativeModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule
        ],
        providers: []
    })
], PjBeteiligtenAuswahlModule);
exports.PjBeteiligtenAuswahlModule = PjBeteiligtenAuswahlModule;


/***/ }),

/***/ 65659:
/*!******************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-editor/pj-beteiligten-editor.component.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjBeteiligtenEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const uuid_1 = __webpack_require__(/*! uuid */ 70291);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjBeteiligtenEditorComponent = class PjBeteiligtenEditorComponent {
    constructor(Basics, Debug, Tools, DBProjekt, DBStandort, DBBeteiligte, Displayservice, Pool, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DBProjekt = DBProjekt;
        this.DBStandort = DBStandort;
        this.DBBeteiligte = DBBeteiligte;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.Const = Const;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.DeleteClickedEvent = new core_1.EventEmitter();
        this.FachbereichClickedEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.DeleteEnabled = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.CanDelete = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            switch (this.DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp) {
                case this.Const.Beteiligteneintragtypen.Person:
                    this.JoiShema = Joi.object({
                        Name: Joi.string().required().max(100),
                        Firma: Joi.string().required().max(100),
                    }).options({ stripUnknown: true });
                    break;
                case this.Const.Beteiligteneintragtypen.Firma:
                    this.JoiShema = Joi.object({
                        Firma: Joi.string().required().max(100),
                    }).options({ stripUnknown: true });
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Beteiligteneditor, this.ZIndex);
            this.SetupValidation();
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Beteiligteneditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            this.CanDelete = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            window.setTimeout(() => {
                this.ValidateInput();
            }, 30);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DBBeteiligte.CurrentBeteiligte);
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    ResetEditor() {
        try {
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'ResetEditor', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        try {
            this.ResetEditor();
            this.CancelClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        let Index;
        try {
            if (this.DBBeteiligte.CurrentBeteiligte.BeteiligtenID === null) {
                this.DBBeteiligte.CurrentBeteiligte.BeteiligtenID = (0, uuid_1.v4)();
                this.DBProjekt.CurrentProjekt.Beteiligtenliste.push(this.DBBeteiligte.CurrentBeteiligte);
            }
            else {
                Index = lodash.findIndex(this.DBProjekt.CurrentProjekt.Beteiligtenliste, { BeteiligtenID: this.DBBeteiligte.CurrentBeteiligte.BeteiligtenID });
                if (Index !== -1) {
                    this.DBProjekt.CurrentProjekt.Beteiligtenliste[Index] = this.DBBeteiligte.CurrentBeteiligte;
                }
            }
            this.DBBeteiligte.BeteiligtenlisteChanged.emit();
            this.OkClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        try {
            event.preventDefault();
            event.stopPropagation();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    BeteiligtetypChanged(event) {
        try {
            this.DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp = event.detail.value;
            this.SetupValidation();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'BeteiligtetypChanged', this.Debug.Typen.Component);
        }
    }
    GeschlechtChanged(event) {
        try {
            this.DBBeteiligte.CurrentBeteiligte.Anrede = event.detail.value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'GeschlechtChanged', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    CanDeleteCheckedChanged(event) {
        try {
            this.CanDelete = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'CanDeleteCheckedChanged', this.Debug.Typen.Component);
        }
    }
    DeleteButtonClicked() {
        try {
            if (this.CanDelete) {
                this.DBProjekt.CurrentProjekt.Beteiligtenliste = lodash.filter(this.DBProjekt.CurrentProjekt.Beteiligtenliste, (eintrag) => {
                    return eintrag.BeteiligtenID !== this.DBBeteiligte.CurrentBeteiligte.BeteiligtenID;
                });
                this.DBBeteiligte.BeteiligtenlisteChanged.emit();
                this.DeleteClickedEvent.emit();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
        }
    }
};
PjBeteiligtenEditorComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider }
];
PjBeteiligtenEditorComponent.propDecorators = {
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    DeleteClickedEvent: [{ type: core_1.Output }],
    FachbereichClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjBeteiligtenEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-beteiligten-editor',
        template: __webpack_require__(/*! ./pj-beteiligten-editor.component.html?ngResource */ 19226),
        styles: [__webpack_require__(/*! ./pj-beteiligten-editor.component.scss?ngResource */ 67925)]
    })
], PjBeteiligtenEditorComponent);
exports.PjBeteiligtenEditorComponent = PjBeteiligtenEditorComponent;


/***/ }),

/***/ 9506:
/*!***************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-editor/pj-beteiligten-editor.module.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjBeteiligtenEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const pj_beteiligten_editor_component_1 = __webpack_require__(/*! ./pj-beteiligten-editor.component */ 65659);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
let PjBeteiligtenEditorModule = class PjBeteiligtenEditorModule {
};
PjBeteiligtenEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_beteiligten_editor_component_1.PjBeteiligtenEditorComponent
        ],
        exports: [
            pj_beteiligten_editor_component_1.PjBeteiligtenEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            checkbox_clon_module_1.CheckboxClonModule,
        ],
        providers: []
    })
], PjBeteiligtenEditorModule);
exports.PjBeteiligtenEditorModule = PjBeteiligtenEditorModule;


/***/ }),

/***/ 7022:
/*!****************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-auswahl/pj-favoriten-auswahl.component.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 21778)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PjFavoritenAuswahlComponent = void 0;

const tslib_1 = __webpack_require__(/*! tslib */ 34929);

const core_1 = __webpack_require__(/*! @angular/core */ 22560);

const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);

const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);

const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);

const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));

const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);

const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);

const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);

const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);

const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);

let PjFavoritenAuswahlComponent = class PjFavoritenAuswahlComponent {
  constructor(Debug, Displayservice, Const, Pool, DBMitarbeiter, DBMitarbeitersettings, DBStandort, DBProjekte) {
    this.Debug = Debug;
    this.Displayservice = Displayservice;
    this.Const = Const;
    this.Pool = Pool;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.DBStandort = DBStandort;
    this.DBProjekte = DBProjekte;
    this.CancelClickedEvent = new core_1.EventEmitter();
    this.OkClickedEvent = new core_1.EventEmitter();
    this.FavoritClickedEvent = new core_1.EventEmitter();

    try {
      this.Titel = this.Const.NONE;
      this.Iconname = 'location-outline';
      this.Dialogbreite = 700;
      this.Dialoghoehe = 300;
      this.PositionY = 100;
      this.ZIndex = 2000;
      this.Projektliste = [];
      this.Datenliste = [];
      this.Favorit = null;
      this.DataSubscription = null;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'constructor', this.Debug.Typen.Component);
    }
  }

  ngOnDestroy() {
    try {
      this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Favoritenauswahl);

      if (this.DataSubscription !== null) {
        this.DataSubscription.unsubscribe();
        this.DataSubscription = null;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'OnDestroy', this.Debug.Typen.Component);
    }
  }

  ngOnInit() {
    try {
      this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Favoritenauswahl, this.ZIndex);
      this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
        this.PrepareData();
      });
      this.PrepareData();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'OnInit', this.Debug.Typen.Component);
    }
  }

  ngAfterViewInit() {
    try {
      this.Favorit = lodash.cloneDeep(this.DBProjekte.CurrentFavorit);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'AfterViewInit', this.Debug.Typen.Component);
    }
  }

  CancelButtonClicked() {
    if (this.DBProjekte.CurrentFavorit === null) {
      this.DBProjekte.CurrentFavoritprojektindex = null; // this.Pool.Mitarbeitersettings.ProjektID = null;
    } else {
      if (this.DBProjekte.Favoritenprojekteanzahl > 0) {
        this.DBProjekte.CurrentFavoritprojektindex = 0;
      } else {
        this.DBProjekte.CurrentFavoritprojektindex = null;
      }
    }

    this.CancelClickedEvent.emit();

    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
    }
  }

  OkButtonClicked() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        _this.DBProjekte.CurrentFavorit = lodash.cloneDeep(_this.Favorit);

        if (_this.DBProjekte.CurrentFavorit === null) {
          _this.Pool.Mitarbeitersettings.FavoritenID = null;
          _this.DBProjekte.CurrentFavoritenlisteindex = null;
          _this.Pool.Mitarbeitersettings.ProjektID = null;
        } else {
          _this.Pool.Mitarbeitersettings.FavoritenID = _this.DBProjekte.CurrentFavorit.FavoritenID;
          _this.DBProjekte.CurrentFavoritenlisteindex = lodash.findIndex(_this.Pool.Mitarbeiterdaten.Favoritenliste, {
            FavoritenID: _this.DBProjekte.CurrentFavorit.FavoritenID
          });
          _this.Pool.Mitarbeitersettings.ProjektID = null;
        }

        yield _this.DBMitarbeitersettings.UpdateMitarbeitersettings(_this.Pool.Mitarbeitersettings);

        _this.DBProjekte.InitProjektfavoritenliste();

        yield _this.Pool.ReadProjektdaten(_this.DBProjekte.Projektliste);

        _this.DBProjekte.InitMenuProjektauswahl();

        _this.Pool.LoadingAllDataFinished.emit();

        _this.DBProjekte.CurrentFavoritenChanged.emit();

        _this.OkClickedEvent.emit();
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'OkButtonClicked', _this.Debug.Typen.Component);
      }
    })();
  }

  ContentClicked(event) {
    event.preventDefault();
    event.stopPropagation();

    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'ContentClicked', this.Debug.Typen.Component);
    }
  }

  PrepareData() {
    try {
      let Favoritenindex = 0;
      let Projektindex = 0;
      let Projekt;
      this.Datenliste = [];

      if (this.Pool.Mitarbeiterdaten !== null) {
        for (let Favorit of this.Pool.Mitarbeiterdaten.Favoritenliste) {
          this.Datenliste[Favoritenindex] = [];
          Projektindex = 0;

          for (let ProjektID of this.Pool.Mitarbeiterdaten.Favoritenliste[Favoritenindex].Projekteliste) {
            Projekt = lodash.find(this.Pool.Gesamtprojektliste, {
              _id: this.Pool.Mitarbeiterdaten.Favoritenliste[Favoritenindex].Projekteliste[Projektindex]
            });
            if (!lodash.isUndefined(Projekt)) this.Datenliste[Favoritenindex].push(Projekt);
            Projektindex++;
          }

          Favoritenindex++;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'PrepareData', this.Debug.Typen.Component);
    }
  }

  GetStandortname(StandortID) {
    try {
      let Standort = lodash.find(this.Pool.Standorteliste, {
        _id: StandortID
      });
      if (!lodash.isUndefined(Standort)) return Standort.Ort;else return 'unbekannt';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'GetStandortname', this.Debug.Typen.Component);
    }
  }

  FavoritButtonClicked(Favorit) {
    try {
      this.Favorit = Favorit;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Favoriten Auswahl', 'FavoritButtonClicked', this.Debug.Typen.Component);
    }
  }

};

PjFavoritenAuswahlComponent.ctorParameters = () => [{
  type: debug_1.DebugProvider
}, {
  type: display_service_1.DisplayService
}, {
  type: const_1.ConstProvider
}, {
  type: database_pool_service_1.DatabasePoolService
}, {
  type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
}, {
  type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
}, {
  type: database_standorte_service_1.DatabaseStandorteService
}, {
  type: database_projekte_service_1.DatabaseProjekteService
}];

PjFavoritenAuswahlComponent.propDecorators = {
  CancelClickedEvent: [{
    type: core_1.Output
  }],
  OkClickedEvent: [{
    type: core_1.Output
  }],
  FavoritClickedEvent: [{
    type: core_1.Output
  }],
  Titel: [{
    type: core_1.Input
  }],
  Iconname: [{
    type: core_1.Input
  }],
  Dialogbreite: [{
    type: core_1.Input
  }],
  Dialoghoehe: [{
    type: core_1.Input
  }],
  PositionY: [{
    type: core_1.Input
  }],
  ZIndex: [{
    type: core_1.Input
  }]
};
PjFavoritenAuswahlComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'pj-favoriten-auswahl',
  template: __webpack_require__(/*! ./pj-favoriten-auswahl.component.html?ngResource */ 55551),
  styles: [__webpack_require__(/*! ./pj-favoriten-auswahl.component.scss?ngResource */ 45001)]
})], PjFavoritenAuswahlComponent);
exports.PjFavoritenAuswahlComponent = PjFavoritenAuswahlComponent;

/***/ }),

/***/ 64877:
/*!*************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-auswahl/pj-favoriten-auswahl.module.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjFavoritenAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const pj_favoriten_auswahl_component_1 = __webpack_require__(/*! ./pj-favoriten-auswahl.component */ 7022);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjFavoritenAuswahlModule = class PjFavoritenAuswahlModule {
};
PjFavoritenAuswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_favoriten_auswahl_component_1.PjFavoritenAuswahlComponent
        ],
        exports: [
            pj_favoriten_auswahl_component_1.PjFavoritenAuswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjFavoritenAuswahlModule);
exports.PjFavoritenAuswahlModule = PjFavoritenAuswahlModule;


/***/ }),

/***/ 96891:
/*!**************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-editor/pj-favoriten-editor.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjFavoritenEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let PjFavoritenEditorComponent = class PjFavoritenEditorComponent {
    constructor(Debug, Displayservice, Const, Pool, DBStandort, DBProjekte) {
        this.Debug = Debug;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.Pool = Pool;
        this.DBStandort = DBStandort;
        this.DBProjekte = DBProjekte;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.EditProjektlisteEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Valid = true;
            this.Titel = this.Const.NONE;
            this.Iconname = 'location-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
            this.Projektliste = [];
            this.ProjektlisteSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Favoriteneditor);
            if (this.ProjektlisteSubscription !== null) {
                this.ProjektlisteSubscription.unsubscribe();
                this.ProjektlisteSubscription = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SetupValidation();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Favoriteneditor, this.ZIndex);
            this.ProjektlisteSubscription = this.DBProjekte.CurrentFavoritenChanged.subscribe(() => {
                this.PrepareData();
            });
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Name: Joi.string().required().max(100),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DBProjekte.CurrentFavorit);
            if (Result.error) {
                this.Valid = false;
                console.log(Result.error.message);
            }
            else
                this.Valid = true;
            if (this.DBProjekte.CurrentFavorit.Projekteliste.length === 0)
                this.Valid = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        this.DBProjekte.SaveProjektefavoriten().then(() => {
            this.OkClickedEvent.emit();
        }).catch((error) => {
            debugger;
        });
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    EditProjekteButtonClicked() {
        try {
            this.EditProjektlisteEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'EditProjekteButtonClicked', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            let Projekt;
            this.Projektliste = [];
            for (let currentid of this.DBProjekte.CurrentFavorit.Projekteliste) {
                Projekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: currentid });
                if (!lodash.isUndefined(Projekt))
                    this.Projektliste.push(Projekt);
            }
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Favoriten Editor', 'PrepareData', this.Debug.Typen.Component);
        }
    }
};
PjFavoritenEditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projekte_service_1.DatabaseProjekteService }
];
PjFavoritenEditorComponent.propDecorators = {
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    EditProjektlisteEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjFavoritenEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-favoriten-editor',
        template: __webpack_require__(/*! ./pj-favoriten-editor.component.html?ngResource */ 20129),
        styles: [__webpack_require__(/*! ./pj-favoriten-editor.component.scss?ngResource */ 41499)]
    })
], PjFavoritenEditorComponent);
exports.PjFavoritenEditorComponent = PjFavoritenEditorComponent;


/***/ }),

/***/ 17086:
/*!***********************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-editor/pj-favoriten-editor.module.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjFavoritenEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const pj_favoriten_editor_component_1 = __webpack_require__(/*! ./pj-favoriten-editor.component */ 96891);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjFavoritenEditorModule = class PjFavoritenEditorModule {
};
PjFavoritenEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_favoriten_editor_component_1.PjFavoritenEditorComponent
        ],
        exports: [
            pj_favoriten_editor_component_1.PjFavoritenEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjFavoritenEditorModule);
exports.PjFavoritenEditorModule = PjFavoritenEditorModule;


/***/ }),

/***/ 12283:
/*!**************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-bauteileditor/pj-gebaeude-bauteileditor.component.ts ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeBauteileditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjGebaeudeBauteileditorComponent = class PjGebaeudeBauteileditorComponent {
    constructor(Debug, Displayservice, Const, DB) {
        this.Debug = Debug;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.DB = DB;
        this.ValidChange = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Titel = this.Const.NONE;
            this.Iconname = 'location-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Bauteileditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SetupValidation();
            this.ValidateInput();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Bauteileditor, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Bauteilname: Joi.string().required().max(100),
                Listenposition: Joi.number().required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentBauteil);
            if (Result.error) {
                this.Valid = false;
                console.log(Result.error.message);
            }
            else
                this.Valid = true;
            this.ValidChange.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.DB.SaveBauteil().then(() => {
                // this.ResetEditor();
                this.OkClickedEvent.emit();
            }).catch((error) => {
                debugger;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        try {
            event.preventDefault();
            event.stopPropagation();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ListenpositionChangedHandler(event) {
        try {
            let Text = event.detail.value;
            this.DB.CurrentBauteil.Listenposition = Text;
            event.stopPropagation();
            event.preventDefault();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'ListenpositionChangedHandler', this.Debug.Typen.Component);
        }
    }
};
PjGebaeudeBauteileditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService }
];
PjGebaeudeBauteileditorComponent.propDecorators = {
    ValidChange: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjGebaeudeBauteileditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-gebaeude-bauteileditor',
        template: __webpack_require__(/*! ./pj-gebaeude-bauteileditor.component.html?ngResource */ 67385),
        styles: [__webpack_require__(/*! ./pj-gebaeude-bauteileditor.component.scss?ngResource */ 61405)]
    })
], PjGebaeudeBauteileditorComponent);
exports.PjGebaeudeBauteileditorComponent = PjGebaeudeBauteileditorComponent;


/***/ }),

/***/ 92921:
/*!***********************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-bauteileditor/pj-gebaeude-bauteileditor.module.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeBauteileditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const pj_gebaeude_bauteileditor_component_1 = __webpack_require__(/*! ./pj-gebaeude-bauteileditor.component */ 12283);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjGebaeudeBauteileditorModule = class PjGebaeudeBauteileditorModule {
};
PjGebaeudeBauteileditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_gebaeude_bauteileditor_component_1.PjGebaeudeBauteileditorComponent
        ],
        exports: [
            pj_gebaeude_bauteileditor_component_1.PjGebaeudeBauteileditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjGebaeudeBauteileditorModule);
exports.PjGebaeudeBauteileditorModule = PjGebaeudeBauteileditorModule;


/***/ }),

/***/ 73873:
/*!****************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-geschosseditor/pj-gebaeude-geschosseditor.component.ts ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeGeschosseditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjGebaeudeGeschosseditorComponent = class PjGebaeudeGeschosseditorComponent {
    constructor(Debug, Displayservice, Const, DB) {
        this.Debug = Debug;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.DB = DB;
        this.ValidChange = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.DeleteClickedEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Titel = this.Const.NONE;
            this.Iconname = 'location-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Geschosseditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SetupValidation();
            this.ValidateInput();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Geschosseditor, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Geschossname: Joi.string().required().max(100),
                Kurzbezeichnung: Joi.string().required().max(10),
                Listenposition: Joi.number().required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteil Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentGeschoss);
            if (Result.error) {
                this.Valid = false;
                console.log(Result.error.message);
            }
            else
                this.Valid = true;
            this.ValidChange.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    LoeschenButtonClicked() {
        try {
            this.DB.DeleteGeschoss().then(() => {
                this.DeleteClickedEvent.emit();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'LoeschenButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        this.DB.SaveGeschoss().then(() => {
            if (this.DB.CurrentGeschossindex === null && this.DB.CurrentBauteil.Geschossliste.length > 0) {
                this.DB.CurrentGeschossindex = 0;
            }
            this.OkClickedEvent.emit();
        }).catch((error) => {
            debugger;
        });
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ListenpostionTextChanged(event) {
        try {
            this.DB.CurrentGeschoss.Listenposition = parseInt(event.Text);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'ListenpostionTextChanged', this.Debug.Typen.Component);
        }
    }
    LoeschenCheckboxChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Geschoss Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
        }
    }
};
PjGebaeudeGeschosseditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService }
];
PjGebaeudeGeschosseditorComponent.propDecorators = {
    ValidChange: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    DeleteClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjGebaeudeGeschosseditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-gebaeude-geschosseditor',
        template: __webpack_require__(/*! ./pj-gebaeude-geschosseditor.component.html?ngResource */ 87312),
        styles: [__webpack_require__(/*! ./pj-gebaeude-geschosseditor.component.scss?ngResource */ 2986)]
    })
], PjGebaeudeGeschosseditorComponent);
exports.PjGebaeudeGeschosseditorComponent = PjGebaeudeGeschosseditorComponent;


/***/ }),

/***/ 949:
/*!*************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-geschosseditor/pj-gebaeude-geschosseditor.module.ts ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeGeschosseditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const pj_gebaeude_geschosseditor_component_1 = __webpack_require__(/*! ./pj-gebaeude-geschosseditor.component */ 73873);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjGebaeudeGeschosseditorModule = class PjGebaeudeGeschosseditorModule {
};
PjGebaeudeGeschosseditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_gebaeude_geschosseditor_component_1.PjGebaeudeGeschosseditorComponent
        ],
        exports: [
            pj_gebaeude_geschosseditor_component_1.PjGebaeudeGeschosseditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjGebaeudeGeschosseditorModule);
exports.PjGebaeudeGeschosseditorModule = PjGebaeudeGeschosseditorModule;


/***/ }),

/***/ 47438:
/*!**********************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.component.ts ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeRaumauswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const input_clone_component_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.component */ 52836);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
let PjGebaeudeRaumauswahlComponent = class PjGebaeudeRaumauswahlComponent {
    constructor(Basics, Debug, Tools, DB, DBProjektpunkte, Displayservice, Pool, DBGebaeude, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBProjektpunkte = DBProjektpunkte;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.DBGebaeude = DBGebaeude;
        this.Const = Const;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        try {
            this.Titel = this.Const.NONE;
            this.Iconname = 'business-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Raumauswahl);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Raumauswahl, this.ZIndex);
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'OnInit', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            this.DBGebaeude.CurrentBauteil = null;
            this.DBGebaeude.CurrentBauteilindex = null;
            this.DBGebaeude.CurrentGeschoss = null;
            this.DBGebaeude.CurrentGeschossindex = null;
            this.DBGebaeude.CurrentRaum = null;
            this.DBGebaeude.CurrentRaumindex = null;
            if (this.DBProjektpunkte.CurrentProjektpunkt !== null) {
                if (this.DBProjektpunkte.CurrentProjektpunkt.BauteilID !== null) {
                    this.DBGebaeude.CurrentBauteilindex = lodash.findIndex(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: this.DBProjektpunkte.CurrentProjektpunkt.BauteilID });
                    if (this.DBGebaeude.CurrentBauteilindex !== -1) {
                        this.DBGebaeude.CurrentBauteil = this.DB.CurrentProjekt.Bauteilliste[this.DBGebaeude.CurrentBauteilindex];
                        if (this.DBProjektpunkte.CurrentProjektpunkt.GeschossID !== null) {
                            this.DBGebaeude.CurrentGeschossindex = lodash.findIndex(this.DBGebaeude.CurrentBauteil.Geschossliste, { GeschossID: this.DBProjektpunkte.CurrentProjektpunkt.GeschossID });
                            if (this.DBGebaeude.CurrentGeschossindex !== -1) {
                                this.DBGebaeude.CurrentGeschoss = this.DBGebaeude.CurrentBauteil.Geschossliste[this.DBGebaeude.CurrentGeschossindex];
                                if (this.DBProjektpunkte.CurrentProjektpunkt.RaumID !== null) {
                                    this.DBGebaeude.CurrentRaumindex = lodash.findIndex(this.DBGebaeude.CurrentGeschoss.Raumliste, { RaumID: this.DBProjektpunkte.CurrentProjektpunkt.RaumID });
                                    if (this.DBGebaeude.CurrentRaumindex !== -1) {
                                        this.DBGebaeude.CurrentRaum = this.DBGebaeude.CurrentGeschoss.Raumliste[this.DBGebaeude.CurrentRaumindex];
                                    }
                                    else
                                        this.DBGebaeude.CurrentRaumindex = null;
                                }
                            }
                            else
                                this.DBGebaeude.CurrentGeschossindex = null;
                        }
                    }
                    else
                        this.DBGebaeude.CurrentBauteilindex = null;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'PrepareData', this.Debug.Typen.Page);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.DBProjektpunkte.CurrentProjektpunkt.BauteilID = this.DBGebaeude.CurrentBauteil !== null ? this.DBGebaeude.CurrentBauteil.BauteilID : null;
            this.DBProjektpunkte.CurrentProjektpunkt.GeschossID = this.DBGebaeude.CurrentGeschoss !== null ? this.DBGebaeude.CurrentGeschoss.GeschossID : null;
            this.DBProjektpunkte.CurrentProjektpunkt.RaumID = this.DBGebaeude.CurrentRaum !== null ? this.DBGebaeude.CurrentRaum.RaumID : null;
            this.OkClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    BauteilIndexChanged(event) {
        try {
            if (event.detail.value !== null) {
                this.DBGebaeude.CurrentBauteilindex = event.detail.value;
                this.DBGebaeude.CurrentBauteil = this.DB.CurrentProjekt.Bauteilliste[this.DBGebaeude.CurrentBauteilindex];
            }
            else {
                this.DBGebaeude.CurrentBauteilindex = null;
                this.DBGebaeude.CurrentBauteil = null;
            }
            this.DBGebaeude.CurrentGeschossindex = null;
            this.DBGebaeude.CurrentGeschoss = null;
            this.DBGebaeude.CurrentRaumindex = null;
            this.DBGebaeude.CurrentRaum = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'BauteilIndexChanged', this.Debug.Typen.Component);
        }
    }
    GeschossIndexChanged(event) {
        try {
            if (event.detail.value !== null) {
                this.DBGebaeude.CurrentGeschossindex = event.detail.value;
                this.DBGebaeude.CurrentGeschoss = this.DB.CurrentProjekt.Bauteilliste[this.DBGebaeude.CurrentBauteilindex].Geschossliste[this.DBGebaeude.CurrentGeschossindex];
            }
            else {
                this.DBGebaeude.CurrentGeschossindex = null;
                this.DBGebaeude.CurrentGeschoss = null;
            }
            this.DBGebaeude.CurrentRaumindex = null;
            this.DBGebaeude.CurrentRaum = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'GeschossIndexChanged', this.Debug.Typen.Component);
        }
    }
    RaumIndexChanged(event) {
        try {
            if (event.detail.value !== null) {
                this.DBGebaeude.CurrentRaumindex = event.detail.value;
                this.DBGebaeude.CurrentRaum = this.DB.CurrentProjekt.Bauteilliste[this.DBGebaeude.CurrentBauteilindex].Geschossliste[this.DBGebaeude.CurrentGeschossindex].Raumliste[this.DBGebaeude.CurrentRaumindex];
            }
            else {
                this.DBGebaeude.CurrentRaumindex = null;
                this.DBGebaeude.CurrentRaum = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebaeude Raumauswahl', 'RaumIndexChanged', this.Debug.Typen.Component);
        }
    }
};
PjGebaeudeRaumauswahlComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService },
    { type: const_1.ConstProvider }
];
PjGebaeudeRaumauswahlComponent.propDecorators = {
    List: [{ type: core_1.ViewChildren, args: [input_clone_component_1.InputCloneComponent,] }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjGebaeudeRaumauswahlComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-gebaeude-raumauswahl',
        template: __webpack_require__(/*! ./pj-gebaeude-raumauswahl.component.html?ngResource */ 53636),
        styles: [__webpack_require__(/*! ./pj-gebaeude-raumauswahl.component.scss?ngResource */ 10328)]
    })
], PjGebaeudeRaumauswahlComponent);
exports.PjGebaeudeRaumauswahlComponent = PjGebaeudeRaumauswahlComponent;


/***/ }),

/***/ 1579:
/*!*******************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.module.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeRaumauswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_gebaeude_raumauswahl_component_1 = __webpack_require__(/*! ./pj-gebaeude-raumauswahl.component */ 47438);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
let PjGebaeudeRaumauswahlModule = class PjGebaeudeRaumauswahlModule {
};
PjGebaeudeRaumauswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_gebaeude_raumauswahl_component_1.PjGebaeudeRaumauswahlComponent
        ],
        exports: [
            pj_gebaeude_raumauswahl_component_1.PjGebaeudeRaumauswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule
        ],
        providers: []
    })
], PjGebaeudeRaumauswahlModule);
exports.PjGebaeudeRaumauswahlModule = PjGebaeudeRaumauswahlModule;


/***/ }),

/***/ 47790:
/*!********************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumeditor/pj-gebaeude-raumeditor.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeRaumeditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjGebaeudeRaumeditorComponent = class PjGebaeudeRaumeditorComponent {
    constructor(Debug, Displayservice, Const, DB) {
        this.Debug = Debug;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.DB = DB;
        this.ValidChange = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.DeleteClickedEvent = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Titel = this.Const.NONE;
            this.Iconname = 'location-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Raumeditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Raumeditor, this.ZIndex);
            this.SetupValidation();
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentRaum);
            if (Result.error) {
                this.Valid = false;
                console.log(Result.error.message);
            }
            else
                this.Valid = true;
            this.ValidChange.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.DeleteEnabled = false;
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.DB.SaveRaum().then(() => {
                this.OkClickedEvent.emit();
            }).catch((error) => {
                debugger;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    LoeschenButtonClicked() {
        try {
            this.DB.DeleteRaum().then(() => {
                this.DeleteClickedEvent.emit();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'LoeschenButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ListenpostionTextChanged(event) {
        try {
            this.DB.CurrentRaum.Listenposition = parseInt(event.Text);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'ListenpostionTextChanged', this.Debug.Typen.Component);
        }
    }
    LoeschenCheckboxChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Raumname: Joi.string().required().max(100),
                Raumnummer: Joi.string().required().max(10),
                Listenposition: Joi.number().required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Raum Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
};
PjGebaeudeRaumeditorComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService }
];
PjGebaeudeRaumeditorComponent.propDecorators = {
    ValidChange: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    DeleteClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjGebaeudeRaumeditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-gebaeude-raumeditor',
        template: __webpack_require__(/*! ./pj-gebaeude-raumeditor.component.html?ngResource */ 19257),
        styles: [__webpack_require__(/*! ./pj-gebaeude-raumeditor.component.scss?ngResource */ 73593)]
    })
], PjGebaeudeRaumeditorComponent);
exports.PjGebaeudeRaumeditorComponent = PjGebaeudeRaumeditorComponent;


/***/ }),

/***/ 57406:
/*!*****************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumeditor/pj-gebaeude-raumeditor.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjGebaeudeRaumeditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const pj_gebaeude_raumeditor_component_1 = __webpack_require__(/*! ./pj-gebaeude-raumeditor.component */ 47790);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjGebaeudeRaumeditorModule = class PjGebaeudeRaumeditorModule {
};
PjGebaeudeRaumeditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_gebaeude_raumeditor_component_1.PjGebaeudeRaumeditorComponent
        ],
        exports: [
            pj_gebaeude_raumeditor_component_1.PjGebaeudeRaumeditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjGebaeudeRaumeditorModule);
exports.PjGebaeudeRaumeditorModule = PjGebaeudeRaumeditorModule;


/***/ }),

/***/ 74091:
/*!************************************************************************************************!*\
  !*** ./src/app/components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.component.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjKostengruppenAuswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const input_clone_component_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.component */ 52836);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const kostengruppen_service_1 = __webpack_require__(/*! ../../services/kostengruppen/kostengruppen.service */ 9736);
let PjKostengruppenAuswahlComponent = class PjKostengruppenAuswahlComponent {
    constructor(Basics, Debug, Tools, DB, Displayservice, Kostengruppenservice, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.Displayservice = Displayservice;
        this.Kostengruppenservice = Kostengruppenservice;
        this.Const = Const;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        try {
            this.Titel = this.Const.NONE;
            this.Iconname = 'cash-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.Oberkostengruppenliste = [];
            this.Hauptkostengruppenliste = [];
            this.Unterkostengruppenliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Kostengruppenauswahl);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Kostengruppenauswahl, this.ZIndex);
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'OnInit', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            this.Oberkostengruppenliste = [];
            if (this.DB.CurrentProjektpunkt === null)
                this.DB.CurrentProjektpunkt = this.DB.GetNewProtokollpunkt(null);
            this.Oberkostengruppenliste = lodash.filter(this.Kostengruppenservice.Kostengruppen, (Gruppe) => {
                return Gruppe.Typ === this.Kostengruppenservice.Kostengruppentypen.Obergruppe;
            });
            this.Hauptkostengruppenliste = [];
            if (this.DB.CurrentProjektpunkt.Oberkostengruppe !== null) {
                this.Hauptkostengruppenliste = lodash.filter(this.Kostengruppenservice.Kostengruppen, (Gruppe) => {
                    return Gruppe.Typ === this.Kostengruppenservice.Kostengruppentypen.Hauptgruppe && Gruppe.Obergruppennummer === this.DB.CurrentProjektpunkt.Oberkostengruppe;
                });
            }
            else {
                this.DB.CurrentProjektpunkt.Hauptkostengruppe = null;
                this.DB.CurrentProjektpunkt.Unterkostengruppe = null;
            }
            this.Unterkostengruppenliste = [];
            if (this.DB.CurrentProjektpunkt.Hauptkostengruppe !== null) {
                this.Unterkostengruppenliste = lodash.filter(this.Kostengruppenservice.Kostengruppen, (Gruppe) => {
                    return Gruppe.Typ === this.Kostengruppenservice.Kostengruppentypen.Untergruppe && Gruppe.Hauptgruppennummer === this.DB.CurrentProjektpunkt.Hauptkostengruppe;
                });
            }
            else {
                this.DB.CurrentProjektpunkt.Unterkostengruppe = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    OberkostengruppeChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.Oberkostengruppe = event.detail.value;
            this.DB.CurrentProjektpunkt.Hauptkostengruppe = null;
            this.DB.CurrentProjektpunkt.Unterkostengruppe = null;
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'OberkostengruppeChanged', this.Debug.Typen.Component);
        }
    }
    HauptkostengruppeChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.Hauptkostengruppe = event.detail.value;
            this.DB.CurrentProjektpunkt.Unterkostengruppe = null;
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'HauptkostengruppeChanged', this.Debug.Typen.Component);
        }
    }
    UnterkostengruppeChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.Unterkostengruppe = event.detail.value;
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen Auswahl', 'UnterkostengruppeChanged', this.Debug.Typen.Component);
        }
    }
};
PjKostengruppenAuswahlComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: display_service_1.DisplayService },
    { type: kostengruppen_service_1.KostengruppenService },
    { type: const_1.ConstProvider }
];
PjKostengruppenAuswahlComponent.propDecorators = {
    List: [{ type: core_1.ViewChildren, args: [input_clone_component_1.InputCloneComponent,] }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjKostengruppenAuswahlComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-kostengruppen-auswahl',
        template: __webpack_require__(/*! ./pj-kostengruppen-auswahl.component.html?ngResource */ 36091),
        styles: [__webpack_require__(/*! ./pj-kostengruppen-auswahl.component.scss?ngResource */ 96519)]
    })
], PjKostengruppenAuswahlComponent);
exports.PjKostengruppenAuswahlComponent = PjKostengruppenAuswahlComponent;


/***/ }),

/***/ 11214:
/*!*********************************************************************************************!*\
  !*** ./src/app/components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.module.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjKostengruppenAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_kostengruppen_auswahl_component_1 = __webpack_require__(/*! ./pj-kostengruppen-auswahl.component */ 74091);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const button_value_date_small_module_1 = __webpack_require__(/*! ../../components/button-value-date-small/button-value-date-small.module */ 4603);
let PjKostengruppenAuswahlModule = class PjKostengruppenAuswahlModule {
};
PjKostengruppenAuswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_kostengruppen_auswahl_component_1.PjKostengruppenAuswahlComponent
        ],
        exports: [
            pj_kostengruppen_auswahl_component_1.PjKostengruppenAuswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            button_value_module_1.ButtonValueModule,
            forms_1.FormsModule,
            button_value_date_module_1.ButtonValueDateModule,
            page_footer_module_1.PageFooterModule,
            button_value_date_small_module_1.ButtonValueDateSmallModule,
            //  ReactiveFormsModule,
        ],
        providers: []
    })
], PjKostengruppenAuswahlModule);
exports.PjKostengruppenAuswahlModule = PjKostengruppenAuswahlModule;


/***/ }),

/***/ 86709:
/*!****************************************************************************************!*\
  !*** ./src/app/components-page/pj-meinewoche-editor/pj-meinewoche-editor.component.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjMeinewocheEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
__webpack_require__(/*! moment-duration-format */ 10943);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let PjMeinewocheEditorComponent = class PjMeinewocheEditorComponent {
    constructor(Basics, Debug, Tools, DB, DBProjekte, DBProjektpunkte, Displayservice, Pool, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBProjekte = DBProjekte;
        this.DBProjektpunkte = DBProjektpunkte;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.Const = Const;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        try {
            this.Titel = this.Const.NONE;
            this.Iconname = 'cash-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.ShowZeitansatzAuswahl = false;
            this.Stundenansatz = 0;
            this.Minutenansatz = 0;
            // this.Punkteliste   = [];
            this.Oberkostengruppenliste = [];
            this.Hauptkostengruppenliste = [];
            this.Unterkostengruppenliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Meinewocheeditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Meinewocheeditor, this.ZIndex);
            this.Tagbreite = (this.Dialogbreite - 20) / 5;
            this.Listenhoehe = this.Dialoghoehe - 100;
            this.Minutenhoehe = this.Listenhoehe / (8 * 60);
            this.DBProjektpunkte.PrepareWochenpunkteliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    /*
  
    private PrepareData() {
  
      try {
  
        let Projektpunkt: Projektpunktestruktur;
        let Wochentagliste: string[] = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag'];
        this.Punkteliste               = [];
        this.Punkteliste['Montag']     = [];
        this.Punkteliste['Dienstag']   = [];
        this.Punkteliste['Mittwoch']   = [];
        this.Punkteliste['Donnerstag'] = [];
        this.Punkteliste['Freitag']    = [];
  
        for(let Wocheneintrag of this.Pool.Mitarbeiterdaten.Meinewocheliste) {
  
          Projektpunkt = lodash.find(this.Pool.Projektpunkteliste[Wocheneintrag.Projektkey], {_id: Wocheneintrag.ProjektpunktID});
  
          if(lodash.isUndefined(Projektpunkt) === false && Projektpunkt.Status !== this.Const.Projektpunktstatustypen.Geschlossen.Name) {
  
            for(let Tag of Wochentagliste) {
  
              if(Wocheneintrag.Montagseinsatz === true && Tag === 'Montag') {
  
                Projektpunkt.Minuten = Wocheneintrag.Montagsminuten + 60 * Wocheneintrag.Montagsstunden;
                this.Punkteliste['Montag'].push(lodash.cloneDeep(Projektpunkt));
              }
              if(Wocheneintrag.Dienstagseinsatz === true && Tag === 'Dienstag') {
  
                Projektpunkt.Minuten = Wocheneintrag.Dienstagsminuten + 60 * Wocheneintrag.Dienstagsstunden;
                this.Punkteliste['Dienstag'].push(lodash.cloneDeep(Projektpunkt));
              }
              if(Wocheneintrag.Mittwochseinsatz  === true && Tag === 'Mittwoch') {
  
                Projektpunkt.Minuten = Wocheneintrag.Mittwochsminuten + 60 * Wocheneintrag.Mittwochsstunden;
                this.Punkteliste['Mittwoch'].push(lodash.cloneDeep(Projektpunkt));
              }
              if(Wocheneintrag.Donnerstagseinsatz === true && Tag === 'Donnerstag') {
  
                Projektpunkt.Minuten = Wocheneintrag.Donnerstagsminuten + 60 * Wocheneintrag.Donnerstagsstunden;
                this.Punkteliste['Donnerstag'].push(lodash.cloneDeep(Projektpunkt));
              }
              if(Wocheneintrag.Freitagseinsatz    === true && Tag === 'Freitag') {
  
                Projektpunkt.Minuten = Wocheneintrag.Freitagsminuten + 60 * Wocheneintrag.Freitagsstunden;
                this.Punkteliste['Freitag'].push(lodash.cloneDeep(Projektpunkt));
              }
  
            }
  
          }
        }
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'PrepareData', this.Debug.Typen.Component);
      }
    }
  
     */
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    TagCheckChangedHandler(event, tag) {
        try {
            if (this.DB.CurrentMeinewoche !== null) {
                this.CurrentTag = tag;
                switch (tag) {
                    case 'Montag':
                        this.DB.CurrentMeinewoche.Montagseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Montagsminuten = 30;
                            this.DB.CurrentMeinewoche.Montagsstunden = 0;
                        }
                        break;
                    case 'Dienstag':
                        this.DB.CurrentMeinewoche.Dienstagseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Dienstagsminuten = 30;
                            this.DB.CurrentMeinewoche.Dienstagsstunden = 0;
                        }
                        break;
                    case 'Mittwoch':
                        this.DB.CurrentMeinewoche.Mittwochseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Mittwochsminuten = 30;
                            this.DB.CurrentMeinewoche.Mittwochsstunden = 0;
                        }
                        break;
                    case 'Donnerstag':
                        this.DB.CurrentMeinewoche.Donnerstagseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Donnerstagsminuten = 30;
                            this.DB.CurrentMeinewoche.Donnerstagsstunden = 0;
                        }
                        break;
                    case 'Freitag':
                        this.DB.CurrentMeinewoche.Freitagseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Freitagsminuten = 30;
                            this.DB.CurrentMeinewoche.Freitagsstunden = 0;
                        }
                        break;
                    case 'Samstag':
                        this.DB.CurrentMeinewoche.Samstagseinsatz = event.status;
                        if (event.status === false) {
                            this.DB.CurrentMeinewoche.Samstagsminuten = 30;
                            this.DB.CurrentMeinewoche.Samstagsstunden = 0;
                        }
                        break;
                }
            }
            this.DBProjektpunkte.PrepareWochenpunkteliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'TagCheckChangedHandler', this.Debug.Typen.Component);
        }
    }
    OkButtonClickedHandler() {
        try {
            let Eintrag = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                return eintrag.ProjektID === this.DB.CurrentMeinewoche.ProjektID && eintrag.ProjektpunktID === this.DB.CurrentMeinewoche.ProjektpunktID;
            });
            Eintrag = this.DB.CurrentMeinewoche;
            if (!Eintrag.Montagseinsatz && !Eintrag.Dienstagseinsatz && !Eintrag.Mittwochseinsatz &&
                !Eintrag.Donnerstagseinsatz && !Eintrag.Freitagseinsatz && !Eintrag.Samstagseinsatz) {
                this.Pool.Mitarbeiterdaten.Meinewocheliste = lodash.filter(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                    return eintrag.ProjektpunktID !== Eintrag.ProjektpunktID;
                });
            }
            this.DB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
                this.OkClickedEvent.emit();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'OkButtonClickedHandler', this.Debug.Typen.Component);
        }
    }
    ZeitansatzClicked(event, tag) {
        try {
            let PagePosY = event.pageY;
            let Buttonhoehe = 20;
            let Dimension = this.ContentDiv.nativeElement.getBoundingClientRect();
            let DivPosY = Dimension.top;
            let OffsetY = event.offsetY;
            this.ShowZeitansatzAuswahl = true;
            this.ZeitansatzPosX = 10;
            this.ZeitansatzPosY = PagePosY - DivPosY - OffsetY + Buttonhoehe + 4;
            this.CurrentTag = tag;
            switch (tag) {
                case 'Montag':
                    this.DB.CurrentMeinewoche.Montagseinsatz = true;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Montagsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Montagsminuten;
                    break;
                case 'Dienstag':
                    this.DB.CurrentMeinewoche.Dienstagseinsatz = true;
                    this.ZeitansatzPosX = this.ZeitansatzPosX + 1 * this.Tagbreite;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Dienstagsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Dienstagsminuten;
                    break;
                case 'Mittwoch':
                    this.DB.CurrentMeinewoche.Mittwochseinsatz = true;
                    this.ZeitansatzPosX = this.ZeitansatzPosX + 2 * this.Tagbreite;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Mittwochsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Mittwochsminuten;
                    break;
                case 'Donnerstag':
                    this.DB.CurrentMeinewoche.Donnerstagseinsatz = true;
                    this.ZeitansatzPosX = this.ZeitansatzPosX + 3 * this.Tagbreite;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Donnerstagsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Donnerstagsminuten;
                    break;
                case 'Freitag':
                    this.DB.CurrentMeinewoche.Freitagseinsatz = true;
                    this.ZeitansatzPosX = this.ZeitansatzPosX + 4 * this.Tagbreite;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Freitagsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Freitagsminuten;
                    break;
                case 'Samstag':
                    this.DB.CurrentMeinewoche.Samstagseinsatz = true;
                    this.ZeitansatzPosX = this.ZeitansatzPosX + 5 * this.Tagbreite;
                    this.Stundenansatz = this.DB.CurrentMeinewoche.Samstagsstunden;
                    this.Minutenansatz = this.DB.CurrentMeinewoche.Samstagsminuten;
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'ZeitansatzClicked', this.Debug.Typen.Component);
        }
    }
    GetZeitansatzstring(stunden, minuten) {
        try {
            let Minutes = minuten + 60 * stunden;
            if (stunden === 0 && minuten === 0) {
                return '--:--';
            }
            else {
                return moment_1.default.duration(Minutes, "minutes").format('hh:mm', { trim: false });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'GetZeitansatzstring', this.Debug.Typen.Component);
        }
    }
    ZeitansatzStundenChanged(event) {
        try {
            let Stunden = event.detail.value;
            switch (this.CurrentTag) {
                case 'Montag':
                    this.DB.CurrentMeinewoche.Montagsstunden = Stunden;
                    break;
                case 'Dienstag':
                    this.DB.CurrentMeinewoche.Dienstagsstunden = Stunden;
                    break;
                case 'Mittwoch':
                    this.DB.CurrentMeinewoche.Mittwochsstunden = Stunden;
                    break;
                case 'Donnerstag':
                    this.DB.CurrentMeinewoche.Donnerstagsstunden = Stunden;
                    break;
                case 'Freitag':
                    this.DB.CurrentMeinewoche.Freitagsstunden = Stunden;
                    break;
                case 'Samstag':
                    this.DB.CurrentMeinewoche.Samstagsstunden = Stunden;
                    break;
            }
            this.DBProjektpunkte.PrepareWochenpunkteliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'ZeitansatzStundenChanged', this.Debug.Typen.Component);
        }
    }
    ZeitansatzMinutenChanged(event) {
        try {
            let Minuten = parseInt(event.detail.value);
            switch (this.CurrentTag) {
                case 'Montag':
                    this.DB.CurrentMeinewoche.Montagsminuten = Minuten;
                    break;
                case 'Dienstag':
                    this.DB.CurrentMeinewoche.Dienstagsminuten = Minuten;
                    break;
                case 'Mittwoch':
                    this.DB.CurrentMeinewoche.Mittwochsminuten = Minuten;
                    break;
                case 'Donnerstag':
                    this.DB.CurrentMeinewoche.Donnerstagsminuten = Minuten;
                    break;
                case 'Freitag':
                    this.DB.CurrentMeinewoche.Freitagsminuten = Minuten;
                    break;
                case 'Samstag':
                    this.DB.CurrentMeinewoche.Samstagsminuten = Minuten;
                    break;
            }
            this.DBProjektpunkte.PrepareWochenpunkteliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'ZeitansatzMinutenChanged', this.Debug.Typen.Component);
        }
    }
    TimepickerOkButtonClickedHandler() {
        try {
            this.ShowZeitansatzAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'TimepickerOkButtonClickedHandler', this.Debug.Typen.Component);
        }
    }
    GetProjektpunktFarbe(Punkt) {
        try {
            let Projekt = this.DBProjekte.GetProjektByID(Punkt.ProjektID);
            if (!lodash.isUndefined(Projekt) &&
                Projekt._id === this.DBProjekte.CurrentProjekt._id && this.DBProjektpunkte.CurrentProjektpunkt._id === Punkt._id)
                return this.DBProjekte.GetProjektfarbeByName(Projekt.Projektfarbe);
            else
                return {
                    Background: "#444444",
                    Foreground: "white",
                    Name: ""
                };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'GetProjektpunktBackground', this.Debug.Typen.Component);
        }
    }
    GetProjektpunthoehe(Punkt) {
        try {
            let Hoehe;
            Hoehe = Punkt.Minuten * this.Minutenhoehe;
            return Hoehe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'GetProjektpunthoehe', this.Debug.Typen.Component);
        }
    }
    GetProjektpunktAufgabentext(Punkt) {
        try {
            let Projekt = this.DBProjekte.GetProjektByID(Punkt.ProjektID);
            let Text = Punkt.Aufgabe.replace(/<p[^>]*>/g, '').replace(/<\/p>/g, '<br />');
            return '<b>' + Projekt.Projektkurzname + ': </b>' + Text;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'GetProjektpunktAufgabentext', this.Debug.Typen.Component);
        }
    }
};
PjMeinewocheEditorComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider }
];
PjMeinewocheEditorComponent.propDecorators = {
    ContentDiv: [{ type: core_1.ViewChild, args: ['ContentDiv', { read: core_1.ElementRef, static: true },] }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjMeinewocheEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-meinewoche-editor',
        template: __webpack_require__(/*! ./pj-meinewoche-editor.component.html?ngResource */ 43741),
        styles: [__webpack_require__(/*! ./pj-meinewoche-editor.component.scss?ngResource */ 21266)]
    })
], PjMeinewocheEditorComponent);
exports.PjMeinewocheEditorComponent = PjMeinewocheEditorComponent;


/***/ }),

/***/ 75095:
/*!*************************************************************************************!*\
  !*** ./src/app/components-page/pj-meinewoche-editor/pj-meinewoche-editor.module.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjMeinewocheEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_meinewoche_editor_component_1 = __webpack_require__(/*! ./pj-meinewoche-editor.component */ 86709);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const button_value_date_small_module_1 = __webpack_require__(/*! ../../components/button-value-date-small/button-value-date-small.module */ 4603);
let PjMeinewocheEditorModule = class PjMeinewocheEditorModule {
};
PjMeinewocheEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_meinewoche_editor_component_1.PjMeinewocheEditorComponent
        ],
        exports: [
            pj_meinewoche_editor_component_1.PjMeinewocheEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            button_value_module_1.ButtonValueModule,
            forms_1.FormsModule,
            button_value_date_module_1.ButtonValueDateModule,
            page_footer_module_1.PageFooterModule,
            button_value_date_small_module_1.ButtonValueDateSmallModule,
            //  ReactiveFormsModule,
        ],
        providers: []
    })
], PjMeinewocheEditorModule);
exports.PjMeinewocheEditorModule = PjMeinewocheEditorModule;


/***/ }),

/***/ 54004:
/*!**********************************************************************************!*\
  !*** ./src/app/components-page/pj-projekt-editor/pj-projekt-editor.component.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjProjektEditorComponent = class PjProjektEditorComponent {
    constructor(Basics, Debug, Tools, DB, DBMitarbeiter, DBStandort, DBBeteiligte, Displayservice, Pool, DBGebaeude, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBStandort = DBStandort;
        this.DBBeteiligte = DBBeteiligte;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.DBGebaeude = DBGebaeude;
        this.Const = Const;
        this.StatusClickedEvent = new core_1.EventEmitter();
        this.StandortClickedEvent = new core_1.EventEmitter();
        this.ValidChangedEvent = new core_1.EventEmitter();
        this.AddBeteiligteClickedEvent = new core_1.EventEmitter();
        this.BeteiligteClickedEvend = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.StandortfilterClickedEvent = new core_1.EventEmitter();
        this.StellvertreterClickedEvent = new core_1.EventEmitter();
        this.ProjektleiterClickedEvent = new core_1.EventEmitter();
        this.EditBauteilClickedEvent = new core_1.EventEmitter();
        this.EditGeschossClickedEvent = new core_1.EventEmitter();
        this.EditRaumClickedEvent = new core_1.EventEmitter();
        this.AddBauteilClickedEvent = new core_1.EventEmitter();
        this.AddGeschossClickedEvent = new core_1.EventEmitter();
        this.AddRaumClickedEvent = new core_1.EventEmitter();
        this.Bereiche = {
            Allgemein: 'Allgemein',
            Beteiligte: 'Beteiligte',
            Gebaeudestruktur: 'Gebaeudestruktur'
        };
        try {
            this.Valid = true;
            this.DeleteEnabled = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
            this.Beteiligtenliste = [];
            this.Bereich = this.Bereiche.Allgemein;
            this.ShowRaumVerschieber = false;
            this.PositionChanged = false;
            this.BeteiligtenSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Projekteditor);
            this.BeteiligtenSubscription.unsubscribe();
            this.BeteiligtenSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.BeteiligtenSubscription = this.DBBeteiligte.BeteiligtenlisteChanged.subscribe(() => {
                this.PrepareData();
            });
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Projekteditor, this.ZIndex);
            this.DBGebaeude.Init();
            this.SetupValidation();
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Projektname: Joi.string().required().max(100),
                Projektnummer: Joi.string().required().max(20),
                Projektkurzname: Joi.string().required().max(20),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
            this.Beteiligtenliste = lodash.cloneDeep(this.DB.CurrentProjekt.Beteiligtenliste);
            this.Beteiligtenliste.sort((a, b) => {
                if (a.Name < b.Name)
                    return -1;
                if (a.Name > b.Name)
                    return 1;
                return 0;
            });
            // GebÃ¤udestruktur
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'PrepareData', this.Debug.Typen.Page);
        }
    }
    ngAfterViewInit() {
        try {
            window.setTimeout(() => {
                this.ValidateInput();
                this.DBGebaeude.Init();
            }, 30);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentProjekt);
            let Projekt;
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    TextChanged(event) {
        try {
            let Projekt;
            let Kurzname;
            this.ValidateInput();
            if (event.Titel === 'Projektkurzname') {
                if (this.DB.CurrentProjekt._id === null) { // Nur Eingabe wenn Projekt neu ist
                    Kurzname = event.Text.toUpperCase();
                    Projekt = lodash.find(this.Pool.Gesamtprojektliste, { Projektkurzname: Kurzname });
                    if (!lodash.isUndefined(Projekt)) {
                        this.Tools.ShowHinweisDialog('Der Projektkurzname ' + Kurzname + ' ist bereits vergeben.');
                        this.Valid = false;
                    }
                    else {
                        this.DB.CurrentProjekt.Projektkurzname = Kurzname;
                    }
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'TextChanged', this.Debug.Typen.Component);
        }
    }
    LoeschenCheckboxChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
        }
    }
    ResetEditor() {
        try {
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'ResetEditor', this.Debug.Typen.Component);
        }
    }
    StatusClicked() {
        try {
            this.StatusClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'StatusClicked', this.Debug.Typen.Component);
        }
    }
    LoeschenButtonClicked() {
        try {
            this.DB.DeleteProjekt().then(() => {
                this.ResetEditor();
                // this.ModalKeeper.DialogVisibleChange.emit(false);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'LoeschenButtonClicked', this.Debug.Typen.Component);
        }
    }
    ProjektleiterClicked() {
        try {
            this.ProjektleiterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'ProjektleiterClicked', this.Debug.Typen.Component);
        }
    }
    StellvertreterClicked() {
        try {
            this.StellvertreterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'StellvertreterClicked', this.Debug.Typen.Component);
        }
    }
    StandortClicked() {
        try {
            this.StandortClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'StandortClicked', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            delete this.DB.CurrentProjekt.__v;
            if (this.DB.CurrentProjekt._id === null) {
                this.DB.CurrentProjekt.Projektkey = this.DB.GenerateProjektkey(this.DB.CurrentProjekt);
                this.DB.AddProjekt().then((result) => {
                    this.OkClickedEvent.emit();
                }).catch((error) => {
                    this.Tools.ShowHinweisDialog(error.error);
                });
            }
            else {
                this.DB.UpdateProjekt().then(() => {
                    this.OkClickedEvent.emit();
                }).catch((exception) => {
                    this.Tools.ShowHinweisDialog(exception.error.message);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    StandortfilterButtonClicked() {
        try {
            this.StandortfilterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
        }
    }
    BeteiligteButtonClicked(Beteiligt) {
        try {
            this.BeteiligteClickedEvend.emit(Beteiligt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'BeteiligteButtonClicked', this.Debug.Typen.Component);
        }
    }
    AddBeteiligteButtonClicked() {
        try {
            this.AddBeteiligteClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'AddBeteiligteButtonClicked', this.Debug.Typen.Component);
        }
    }
    AllgemeinMenuButtonClicked() {
        try {
            this.Bereich = this.Bereiche.Allgemein;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'AllgemeinMenuButtonClicked', this.Debug.Typen.Page);
        }
    }
    BeteiligteMenuButtonClicked() {
        try {
            this.Bereich = this.Bereiche.Beteiligte;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'BeteiligteMenuButtonClicked', this.Debug.Typen.Page);
        }
    }
    StrukturMenuButtonClicked() {
        try {
            this.Bereich = this.Bereiche.Gebaeudestruktur;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'StrukturMenuButtonClicked', this.Debug.Typen.Page);
        }
    }
    BauteilIndexChanged(event) {
        try {
            this.DBGebaeude.CurrentBauteilindex = event.detail.value;
            this.DBGebaeude.CurrentBauteil = this.DB.CurrentProjekt.Bauteilliste[this.DBGebaeude.CurrentBauteilindex];
            if (this.DBGebaeude.CurrentBauteil.Geschossliste.length > 0) {
                this.DBGebaeude.CurrentGeschossindex = 0;
                this.DBGebaeude.CurrentGeschoss = this.DBGebaeude.CurrentBauteil.Geschossliste[this.DBGebaeude.CurrentGeschossindex];
                if (this.DBGebaeude.CurrentGeschoss.Raumliste.length === 0) {
                    this.DBGebaeude.CurrentRaumindex = null;
                    this.DBGebaeude.CurrentRaum = null;
                }
                else {
                    this.DBGebaeude.CurrentRaumindex = 0;
                    this.DBGebaeude.CurrentRaum = this.DBGebaeude.CurrentGeschoss.Raumliste[this.DBGebaeude.CurrentRaumindex];
                }
            }
            else {
                this.DBGebaeude.CurrentGeschossindex = null;
                this.DBGebaeude.CurrentGeschoss = null;
                this.DBGebaeude.CurrentRaumindex = null;
                this.DBGebaeude.CurrentRaum = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'BauteilIndexChanged', this.Debug.Typen.Component);
        }
    }
    GeschossIndexChanged(event) {
        try {
            this.DBGebaeude.CurrentGeschossindex = event.detail.value;
            this.DBGebaeude.CurrentGeschoss = this.DBGebaeude.CurrentBauteil.Geschossliste[this.DBGebaeude.CurrentGeschossindex];
            if (this.DBGebaeude.CurrentGeschoss.Raumliste.length === 0) {
                this.DBGebaeude.CurrentRaumindex = null;
                this.DBGebaeude.CurrentRaum = null;
            }
            else {
                this.DBGebaeude.CurrentRaumindex = 0;
                this.DBGebaeude.CurrentRaum = this.DBGebaeude.CurrentGeschoss.Raumliste[this.DBGebaeude.CurrentRaumindex];
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'GeschossIndexChanged', this.Debug.Typen.Component);
        }
    }
    RaumUpButtonClicked(Raumindex) {
        try {
            let PositionA;
            let PositionB;
            if (Raumindex > 0) {
                PositionA = this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex - 1].Listenposition;
                PositionB = this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex].Listenposition;
                this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex - 1].Listenposition = PositionB;
                this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex].Listenposition = PositionA;
                this.DBGebaeude.CurrentGeschoss.Raumliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                this.PositionChanged = true;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'RaumUpButtonClicked', this.Debug.Typen.Component);
        }
    }
    RaumDownButtonClicked(Raumindex) {
        try {
            let PositionA;
            let PositionB;
            if (Raumindex < this.DBGebaeude.CurrentGeschoss.Raumliste.length - 1) {
                PositionA = this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex].Listenposition;
                PositionB = this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex + 1].Listenposition;
                this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex].Listenposition = PositionB;
                this.DBGebaeude.CurrentGeschoss.Raumliste[Raumindex + 1].Listenposition = PositionA;
                this.DBGebaeude.CurrentGeschoss.Raumliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                this.PositionChanged = true;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'RaumDownButtonClicked', this.Debug.Typen.Component);
        }
    }
    RaumVerschiebenCheckChanged() {
        try {
            this.ShowRaumVerschieber = !this.ShowRaumVerschieber;
            if (this.ShowRaumVerschieber === true) {
                this.PositionChanged = false;
            }
            else {
                if (this.PositionChanged === true) {
                    // Speichern
                    this.DBGebaeude.SaveBauteil();
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'RaumVerschiebenCheckChanged', this.Debug.Typen.Component);
        }
    }
    ProjektfarbeChangedHandler(event) {
        try {
            this.DB.CurrentProjekt.Projektfarbe = event.detail.value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'ProjektfarbeChangedHandler', this.Debug.Typen.Component);
        }
    }
};
PjProjektEditorComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService },
    { type: const_1.ConstProvider }
];
PjProjektEditorComponent.propDecorators = {
    StatusClickedEvent: [{ type: core_1.Output }],
    StandortClickedEvent: [{ type: core_1.Output }],
    ValidChangedEvent: [{ type: core_1.Output }],
    AddBeteiligteClickedEvent: [{ type: core_1.Output }],
    BeteiligteClickedEvend: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    StandortfilterClickedEvent: [{ type: core_1.Output }],
    StellvertreterClickedEvent: [{ type: core_1.Output }],
    ProjektleiterClickedEvent: [{ type: core_1.Output }],
    EditBauteilClickedEvent: [{ type: core_1.Output }],
    EditGeschossClickedEvent: [{ type: core_1.Output }],
    EditRaumClickedEvent: [{ type: core_1.Output }],
    AddBauteilClickedEvent: [{ type: core_1.Output }],
    AddGeschossClickedEvent: [{ type: core_1.Output }],
    AddRaumClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjProjektEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-projekt-editor',
        template: __webpack_require__(/*! ./pj-projekt-editor.component.html?ngResource */ 78644),
        styles: [__webpack_require__(/*! ./pj-projekt-editor.component.scss?ngResource */ 44705)]
    })
], PjProjektEditorComponent);
exports.PjProjektEditorComponent = PjProjektEditorComponent;


/***/ }),

/***/ 99050:
/*!*******************************************************************************!*\
  !*** ./src/app/components-page/pj-projekt-editor/pj-projekt-editor.module.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_projekt_editor_component_1 = __webpack_require__(/*! ./pj-projekt-editor.component */ 54004);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjProjektEditorModule = class PjProjektEditorModule {
};
PjProjektEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projekt_editor_component_1.PjProjektEditorComponent
        ],
        exports: [
            pj_projekt_editor_component_1.PjProjektEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule
        ],
        providers: []
    })
], PjProjektEditorModule);
exports.PjProjektEditorModule = PjProjektEditorModule;


/***/ }),

/***/ 45761:
/*!**************************************************************************************!*\
  !*** ./src/app/components-page/pj-projekte-auswahl/pj-projekte-auswahl.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjekteAuswahlComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
let PjProjekteAuswahlComponent = class PjProjekteAuswahlComponent {
    constructor(Basics, Debug, Tools, DB, DBStandort, Const, Displayservice, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBStandort = DBStandort;
        this.Const = Const;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.StandortfilterClickedEvent = new core_1.EventEmitter();
        try {
            this.AuswahlIDliste = [];
            this.Projektebuchstabenliste = [];
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Projektealphabetauswahl = 'Alle';
            this.Projektealphabet = this.Standardalphabet;
            this.Alphapetbreite = 44;
            this.Projektefiltertext = '';
            this.Multiselect = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
            this.Projekteliste = [];
            this.StandortfilterSubsciption = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Projekteauswahl);
            if (this.StandortfilterSubsciption !== null) {
                this.StandortfilterSubsciption.unsubscribe();
                this.StandortfilterSubsciption = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            if (this.Alphabetcomponent)
                this.Alphabetcomponent.InitScreen();
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Projekteauswahl, this.ZIndex);
            this.StandortfilterSubsciption = this.DBStandort.StandortfilterChanged.subscribe(() => {
                this.PrepareDaten();
            });
            if (this.Pool.Gesamtprojektliste !== null) {
                this.Projekteliste = lodash.cloneDeep(this.Pool.Gesamtprojektliste);
            }
            else
                this.Projekteliste = [];
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'function', this.Debug.Typen.Component);
        }
    }
    PrepareDaten() {
        try {
            let Liste;
            let Merker;
            let Buchstabe;
            let Laenge;
            let TeilA;
            let TeilB;
            let TeilC;
            let Teillaenge;
            let PosA;
            let Solltext;
            let Suchtext;
            let Projekte;
            Liste = lodash.cloneDeep(this.Pool.Gesamtprojektliste);
            // Nach Namen sortieren
            this.Lastletter = '';
            Liste.sort((a, b) => {
                if (a.Projektname < b.Projektname)
                    return -1;
                if (a.Projektname > b.Projektname)
                    return 1;
                return 0;
            });
            // Standort Filter anwenden
            if (this.DBStandort.ProjekteauswahlStandortfilter !== null) {
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    if (Eintrag.StandortID === this.DBStandort.ProjekteauswahlStandortfilter._id)
                        Liste.push(Eintrag);
                }
            }
            // Projektealphabetauswahl Buchstaben festlegen
            if (Liste.length > 6) {
                this.Projektealphabet = ['Alle'];
                for (let Eintrag of Liste) {
                    Buchstabe = Eintrag.Projektname.substring(0, 1).toUpperCase();
                    if (this.Projektealphabet.indexOf(Buchstabe) === -1)
                        this.Projektealphabet.push(Buchstabe);
                }
            }
            else {
                this.Projektealphabet = this.Standardalphabet;
            }
            // Alphabetfilter anwenden
            if (this.Projektealphabetauswahl !== 'Alle') {
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    Buchstabe = Eintrag.Projektname.substring(0, 1).toUpperCase();
                    Buchstabe = Buchstabe === 'Ã' ? 'A' : Buchstabe;
                    Buchstabe = Buchstabe === 'Ã' ? 'O' : Buchstabe;
                    Buchstabe = Buchstabe === 'Ã' ? 'U' : Buchstabe;
                    if (this.Projektealphabetauswahl === Buchstabe)
                        Liste.push(Eintrag);
                }
            }
            // Suche Projektefilter anwenden
            if (this.Projektefiltertext !== '') {
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    Solltext = this.Projektefiltertext.toLowerCase();
                    Suchtext = Eintrag.Projektname.toLowerCase();
                    PosA = Suchtext.indexOf(Solltext);
                    if (PosA !== -1) {
                        Laenge = Eintrag.Projektname.length;
                        Teillaenge = Solltext.length;
                        TeilA = Eintrag.Projektname.substr(0, PosA);
                        TeilB = Eintrag.Projektname.substr(PosA, Teillaenge);
                        Teillaenge = Laenge - Teillaenge - PosA;
                        TeilC = Eintrag.Projektname.substr(Laenge - Teillaenge, Teillaenge);
                        Eintrag.Filtered = true;
                        Eintrag.Text_A = TeilA;
                        Eintrag.Text_B = TeilB;
                        Eintrag.Text_C = TeilC;
                        Liste.push(Eintrag);
                    }
                }
            }
            // Buchstabenliste festlegen
            this.Projektebuchstabenliste = [];
            for (let Eintrag of Liste) {
                this.Projektebuchstabenliste.push(this.GetProjekteAlphabetbuchstabe(Eintrag));
            }
            // Alle Auswahlen entfernen
            for (Projekte of Liste) {
                Projekte.Selected = false;
            }
            for (Projekte of this.Projekteliste) {
                Projekte.Selected = false;
            }
            // Auswahl festlegen
            for (let ProjekteID of this.AuswahlIDliste) {
                Projekte = lodash.find(Liste, { _id: ProjekteID });
                if (!lodash.isUndefined(Projekte))
                    Projekte.Selected = true;
                Projekte = lodash.find(this.Projekteliste, { _id: ProjekteID });
                if (!lodash.isUndefined(Projekte))
                    Projekte.Selected = true;
            }
            this.Anzeigeliste = lodash.cloneDeep(Liste);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'PrepareDaten', this.Debug.Typen.Component);
        }
    }
    GetProjekteAlphabetbuchstabe(value) {
        try {
            let Buchstabe = value.Projektname.substring(0, 1).toUpperCase();
            if (Buchstabe !== this.Lastletter) {
                this.Lastletter = Buchstabe;
                return Buchstabe;
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'GetProjekteAlphabetbuchstabe', this.Debug.Typen.Component);
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Projektefiltertext = '';
            this.Projektealphabetauswahl = buchstabe;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'AlphabetClicked', this.Debug.Typen.Component);
        }
    }
    CheckedChanged(result) {
        try {
            let Projekte;
            if (this.Multiselect === false) {
                for (Projekte of this.Projekteliste) {
                    Projekte.Selected = false;
                }
                for (Projekte of this.Anzeigeliste) {
                    Projekte.Selected = false;
                }
            }
            // Anpassung in der Gesamtliste
            Projekte = lodash.find(this.Projekteliste, { _id: this.Anzeigeliste[result.index]._id });
            if (!lodash.isUndefined(Projekte))
                Projekte.Selected = result.status;
            // Anpassung in der Anzeigeliste
            this.Anzeigeliste[result.index].Selected = result.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'CheckedChanged', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        let IDListe = [];
        for (let Projekte of this.Anzeigeliste) {
            if (!lodash.isUndefined(Projekte.Selected) && Projekte.Selected === true) {
                IDListe.push(Projekte._id);
            }
        }
        this.OkClickedEvent.emit(IDListe);
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    StandortfilterButtonClicked() {
        try {
            this.StandortfilterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
        }
    }
    GetStandortfiller() {
        try {
            if (this.DBStandort.ProjekteauswahlStandortfilter === null)
                return 'kein Standortfilter';
            else
                return this.DBStandort.ProjekteauswahlStandortfilter.Kuerzel + ' / ' + this.DBStandort.ProjekteauswahlStandortfilter.Standort;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekte Auswahl', 'GetStandortfiller', this.Debug.Typen.Component);
        }
    }
};
PjProjekteAuswahlComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: const_1.ConstProvider },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService }
];
PjProjekteAuswahlComponent.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['SmallAlphabet', { static: true },] }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    AuswahlIDliste: [{ type: core_1.Input }],
    Multiselect: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    StandortfilterClickedEvent: [{ type: core_1.Output }]
};
PjProjekteAuswahlComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-projekte-auswahl',
        template: __webpack_require__(/*! ./pj-projekte-auswahl.component.html?ngResource */ 93073),
        styles: [__webpack_require__(/*! ./pj-projekte-auswahl.component.scss?ngResource */ 52773)]
    })
], PjProjekteAuswahlComponent);
exports.PjProjekteAuswahlComponent = PjProjekteAuswahlComponent;


/***/ }),

/***/ 76943:
/*!***********************************************************************************!*\
  !*** ./src/app/components-page/pj-projekte-auswahl/pj-projekte-auswahl.module.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjekteAuswahlModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_projekte_auswahl_component_1 = __webpack_require__(/*! ./pj-projekte-auswahl.component */ 45761);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const alphabet_relative_module_1 = __webpack_require__(/*! ../../components/alphabet-relative/alphabet-relative.module */ 36255);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjProjekteAuswahlModule = class PjProjekteAuswahlModule {
};
PjProjekteAuswahlModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projekte_auswahl_component_1.PjProjekteAuswahlComponent
        ],
        exports: [
            pj_projekte_auswahl_component_1.PjProjekteAuswahlComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            alphabet_module_1.AlphabetModule,
            alphabet_relative_module_1.AlphabetRelativeModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule
        ],
        providers: []
    })
], PjProjekteAuswahlModule);
exports.PjProjekteAuswahlModule = PjProjekteAuswahlModule;


/***/ }),

/***/ 47121:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.module.ts ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktDateKwPickerModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const pj_projektpunkt_date_kw_picker_1 = __webpack_require__(/*! ./pj-projektpunkt-date-kw-picker */ 2271);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjProjektpunktDateKwPickerModule = class PjProjektpunktDateKwPickerModule {
};
PjProjektpunktDateKwPickerModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projektpunkt_date_kw_picker_1.PjProjektpunktDateKWPickerComponent
        ],
        exports: [
            pj_projektpunkt_date_kw_picker_1.PjProjektpunktDateKWPickerComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            forms_1.ReactiveFormsModule,
            forms_1.FormsModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjProjektpunktDateKwPickerModule);
exports.PjProjektpunktDateKwPickerModule = PjProjektpunktDateKwPickerModule;


/***/ }),

/***/ 2271:
/*!**************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.ts ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktDateKWPickerComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
__webpack_require__(/*! moment-duration-format */ 10943);
let PjProjektpunktDateKWPickerComponent = class PjProjektpunktDateKWPickerComponent {
    constructor(Debug, Basics, Pool, fb, Displayservice, DBProjektpunkte, DBProjekte, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Pool = Pool;
        this.fb = fb;
        this.Displayservice = Displayservice;
        this.DBProjektpunkte = DBProjektpunkte;
        this.DBProjekte = DBProjekte;
        this.Const = Const;
        this.StatusChanged = new core_1.EventEmitter();
        this.FertigClicked = new core_1.EventEmitter();
        this.AddFerstlegungskategorie = new core_1.EventEmitter();
        this.StichtagChanged = new core_1.EventEmitter();
        this.KalenderwocheChanged = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.Terminvarianten = {
            Stichtag: 'Stichtag',
            Kalenderwoche: 'Kalenderwoche'
        };
        try {
            this.ShowProtokollpunkte = true;
            this.Kalendertageliste = [];
            this.Terminvariante = this.Terminvarianten.Stichtag;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'Construktor', this.Debug.Typen.Component);
        }
    }
    SetKalendertageliste() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let Monat = Datum.month();
            let Jahr = Datum.year();
            let Tageanzahl = Datum.daysInMonth();
            let Tagesumme = Tageanzahl;
            let Tagindex;
            let Tage;
            let Wochenanazahl;
            // this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            let MonatStartdatum = (0, moment_1.default)().set({ date: 1, month: Monat, year: Jahr, hour: 8, minute: 0 }).locale('de');
            let MonatEndedatum = (0, moment_1.default)().set({ date: Tageanzahl, month: Monat, year: Jahr, hour: 8, minute: 0 }).locale('de');
            Tagindex = MonatStartdatum.isoWeekday();
            Tage = Tagindex - 1;
            Tagesumme = Tagesumme + Tage;
            let Startdatum = MonatStartdatum.clone().subtract(Tage, 'day');
            let Tag = Startdatum.clone();
            Tagindex = MonatEndedatum.isoWeekday();
            Tage = 7 - Tagindex;
            Tagesumme = Tagesumme + Tage;
            Wochenanazahl = Tagesumme / 7;
            // let Endedatum: Moment =  MonatEndedatum.add(Tage, 'day');
            this.Kalendertageliste = [];
            for (let wochenindex = 0; wochenindex < Wochenanazahl; wochenindex++) {
                this.Kalendertageliste[wochenindex] = [];
                for (let tagindex = 0; tagindex < 7; tagindex++) {
                    this.Kalendertageliste[wochenindex].push({
                        Tagnummer: Tag.date(),
                        Tag: Tag.format('dddd'),
                        Hauptmonat: Tag.isSameOrAfter(MonatStartdatum, 'day') && Tag.isSameOrBefore(MonatEndedatum, 'day'),
                        Kalenderwoche: Tag.isoWeek(),
                        Tagstempel: Tag.valueOf()
                    });
                    Tag.add(1, 'day');
                }
            }
            debugger;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'SetKalendertageliste', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.ProjektpunktDateKwPicker, this.ZIndex);
            if (this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche === null) {
                this.Terminvariante = this.Terminvarianten.Stichtag;
            }
            else {
                this.Terminvariante = this.Terminvarianten.Kalenderwoche;
            }
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    StichtagChangedEvent(event) {
        try {
            let Resultstring = event.detail.value;
            let Parts = Resultstring.split('T');
            let Datestring = Parts[0];
            let Werte = Datestring.split('-');
            let Tag = parseInt(Werte[2]);
            let Monat = parseInt(Werte[1]);
            let Jahr = parseInt(Werte[0]);
            let Stunde = 8; // this.Datum.hours();
            let Minute = 0; // this.Datum.minutes();
            let Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = null;
            this.StichtagChanged.emit(Datum);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'StichtagChangedEvent', this.Debug.Typen.Component);
        }
    }
    GetGeschossliste(projektpunkt) {
        try {
            return [];
            /*
      
            let Bauteil: Bauteilstruktur;
      
            if(projektpunkt !== null) {
      
              Bauteil = lodash.find(this.Pool.Bauteilstrukturliste[this.Projektservice.Projektindex], { BauteilID: projektpunkt.BauteilID});
      
              if(lodash.isUndefined(Bauteil) === false) {
      
                return Bauteil.Geschossliste;
              }
              else {
      
                return [];
              }
            }
            else {
      
              return [];
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetGeschossliste', this.Debug.Typen.Component);
        }
    }
    GetRaumIDValue(RaumID) {
        try {
            switch (RaumID) {
                case this.Const.NONE:
                    return this.Const.NONE;
                    break;
                case 'All':
                    return 'All';
                    break;
                default:
                    return 'Raum';
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetRaumIDValue', this.Debug.Typen.Component);
        }
    }
    AddFerstlegungskategorieHandler(id) {
        try {
            this.AddFerstlegungskategorie.emit(id);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'function', this.Debug.Typen.Page);
        }
    }
    GetWindowWidth() {
        try {
            if (this.DBProjektpunkte.CurrentProjektpunkt !== null) {
                if (this.DBProjektpunkte.CurrentProjektpunkt.Status !== this.Const.Projektpunktstatustypen.Festlegung.Name) {
                    return 370;
                }
                else {
                    if (this.DBProjekte.CurrentProjekt !== null) {
                        if (this.DBProjekte.CurrentProjekt.Bauteilliste.length > 0) {
                            return 960;
                        }
                        else {
                            return 740;
                        }
                    }
                }
            }
            else {
                return 0;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetWindowWidth', this.Debug.Typen.Component);
        }
    }
    GetWindowHeight() {
        try {
            let Hoehe = this.Basics.Contenthoehe;
            let Footerhoehe = 62;
            let Headerhoehe;
            let Topspace = 20;
            let Bottomspace = 20;
            return 0;
            /*
            if(lodash.isUndefined(this.Pageheader) === false && this.Pageheader !== null) {
      
              Headerhoehe = this.Pageheader.PageHeaderframeDiv.nativeElement.clientHeight;
            }
            else Headerhoehe = 8; // Small Header
      
            return Hoehe - Footerhoehe - Headerhoehe - Topspace - Bottomspace;
      
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetWindowHeight', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            debugger;
            console.log('Ok  Button CLicked');
            this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt).then(() => {
                this.OkClickedEvent.emit();
            }).catch((error) => {
                this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'function', this.Debug.Typen.Component);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'function', this.Debug.Typen.Component);
        }
    }
    CheckKalenderwoche(kw) {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let KW = Datum.isoWeek();
            return KW === kw;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'CheckKalenderwoche', this.Debug.Typen.Component);
        }
    }
    TerminStatusChangedHandler(event) {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            this.Terminvariante = event.detail.value;
            if (this.Terminvariante === this.Terminvarianten.Stichtag) {
                this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = null;
            }
            else {
                this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'TerminStatusChangedHandler', this.Debug.Typen.Component);
        }
    }
    GetEndemonatname() {
        try {
            return (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de').format('MMMM YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetEndemonatname', this.Debug.Typen.Component);
        }
    }
    KalenderwocheMonatRueckwaerts() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let Startdatum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Startzeitsptempel).locale('de');
            Datum.subtract(1, 'month');
            if (Datum.isBefore(Startdatum, 'day'))
                Datum = Startdatum.clone().add(1, 'week');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'KalenderwocheMonatRueckwaerts', this.Debug.Typen.Component);
        }
    }
    KalenderwocheMonatVorwaerts() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            Datum.add(1, 'month');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'KalenderwocheMonatVorwaerts', this.Debug.Typen.Component);
        }
    }
    KalenderwocheClicked($event, kalendertag) {
        try {
            let Datum = (0, moment_1.default)(kalendertag.Tagstempel).locale('de');
            let Startdatum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Startzeitsptempel).locale('de');
            if (Datum.isBefore(Startdatum))
                Datum = Startdatum.clone().add(1, 'week');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
            this.KalenderwocheChanged.emit(this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'KalenderwocheClicked', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.ProjektpunktDateKwPicker);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'ngOnDestroy', this.Debug.Typen.Component);
        }
    }
    GetDatum() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel);
            return Datum.format('YYYY-MM-DD');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date KW Picker', 'GetDatum', this.Debug.Typen.Component);
        }
    }
};
PjProjektpunktDateKWPickerComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: forms_1.FormBuilder },
    { type: display_service_1.DisplayService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: const_1.ConstProvider }
];
PjProjektpunktDateKWPickerComponent.propDecorators = {
    ShowProtokollpunkte: [{ type: core_1.Input }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    StatusChanged: [{ type: core_1.Output }],
    FertigClicked: [{ type: core_1.Output }],
    AddFerstlegungskategorie: [{ type: core_1.Output }],
    StichtagChanged: [{ type: core_1.Output }],
    KalenderwocheChanged: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }]
};
PjProjektpunktDateKWPickerComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'projektpunkt-date-kw-picker',
        template: __webpack_require__(/*! ./pj-projektpunkt-date-kw-picker.html?ngResource */ 75642),
        styles: [__webpack_require__(/*! ./pj-projektpunkt-date-kw-picker.scss?ngResource */ 5367)]
    })
], PjProjektpunktDateKWPickerComponent);
exports.PjProjektpunktDateKWPickerComponent = PjProjektpunktDateKWPickerComponent;


/***/ }),

/***/ 16120:
/*!********************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.component.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
const moment_2 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const kostengruppen_service_1 = __webpack_require__(/*! ../../services/kostengruppen/kostengruppen.service */ 9736);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let PjProjektpunktEditorComponent = class PjProjektpunktEditorComponent {
    constructor(Basics, Debug, Tools, DB, DBMitarbeiter, DBStandort, DBBeteiligte, DBProjekt, DBProtokoll, Displayservice, Pool, KostenService, DBGebaeude, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBStandort = DBStandort;
        this.DBBeteiligte = DBBeteiligte;
        this.DBProjekt = DBProjekt;
        this.DBProtokoll = DBProtokoll;
        this.Displayservice = Displayservice;
        this.Pool = Pool;
        this.KostenService = KostenService;
        this.DBGebaeude = DBGebaeude;
        this.Const = Const;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.StatusClicked = new core_1.EventEmitter();
        this.FachbereichClicked = new core_1.EventEmitter();
        this.TerminButtonClicked = new core_1.EventEmitter();
        this.ZustaendigInternClicked = new core_1.EventEmitter();
        this.ZustaendigExternClicked = new core_1.EventEmitter();
        this.KostengruppeClicked = new core_1.EventEmitter();
        this.GebaeudeteilClicked = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.DeleteEnabled = false;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
            this.StatusbuttonEnabled = true;
            this.StatusbuttonEnabled = this.DB.CurrentProjektpunkt.Status !== this.Const.Projektpunktstatustypen.Festlegung.Name;
            this.Editorconfig = {
                menubar: false,
                statusbar: false,
                language: 'de',
                browser_spellcheck: true,
                height: 300,
                auto_focus: true,
                content_style: 'body { color: black; margin: 0; line-height: 0.9; }, ',
                base_url: 'assets/tinymce',
                suffix: '.min',
                toolbar: [
                    { name: 'styles', items: ['forecolor', 'backcolor'] },
                    { name: 'formatting', items: ['bold', 'italic', 'underline', 'strikethrough'] },
                    { name: 'alignment', items: ['alignleft', 'aligncenter', 'alignright', 'alignjustify'] },
                    { name: 'indentation', items: ['outdent', 'indent'] }
                ],
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Projektpunteditor);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Projektpunteditor, this.ZIndex);
            this.DBGebaeude.Init();
            this.SetupValidation();
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            window.setTimeout(() => {
                this.ValidateInput();
            }, 30);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    CanDeleteCheckedChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'CanDeleteCheckedChanged', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Aufgabe: Joi.string().required(),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Beteiligten Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentProjektpunkt);
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    /*
  
    TextChanged(event: { Titel: string; Text: string; Valid: boolean }) {
  
      try {
  
        debugger;
  
        this.ValidateInput();
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'TextChanged', this.Debug.Typen.Component);
      }
    }
  
     */
    LoeschenCheckboxChanged(event) {
        try {
            this.DeleteEnabled = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'LoeschenCheckboxChanged', this.Debug.Typen.Component);
        }
    }
    ResetEditor() {
        try {
            this.DeleteEnabled = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ResetEditor', this.Debug.Typen.Component);
        }
    }
    LoeschenButtonClicked() {
        try {
            this.DB.DeleteProjektpunkt(this.DB.CurrentProjektpunkt).then(() => {
                this.ResetEditor();
                // this.ModalKeeper.DialogVisibleChange.emit(false);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'LoeschenButtonClicked', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            let Index;
            this.DB.SetStatus(this.DB.CurrentProjektpunkt, this.DB.CurrentProjektpunkt.Status);
            if (this.DB.CurrentProjektpunkt._id === null) {
                this.DB.AddProjektpunkt(this.DB.CurrentProjektpunkt).then(() => {
                    this.ResetEditor();
                    if (this.DB.CurrentProjektpunkt.ProtokollID !== null && this.DBProtokoll.CurrentProtokoll !== null) {
                        Index = lodash.indexOf(this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe, this.DB.CurrentProjektpunkt._id);
                        if (Index === -1) {
                            this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe.push(this.DB.CurrentProjektpunkt._id);
                            this.DBProtokoll.SaveProtokoll().then(() => {
                                this.OkClickedEvent.emit();
                            });
                        }
                        else {
                            this.Pool.ProtokollprojektpunktChanged.emit();
                            this.OkClickedEvent.emit();
                        }
                    }
                    else {
                        this.OkClickedEvent.emit();
                    }
                }).catch((errora) => {
                    this.Debug.ShowErrorMessage(errora, 'Projektpunkt Editor', 'OkButtonClicked / AddProjektpunkt', this.Debug.Typen.Component);
                });
            }
            else {
                this.DB.UpdateProjektpunkt(this.DB.CurrentProjektpunkt).then(() => {
                    this.ResetEditor();
                    if (this.DB.CurrentProjektpunkt.ProtokollID !== null && this.DBProtokoll.CurrentProtokoll !== null) {
                        Index = lodash.indexOf(this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe, this.DB.CurrentProjektpunkt._id);
                        if (Index === -1) {
                            this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe.push(this.DB.CurrentProjektpunkt._id);
                            this.DBProtokoll.SaveProtokoll().then(() => {
                                this.OkClickedEvent.emit();
                            });
                        }
                        else {
                            this.Pool.ProtokollprojektpunktChanged.emit();
                            this.OkClickedEvent.emit();
                        }
                    }
                    this.OkClickedEvent.emit();
                }).catch((errorb) => {
                    this.Debug.ShowErrorMessage(errorb, 'Projektpunkt Editor', 'OkButtonClicked / UpdateProjektpunkt', this.Debug.Typen.Component);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    GetStartdatum() {
        try {
            return (0, moment_1.default)(this.DB.CurrentProjektpunkt.Startzeitsptempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetStartdatum', this.Debug.Typen.Component);
        }
    }
    GetEndedatum() {
        try {
            return (0, moment_1.default)(this.DB.CurrentProjektpunkt.Endezeitstempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetEndedatum', this.Debug.Typen.Component);
        }
    }
    GetProjektname() {
        try {
            return this.DBProjekt.CurrentProjekt !== null ? this.DBProjekt.CurrentProjekt.Projektkurzname : 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ProjektButtonClicked', this.Debug.Typen.Component);
        }
    }
    AufgabeTextChangedHandler(event) {
        try {
            this.DB.CurrentProjektpunkt.Aufgabe = event.detail.value;
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'AufgabeTextChangedHandler', this.Debug.Typen.Component);
        }
    }
    ProjektstatusButtonClicked() {
        try {
            this.Auswahlliste = [];
            for (let Status of this.DB.Statustypenliste) {
                if (Status.Name) {
                    switch (Status.Name) {
                        case this.Const.Projektpunktstatustypen.Protokollpunkt.Name:
                            break;
                        case this.Const.Projektpunktstatustypen.Offen.Name:
                            this.Auswahlliste.push(this.Const.Projektpunktstatustypen.Offen.Displayname);
                            break;
                        case this.Const.Projektpunktstatustypen.Geschlossen.Name:
                            this.Auswahlliste.push(this.Const.Projektpunktstatustypen.Geschlossen.Displayname);
                            break;
                        case this.Const.Projektpunktstatustypen.Bearbeitung.Name:
                            if (!this.DB.CurrentProjektpunkt.Meilenstein)
                                this.Auswahlliste.push(this.Const.Projektpunktstatustypen.Bearbeitung.Displayname);
                            break;
                        case this.Const.Projektpunktstatustypen.Ruecklauf.Name:
                            if (!this.DB.CurrentProjektpunkt.Meilenstein)
                                this.Auswahlliste.push(this.Const.Projektpunktstatustypen.Ruecklauf.Displayname);
                            break;
                    }
                }
            }
            if (this.DBProjekt.CurrentProjekt !== null) {
                this.Auswahlindex = lodash.findIndex(this.DB.Statustypenliste, { Name: this.DBProjekt.CurrentProjekt.Status });
            }
            else
                this.Auswahlindex = -1;
            /*
            this.Auswahltitel = 'Statusauswahl';
      
            this.MyAuswahlDialog.Open(false, this.Auswahlindex);
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ProjektstatusButtonClicked', this.Debug.Typen.Component);
        }
    }
    StartdatumChanged(value) {
        try {
            let Zeitpunkt = value;
            this.DB.CurrentProjektpunkt.Startzeitsptempel = Zeitpunkt.valueOf();
            this.DB.CurrentProjektpunkt.Startzeitstring = Zeitpunkt.format('DD.MM.YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'StartdatumChanged', this.Debug.Typen.Component);
        }
    }
    EndedatumChanged(value) {
        try {
            let Zeitpunkt = value;
            this.DB.CurrentProjektpunkt.Endezeitstempel = Zeitpunkt.valueOf();
            this.DB.CurrentProjektpunkt.Endezeitstring = Zeitpunkt.format('DD.MM.YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'EndedatumChanged', this.Debug.Typen.Component);
        }
    }
    ZeitansatzeinheitChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.Zeitansatzeinheit = event.detail.value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ZeitansatzeinheitChanged', this.Debug.Typen.Component);
        }
    }
    OpenFestlegungCheckChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.OpenFestlegung = event.status;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'OpenFestlegungCheckChanged', this.Debug.Typen.Component);
        }
    }
    GetZustaendigInternListe() {
        try {
            let Value = '';
            let Mitarbeiter;
            for (let id of this.DB.CurrentProjektpunkt.ZustaendigeInternIDListe) {
                Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, { _id: id });
                if (!lodash.isUndefined(Mitarbeiter)) {
                    Value += Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name + '\n';
                }
            }
            return Value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetZustaendigInternListe', this.Debug.Typen.Component);
        }
    }
    GetZustaendigExternListe() {
        try {
            let Beteiligte;
            let Value = '';
            for (let id of this.DB.CurrentProjektpunkt.ZustaendigeExternIDListe) {
                Beteiligte = lodash.find(this.DBProjekt.CurrentProjekt.Beteiligtenliste, { BeteiligtenID: id });
                if (!lodash.isUndefined(Beteiligte)) {
                    if (Beteiligte.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person) {
                        Value += this.DBBeteiligte.GetBeteiligtenvorname(Beteiligte) + ' ' + Beteiligte.Name + '\n';
                    }
                    else {
                        Value += Beteiligte.Firma + '\n';
                    }
                }
            }
            return Value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetZustaendigExternListe', this.Debug.Typen.Component);
        }
    }
    GetAnmerkungdatum(stempel, index) {
        try {
            let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, { Email: this.DB.CurrentProjektpunkt.Anmerkungenliste[index].Verfasser.Email });
            let Kuerzel = lodash.isUndefined(Mitarbeiter) ? '' : ' &bull; ' + Mitarbeiter.Kuerzel;
            return (0, moment_2.default)(stempel).format('DD.MM.YYYY') + '<br>' + 'KW' + (0, moment_2.default)(stempel).isoWeek() + Kuerzel;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetAnmerkungdatum', this.Debug.Typen.Component);
        }
    }
    AnmerkungTextChangedHandler(event, i) {
        try {
            this.DB.CurrentProjektpunkt.Anmerkungenliste[i].Anmerkung = event.detail.value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, '', 'AnmerkungTextChangedHandler', this.Debug.Typen.Component);
        }
    }
    DeleteAnmerkungClicked(i) {
        try {
            let id = this.DB.CurrentProjektpunkt.Anmerkungenliste[i].AnmerkungID;
            this.DB.CurrentProjektpunkt.Anmerkungenliste = lodash.filter(this.DB.CurrentProjektpunkt.Anmerkungenliste, (eintrag) => {
                return eintrag.AnmerkungID !== id;
            });
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'DeleteAnmerkungClicked', this.Debug.Typen.Component);
        }
    }
    AddAnmerkungClicked() {
        try {
            let Anmekung = this.DB.GetNewAnmerkung();
            this.DB.CurrentProjektpunkt.Anmerkungenliste.push(Anmekung);
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'AddAnmerkungClicked', this.Debug.Typen.Component);
        }
    }
    GetLinienanzahl() {
        try {
            return Math.max(this.DB.CurrentProjektpunkt.ZustaendigeExternIDListe.length, this.DB.CurrentProjektpunkt.ZustaendigeInternIDListe.length);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetLinienanzahl', this.Debug.Typen.Component);
        }
    }
    MeilensteinCheckChanged(event) {
        try {
            this.DB.CurrentProjektpunkt.Meilenstein = event.status;
            if (event.status === true) {
                this.DB.CurrentProjektpunkt.Meilensteinstatus = 'ON';
            }
            else {
                this.DB.CurrentProjektpunkt.Meilensteinstatus = 'OFF';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'MeilensteinCheckChanged', this.Debug.Typen.Component);
        }
    }
    ZeitansatzChangedHandler(event) {
        try {
            let Wert;
            if (event.Text !== '') {
                Wert = parseInt(event.Text);
                if (isNaN(Wert) === false) {
                    this.DB.CurrentProjektpunkt.Zeitansatz = Wert;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'ZeitansatzChangedHandler', this.Debug.Typen.Component);
        }
    }
    DeleteButtonClicked() {
        try {
            if (this.DeleteEnabled) {
                this.DB.DeleteProjektpunkt(this.DB.CurrentProjektpunkt).then(() => {
                    this.OkClickedEvent.emit();
                }).catch((herror) => {
                    this.Debug.ShowErrorMessage(herror, 'Projektpunkt Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'DeleteButtonClicked', this.Debug.Typen.Component);
        }
    }
    GetTerminWert() {
        try {
            if (this.DB.CurrentProjektpunkt.EndeKalenderwoche === null) {
                return (0, moment_2.default)(this.DB.CurrentProjektpunkt.Endezeitstempel).format('DD.MM.YYYY');
            }
            else {
                return this.DB.CurrentProjektpunkt.EndeKalenderwoche.toString();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetTerminWert', this.Debug.Typen.Component);
        }
    }
};
PjProjektpunktEditorComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: display_service_1.DisplayService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: kostengruppen_service_1.KostengruppenService },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService },
    { type: const_1.ConstProvider }
];
PjProjektpunktEditorComponent.propDecorators = {
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    StatusClicked: [{ type: core_1.Output }],
    FachbereichClicked: [{ type: core_1.Output }],
    TerminButtonClicked: [{ type: core_1.Output }],
    ZustaendigInternClicked: [{ type: core_1.Output }],
    ZustaendigExternClicked: [{ type: core_1.Output }],
    KostengruppeClicked: [{ type: core_1.Output }],
    GebaeudeteilClicked: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjProjektpunktEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-projektpunkt-editor',
        template: __webpack_require__(/*! ./pj-projektpunkt-editor.component.html?ngResource */ 92085),
        styles: [__webpack_require__(/*! ./pj-projektpunkt-editor.component.scss?ngResource */ 60136)]
    })
], PjProjektpunktEditorComponent);
exports.PjProjektpunktEditorComponent = PjProjektpunktEditorComponent;


/***/ }),

/***/ 38266:
/*!*****************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.module.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const input_clone_keeper_module_1 = __webpack_require__(/*! ../../components/input-clone-keeper/input-clone-keeper.module */ 44030);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const pj_projektpunkt_editor_component_1 = __webpack_require__(/*! ./pj-projektpunkt-editor.component */ 16120);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const button_value_date_small_module_1 = __webpack_require__(/*! ../../components/button-value-date-small/button-value-date-small.module */ 4603);
let PjProjektpunktEditorModule = class PjProjektpunktEditorModule {
};
PjProjektpunktEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projektpunkt_editor_component_1.PjProjektpunktEditorComponent
        ],
        exports: [
            pj_projektpunkt_editor_component_1.PjProjektpunktEditorComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            input_clone_module_1.InputCloneModule,
            input_clone_keeper_module_1.InputCloneKeeperModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            checkbox_clon_module_1.CheckboxClonModule,
            page_header_module_1.PageHeaderModule,
            button_value_module_1.ButtonValueModule,
            forms_1.FormsModule,
            button_value_date_module_1.ButtonValueDateModule,
            page_footer_module_1.PageFooterModule,
            button_value_date_small_module_1.ButtonValueDateSmallModule,
            //  ReactiveFormsModule,
        ],
        providers: []
    })
], PjProjektpunktEditorModule);
exports.PjProjektpunktEditorModule = PjProjektpunktEditorModule;


/***/ }),

/***/ 10843:
/*!***************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-statusdate-picker/pj-projektpunkt-statusdate-picker.module.ts ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktStatusdatePickerModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const pj_projektpunkt_statusdate_picker_1 = __webpack_require__(/*! ./pj-projektpunkt-statusdate-picker */ 52278);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_center_module_1 = __webpack_require__(/*! ../../components/page-header-center/page-header-center.module */ 26217);
let PjProjektpunktStatusdatePickerModule = class PjProjektpunktStatusdatePickerModule {
};
PjProjektpunktStatusdatePickerModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projektpunkt_statusdate_picker_1.PjProjektpunktStatusdatePickerComponent
        ],
        exports: [
            pj_projektpunkt_statusdate_picker_1.PjProjektpunktStatusdatePickerComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            forms_1.ReactiveFormsModule,
            forms_1.FormsModule,
            page_footer_module_1.PageFooterModule,
            page_header_center_module_1.PageHeaderCenterModule,
        ],
        providers: []
    })
], PjProjektpunktStatusdatePickerModule);
exports.PjProjektpunktStatusdatePickerModule = PjProjektpunktStatusdatePickerModule;


/***/ }),

/***/ 52278:
/*!********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-statusdate-picker/pj-projektpunkt-statusdate-picker.ts ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktStatusdatePickerComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
__webpack_require__(/*! moment-duration-format */ 10943);
let PjProjektpunktStatusdatePickerComponent = class PjProjektpunktStatusdatePickerComponent {
    constructor(Debug, Basics, Pool, fb, Displayservice, DBProjektpunkte, DBProjekte, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Pool = Pool;
        this.fb = fb;
        this.Displayservice = Displayservice;
        this.DBProjektpunkte = DBProjektpunkte;
        this.DBProjekte = DBProjekte;
        this.Const = Const;
        this.StatusChanged = new core_1.EventEmitter();
        this.FertigClicked = new core_1.EventEmitter();
        this.AddFerstlegungskategorie = new core_1.EventEmitter();
        this.StichtagChanged = new core_1.EventEmitter();
        this.KalenderwocheChanged = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.Terminvarianten = {
            Stichtag: 'Stichtag',
            Kalenderwoche: 'Kalenderwoche'
        };
        try {
            this.Status = this.Const.Projektpunktstatustypen.Offen.Name;
            this.Datum = (0, moment_1.default)().locale('de');
            this.ShowProtokollpunkte = true;
            this.Kalendertageliste = [];
            this.Terminvariante = this.Terminvarianten.Stichtag;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'Construktor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.ProjektpunktStatusDatePicker);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'ngOnDestroy', this.Debug.Typen.Component);
        }
    }
    SetKalendertageliste() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let Monat = Datum.month();
            let Jahr = Datum.year();
            let Tageanzahl = Datum.daysInMonth();
            let Tagesumme = Tageanzahl;
            let Tagindex;
            let Tage;
            let Wochenanazahl;
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            let MonatStartdatum = (0, moment_1.default)().set({ date: 1, month: Monat, year: Jahr, hour: 8, minute: 0 }).locale('de');
            let MonatEndedatum = (0, moment_1.default)().set({ date: Tageanzahl, month: Monat, year: Jahr, hour: 8, minute: 0 }).locale('de');
            Tagindex = MonatStartdatum.isoWeekday();
            Tage = Tagindex - 1;
            Tagesumme = Tagesumme + Tage;
            let Startdatum = MonatStartdatum.clone().subtract(Tage, 'day');
            let Tag = Startdatum.clone();
            Tagindex = MonatEndedatum.isoWeekday();
            Tage = 7 - Tagindex;
            Tagesumme = Tagesumme + Tage;
            Wochenanazahl = Tagesumme / 7;
            // let Endedatum: Moment =  MonatEndedatum.add(Tage, 'day');
            this.Kalendertageliste = [];
            for (let wochenindex = 0; wochenindex < Wochenanazahl; wochenindex++) {
                this.Kalendertageliste[wochenindex] = [];
                for (let tagindex = 0; tagindex < 7; tagindex++) {
                    this.Kalendertageliste[wochenindex].push({
                        Tagnummer: Tag.date(),
                        Tag: Tag.format('dddd'),
                        Hauptmonat: Tag.isSameOrAfter(MonatStartdatum, 'day') && Tag.isSameOrBefore(MonatEndedatum, 'day'),
                        Kalenderwoche: Tag.isoWeek(),
                        Tagstempel: Tag.valueOf()
                    });
                    Tag.add(1, 'day');
                }
            }
            debugger;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'SetKalendertageliste', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.ProjektpunktStatusDatePicker, this.ZIndex);
            if (this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche === null) {
                this.Terminvariante = this.Terminvarianten.Stichtag;
            }
            else {
                this.Terminvariante = this.Terminvarianten.Kalenderwoche;
            }
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    StatusChangedHandler(event) {
        try {
            this.Status = event.detail.value;
            this.DBProjektpunkte.SetStatus(this.DBProjektpunkte.CurrentProjektpunkt, this.Status);
            this.StatusChanged.emit(this.Status);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'StatusChangedHandler', this.Debug.Typen.Component);
        }
    }
    StichtagChangedEvent(event) {
        try {
            let Resultstring = event.detail.value;
            let Parts = Resultstring.split('T');
            let Datestring = Parts[0];
            let Werte = Datestring.split('-');
            let Tag = parseInt(Werte[2]);
            let Monat = parseInt(Werte[1]);
            let Jahr = parseInt(Werte[0]);
            let Stunde = this.Datum.hours();
            let Minute = this.Datum.minutes();
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = this.Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = this.Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = null;
            this.StichtagChanged.emit(this.Datum);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'DateChangedEvent', this.Debug.Typen.Component);
        }
    }
    GetGeschossliste(projektpunkt) {
        try {
            return [];
            /*
      
            let Bauteil: Bauteilstruktur;
      
            if(projektpunkt !== null) {
      
              Bauteil = lodash.find(this.Pool.Bauteilstrukturliste[this.Projektservice.Projektindex], { BauteilID: projektpunkt.BauteilID});
      
              if(lodash.isUndefined(Bauteil) === false) {
      
                return Bauteil.Geschossliste;
              }
              else {
      
                return [];
              }
            }
            else {
      
              return [];
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'GetGeschossliste', this.Debug.Typen.Component);
        }
    }
    GetRaumIDValue(RaumID) {
        try {
            switch (RaumID) {
                case this.Const.NONE:
                    return this.Const.NONE;
                    break;
                case 'All':
                    return 'All';
                    break;
                default:
                    return 'Raum';
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'GetRaumIDValue', this.Debug.Typen.Component);
        }
    }
    AddFerstlegungskategorieHandler(id) {
        try {
            this.AddFerstlegungskategorie.emit(id);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'function', this.Debug.Typen.Page);
        }
    }
    GetWindowWidth() {
        try {
            if (this.DBProjektpunkte.CurrentProjektpunkt !== null) {
                if (this.DBProjektpunkte.CurrentProjektpunkt.Status !== this.Const.Projektpunktstatustypen.Festlegung.Name) {
                    return 370;
                }
                else {
                    if (this.DBProjekte.CurrentProjekt !== null) {
                        if (this.DBProjekte.CurrentProjekt.Bauteilliste.length > 0) {
                            return 960;
                        }
                        else {
                            return 740;
                        }
                    }
                }
            }
            else {
                return 0;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'GetWindowWidth', this.Debug.Typen.Component);
        }
    }
    GetWindowHeight() {
        try {
            let Hoehe = this.Basics.Contenthoehe;
            let Footerhoehe = 62;
            let Headerhoehe;
            let Topspace = 20;
            let Bottomspace = 20;
            return 0;
            /*
            if(lodash.isUndefined(this.Pageheader) === false && this.Pageheader !== null) {
      
              Headerhoehe = this.Pageheader.PageHeaderframeDiv.nativeElement.clientHeight;
            }
            else Headerhoehe = 8; // Small Header
      
            return Hoehe - Footerhoehe - Headerhoehe - Topspace - Bottomspace;
      
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'GetWindowHeight', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        // this.ResetEditor();
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            switch (this.DBProjektpunkte.CurrentProjektpunkt.Status) {
                case this.Const.Projektpunktstatustypen.Geschlossen.Name:
                    this.DBProjektpunkte.CurrentProjektpunkt.Geschlossenzeitstempel = (0, moment_1.default)().valueOf();
                    break;
                case this.Const.Projektpunktstatustypen.Festlegung.Name:
                    this.DBProjektpunkte.CurrentProjektpunkt.Geschlossenzeitstempel = null;
                    this.DBProjektpunkte.CurrentProjektpunkt.Meilenstein = false;
                    this.DBProjektpunkte.CurrentProjektpunkt.Meilensteinstatus = 'OFF';
                    break;
                default:
                    this.DBProjektpunkte.CurrentProjektpunkt.Geschlossenzeitstempel = null;
                    break;
            }
            this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt).then(() => {
                this.OkClickedEvent.emit();
            }).catch((error) => {
                this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'OkButtonClicked', this.Debug.Typen.Component);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    CheckKalenderwoche(kw) {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let KW = Datum.isoWeek();
            return KW === kw;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'CheckKalenderwoche', this.Debug.Typen.Component);
        }
    }
    TerminStatusChangedHandler(event) {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            this.Terminvariante = event.detail.value;
            if (this.Terminvariante === this.Terminvarianten.Stichtag) {
                this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = null;
            }
            else {
                this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'TerminStatusChangedHandler', this.Debug.Typen.Component);
        }
    }
    GetEndemonatname() {
        try {
            return (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de').format('MMMM YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'GetEndemonatname', this.Debug.Typen.Component);
        }
    }
    KalenderwocheMonatRueckwaerts() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            let Startdatum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Startzeitsptempel).locale('de');
            Datum.subtract(1, 'month');
            if (Datum.isBefore(Startdatum, 'day'))
                Datum = Startdatum.clone().add(1, 'week');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'KalenderwocheMonatRueckwaerts', this.Debug.Typen.Component);
        }
    }
    KalenderwocheMonatVorwaerts() {
        try {
            let Datum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel).locale('de');
            Datum.add(1, 'month');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'KalenderwocheMonatVorwaerts', this.Debug.Typen.Component);
        }
    }
    KalenderwocheClicked($event, kalendertag) {
        try {
            let Datum = (0, moment_1.default)(kalendertag.Tagstempel).locale('de');
            let Startdatum = (0, moment_1.default)(this.DBProjektpunkte.CurrentProjektpunkt.Startzeitsptempel).locale('de');
            if (Datum.isBefore(Startdatum))
                Datum = Startdatum.clone().add(1, 'week');
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstempel = Datum.valueOf();
            this.DBProjektpunkte.CurrentProjektpunkt.Endezeitstring = Datum.format('DD.MM.YYYY');
            this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche = Datum.isoWeek();
            this.SetKalendertageliste();
            this.KalenderwocheChanged.emit(this.DBProjektpunkte.CurrentProjektpunkt.EndeKalenderwoche);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste Date Status Picker', 'KalenderwocheClicked', this.Debug.Typen.Component);
        }
    }
};
PjProjektpunktStatusdatePickerComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: forms_1.FormBuilder },
    { type: display_service_1.DisplayService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: const_1.ConstProvider }
];
PjProjektpunktStatusdatePickerComponent.propDecorators = {
    Status: [{ type: core_1.Input }],
    Datum: [{ type: core_1.Input }],
    ShowProtokollpunkte: [{ type: core_1.Input }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    StatusChanged: [{ type: core_1.Output }],
    FertigClicked: [{ type: core_1.Output }],
    AddFerstlegungskategorie: [{ type: core_1.Output }],
    StichtagChanged: [{ type: core_1.Output }],
    KalenderwocheChanged: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }]
};
PjProjektpunktStatusdatePickerComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'projektpunkt-statusdate-picker',
        template: __webpack_require__(/*! ./pj-projektpunkt-statusdate-picker.html?ngResource */ 35884),
        styles: [__webpack_require__(/*! ./pj-projektpunkt-statusdate-picker.scss?ngResource */ 74813)]
    })
], PjProjektpunktStatusdatePickerComponent);
exports.PjProjektpunktStatusdatePickerComponent = PjProjektpunktStatusdatePickerComponent;


/***/ }),

/***/ 1494:
/*!**************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-editor/pj-protokoll-editor.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokollEditorComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 73253);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
const kostengruppen_service_1 = __webpack_require__(/*! ../../services/kostengruppen/kostengruppen.service */ 9736);
let PjProtokollEditorComponent = class PjProtokollEditorComponent {
    constructor(Basics, Debug, Tools, Const, DB, DBProjekte, DBProjektpunkte, DBBeteiligte, KostenService, Displayservice, LoadingAnimation, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.DB = DB;
        this.DBProjekte = DBProjekte;
        this.DBProjektpunkte = DBProjektpunkte;
        this.DBBeteiligte = DBBeteiligte;
        this.KostenService = KostenService;
        this.Displayservice = Displayservice;
        this.LoadingAnimation = LoadingAnimation;
        this.Pool = Pool;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.LeistungsphaseClickedEvent = new core_1.EventEmitter();
        this.TeamteilnehmerClicked = new core_1.EventEmitter();
        this.BeteiligteteilnehmerClicked = new core_1.EventEmitter();
        this.AddProtokollpunktClicked = new core_1.EventEmitter();
        this.ProtokollpunktClicked = new core_1.EventEmitter();
        this.ValidChanged = new core_1.EventEmitter();
        this.Bereiche = {
            Allgemein: 'Allgemein',
            Themenliste: 'Themenliste',
        };
        try {
            this.Bereich = this.Bereiche.Allgemein;
            this.Zoomfaktorenliste = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 3, 4];
            this.isHovering = false;
            this.Gesamthoehe = 0;
            this.Titelhoehe = 0;
            this.Listeheaderhoehe = 0;
            this.Listehoehe = 0;
            /*
            this.HideAuswahl              = true;
            this.Auswahlliste             = [''];
            this.Auswahlindex             = 0;
            this.Auswahltitel             = '';
      
             */
            this.Valid = false;
            // this.Modus                    = this.Modusvarianten.Projektbeteiligte;
            /*
            this.Be_Spaltenanzahl            = 5;
            this.Be_Zeilenanzahl             = 1;
            this.Te_Spaltenanzahl            = 1;
            this.Te_Spaltenanzahl            = 5;
      
             */
            this.Projektbeteiligteliste = [];
            this.Punkteliste = [];
            this.Teammitgliederliste = [];
            this.SaveTimer = null;
            this.ProtokollSaved = true;
            this.ShowDatumStatusDialog = false;
            this.CanDelete = false;
            this.CreatePDFRunning = false;
            this.PageLoaded = false;
            this.ShowUpload = false;
            this.ProtokollSubscription = null;
            this.ProjektpunktSubscription = null;
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 2000;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Protokolleditor, this.ZIndex);
            this.SetupValidation();
            this.Gesamthoehe = this.Dialoghoehe;
            this.Titelhoehe = 70;
            this.Listeheaderhoehe = 30;
            this.Listehoehe = this.Gesamthoehe - this.Titelhoehe - this.Listeheaderhoehe;
            this.CanDelete = false;
            this.CreatePDFRunning = false;
            this.PageLoaded = false;
            this.Bereich = this.DB.CurrentProtokoll._id === null ? this.Bereiche.Allgemein : this.Bereiche.Themenliste;
            this.ProtokollSubscription = this.Pool.ProtokolllisteChanged.subscribe(() => {
                this.PrepareData();
            });
            this.ProjektpunktSubscription = this.Pool.ProtokollprojektpunktChanged.subscribe(() => {
                this.PrepareData();
            });
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Protokolleditor);
            this.PageLoaded = false;
            if (this.ProtokollSubscription !== null) {
                this.ProtokollSubscription.unsubscribe();
                this.ProtokollSubscription = null;
            }
            if (this.ProjektpunktSubscription !== null) {
                this.ProjektpunktSubscription.unsubscribe();
                this.ProjektpunktSubscription = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ionViewDidEnter() {
        try {
            this.PageLoaded = true;
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ionViewDidEnter', this.Debug.Typen.Component);
        }
    }
    ionViewDidLeave() {
        try {
            this.PageLoaded = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ionViewDidLeave', this.Debug.Typen.Component);
        }
    }
    /*
  
    AufgabeClickedHandler(Projektpunkt: Projektpunktestruktur) {
  
      try {
  
  
        tinymce.init({
  
          menubar:false,
          statusbar: false,
          selector: 'div#' + Projektpunkt._id,  // change this value according to your HTML
          auto_focus : true,
          // plugins: 'autoresize',
          // icons: 'material',
          language: 'de',
          browser_spellcheck: true,
          height: 200,
          // forced_root_block: 'span',
          base_url: 'assets/tinymce', // Root for resources
          suffix: '.min',        // Suffix to use when loading resources
          toolbar: [
            { name: 'history',     items: [ 'undo', 'redo' ] },
            { name: 'styles',      items: [ 'forecolor', 'backcolor', 'fontfamily', 'fontsize' ] },
            { name: 'formatting',  items: [ 'bold', 'italic', 'underline' ] },
            { name: 'alignment',   items: [ 'alignleft', 'aligncenter', 'alignright', 'alignjustify' ] },
            { name: 'indentation', items: [ 'outdent', 'indent' ] }
          ],
        });
  
  
  
        if(this.ShowUpload === false) {
  
          for(let Punkt of this.Punkteliste) {
  
            if(Punkt._id !== Projektpunkt._id)  Punkt.LiveEditor = false;
          }
  
          Projektpunkt.LiveEditor = true;
  
          this.LiveEditorOpen = true;
        }
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'AufgabeClickedHandler', this.Debug.Typen.Component);
      }
    }
  
     */
    /*
  
    private PreparePersonen() {
  
      try {
  
        let Mitarbeiter: Mitarbeiterstruktur;
        let Projektbeteiligter: Projektbeteiligtestruktur;
  
        if(this.DB.CurrentProtokoll !== null) {
  
          this.Projektbeteiligteliste = [];
  
          for (let ProjektbeteiligteID of this.DB.CurrentProtokoll.ProjektbeteiligteIDListe) {
  
            Projektbeteiligter = <Projektbeteiligtestruktur>lodash.find(this.Pool.Projektbeteiligtenliste[this.DBProjekte.CurrentProjektindex], {ProjektbeteiligteID: ProjektbeteiligteID});
  
            if (lodash.isUndefined(Projektbeteiligter) === false) this.Projektbeteiligteliste.push(Projektbeteiligter);
          }
  
          this.Teammitgliederliste = [];
  
          for (let MitarbeiterID of this.DB.CurrentProtokoll.TeambeteiligtenIDListe) {
  
            Mitarbeiter = <Mitarbeiterstruktur>lodash.find(this.Pool.Mitarbeiterliste, {MitarbeiterID: MitarbeiterID});
  
            if (lodash.isUndefined(Mitarbeiter) === false) this.Teammitgliederliste.push(Mitarbeiter);
          }
        }
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'PreparePersonen', this.Debug.Typen.Component);
      }
    }
  
     */
    PrepareData() {
        try {
            let Projektpunkt;
            let Nummer = 1;
            if (this.DB.CurrentProtokoll !== null) {
                this.Punkteliste = [];
                for (let id of this.DB.CurrentProtokoll.ProjektpunkteIDListe) {
                    Projektpunkt = lodash.find(this.Pool.Projektpunkteliste[this.DBProjekte.CurrentProjekt.Projektkey], (punkt) => {
                        return punkt._id === id && punkt.ProtokollID === this.DB.CurrentProtokoll._id;
                    });
                    if (lodash.isUndefined(Projektpunkt) === false) {
                        this.Punkteliste.push(Projektpunkt);
                    }
                }
                this.Punkteliste.sort((a, b) => {
                    if (a.Startzeitsptempel < b.Startzeitsptempel)
                        return -1;
                    if (a.Startzeitsptempel > b.Startzeitsptempel)
                        return 1;
                    return 0;
                });
                for (let Punkt of this.Punkteliste) {
                    Punkt.Nummer = Nummer.toString();
                    Nummer++;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    DeleteImageClicked(Projektpunkt) {
        try {
            // this.DBProjektpunkte.CurrentProtokoll = Projektpunkt;
            /*
            this.StopSaveProtokollTimer();
      
            this.PoolStorage.DeleteProjektpunktImage(Projektpunkt, this.DBProjekte.CurrentProjekt).then(() => {
      
              this.StartSaveProtokollTimer();
            });
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ZoomImageClicked', this.Debug.Typen.Component);
        }
    }
    /*
    public AuswahlIndexChanged(Index: number) {
  
      try {
  
        switch (this.Auswahltitel) {
  
          case 'Bildzoom':
  
            this.StopSaveProtokollTimer();
  
            // this.DB.Projektpunkt.Filezoom = this.Zoomfaktorenliste[Index];
  
            this.StartSaveProtokollTimer();
  
            break;
  
          case 'Projektauswahl':
  
            this.StopSaveProtokollTimer();
  
            this.DBProjekte.CurrentProjekt          = this.Pool.Gesamtprojektliste[Index];
            this.DBProjekte.CurrentProjektindex            = Index;
            this.DB.CurrentProtokoll.ProjektID      = this.DBProjekte.CurrentProjekt._id;
  
            this.StartSaveProtokollTimer();
  
            break;
  
          case 'Leistungsphase':
  
            this.StopSaveProtokollTimer();
  
            this.DB.CurrentProtokoll.Leistungsphase = this.Auswahlliste[Index];
  
            this.StartSaveProtokollTimer();
  
            break;
        }
  
        this.HideAuswahl = true;
      }
      catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'AuswahlIndexChanged', this.Debug.Typen.Component);
      }
    }
  
     */
    CancelButtonClicked() {
        try {
            this.CancelClickedEvent.emit();
            /*
      
            this.StopSaveProtokollTimer();
      
            if(this.ShowUpload === true) {
      
              this.ShowUpload = false;
            }
            else {
      
              this.Tools.PopPage();
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.StopSaveProtokollTimer();
            if (this.Valid) {
                this.DB.SaveProtokoll().then(() => {
                    this.OkClickedEvent.emit();
                }).catch((error) => {
                    this.Debug.ShowFirebaseErrorMessage(error, 'Protokoll Editor', 'OkButtonClicked', this.Debug.Typen.Component);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    /*
    ProjektButtonClicked() {
  
      try {
  
        this.Auswahlliste = [];
  
        for(let Projekt of this.Pool.Gesamtprojektliste) {
  
          this.Auswahlliste.push(Projekt.Projektkurzname);
        }
  
        if(this.DBProjekte.CurrentProjekt !== null) {
  
          this.Auswahlindex = lodash.findIndex(this.Pool.Gesamtprojektliste, {id: this.DB.CurrentProtokoll._id});
  
        }
        else this.Auswahlindex = -1;
  
        this.Auswahltitel = 'Projektauswahl';
  
        // this.MyAuswahlDialog.Open(false, this.Auswahlindex);
      }
      catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ProjektButtonClicked', this.Debug.Typen.Component);
      }
    }
  
     */
    GetProjektname() {
        try {
            return this.DBProjekte.CurrentProjekt !== null ? this.DBProjekte.CurrentProjekt.Projektname : 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetProjektname', this.Debug.Typen.Component);
        }
    }
    GetProjektkurzname() {
        try {
            return this.DBProjekte.CurrentProjekt !== null ? this.DBProjekte.CurrentProjekt.Projektkurzname : 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetProjektkurzname', this.Debug.Typen.Component);
        }
    }
    DatumChanged(currentmoment) {
        try {
            let Startzeitpunkt;
            let Endezeitpunkt;
            let Dauer;
            this.StopSaveProtokollTimer();
            /*
      
      
            Startzeitpunkt = moment(this.DB.CurrentProtokoll.Startstempel);
            Endezeitpunkt  = moment(this.DB.CurrentProtokoll.Endestempel);
            Dauer          = moment.duration(Endezeitpunkt.diff(Startzeitpunkt)).asMinutes();
      
             */
            this.DB.CurrentProtokoll.Zeitstempel = currentmoment.valueOf();
            this.DB.CurrentProtokoll.Zeitstring = currentmoment.format('DD.MM.YYYY');
            this.StartSaveProtokollTimer();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'DatumChanged', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            window.setTimeout(() => {
                this.ValidateInput();
            }, 30);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    SetupValidation() {
        try {
            this.JoiShema = Joi.object({
                Titel: Joi.string().required().max(150),
                Besprechungsort: Joi.string().required().max(150),
                Protokollnummer: Joi.string().required().max(20),
            }).options({ stripUnknown: true });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Editor', 'SetupValidation', this.Debug.Typen.Component);
        }
    }
    ValidateInput() {
        try {
            let Result = this.JoiShema.validate(this.DB.CurrentProtokoll);
            if (Result.error)
                this.Valid = false;
            else
                this.Valid = true;
            this.ValidChanged.emit(this.Valid);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ValidateInput', this.Debug.Typen.Component);
        }
    }
    CheckOkButtonEnabled() {
        try {
            let ok = false;
            if (this.DB.CurrentProtokoll !== null) {
                ok = this.DB.CurrentProtokoll.Titel !== '' && this.DB.CurrentProtokoll.Besprechungsort !== '' && this.DB.CurrentProtokoll.Protokollnummer !== '';
                if (ok) {
                    if (this.DB.CurrentProtokoll._id === this.Const.NONE) {
                        this.StartSaveProtokollTimer();
                        return true;
                    }
                    else
                        return true;
                }
                else {
                    return false;
                }
            }
            else
                return false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'CheckOkButtonEnabled', this.Debug.Typen.Component);
        }
    }
    DeleteProtokollClicked() {
        try {
            if (this.CanDelete === true) {
                this.StopSaveProtokollTimer();
                this.DBProjektpunkte.DeleteProjektpunkteliste(this.Punkteliste, this.DBProjekte.CurrentProjekt).then(() => {
                    this.Punkteliste = [];
                    this.DB.DeleteProtokoll(this.DB.CurrentProtokoll).then(() => {
                        this.Tools.PopPage();
                    }).catch((error) => {
                        this.Debug.ShowFirebaseErrorMessage(error, 'Protokoll Editor', 'DeleteProtokollClicked', this.Debug.Typen.Component);
                    });
                }).catch((error) => {
                    this.Debug.ShowFirebaseErrorMessage(error, 'Protokoll Editor', 'DeleteProtokollClicked', this.Debug.Typen.Component);
                });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'DeleteProtokollClicked', this.Debug.Typen.Component);
        }
    }
    GetDatum() {
        try {
            return (0, moment_1.default)(this.DB.CurrentProtokoll.Zeitstempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetDatum', this.Debug.Typen.Component);
        }
    }
    CheckProjektbeteiligterExist(index) {
        try {
            if (lodash.isUndefined(this.Projektbeteiligteliste[index]) === true)
                return false;
            else
                return true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'CheckProjektbeteiligterExist', this.Debug.Typen.Component);
        }
    }
    CheckTeammitgliedExist(index) {
        try {
            if (lodash.isUndefined(this.Teammitgliederliste[index]) === true)
                return false;
            else
                return true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'CheckTeammitgliedExist', this.Debug.Typen.Component);
        }
    }
    CheckProtokollpunktBearbeitung() {
        try {
            let yes = false;
            for (let Eintrag of this.Punkteliste) {
                if (Eintrag.LiveEditor === true)
                    yes = true;
            }
            return yes;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'function', this.Debug.Typen.Component);
        }
    }
    StopSaveProtokollTimer() {
        try {
            if (this.PageLoaded === true) {
                this.ProtokollSaved = false;
                if (this.SaveTimer !== null) {
                    window.clearTimeout(this.SaveTimer);
                    this.SaveTimer = null;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'StopSaveProtokollTimer', this.Debug.Typen.Component);
        }
    }
    StartSaveProtokollTimer() {
        try {
            if (this.PageLoaded === true) {
                this.SaveTimer = window.setTimeout(() => {
                    this.DB.SaveProtokoll();
                }, 3000);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'StartSaveProtokollTimer', this.Debug.Typen.Component);
        }
    }
    /*
  
    ProjektpunktAufgabeTextChangedHandler(event: any, Detailindex) {
  
      try {
  
        this.Punkteliste[Detailindex].Aufgabe     = event.detail.value;
        this.Punkteliste[Detailindex].DataChanged = true;
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ProjektpunktAufgabeTextChangedHandler', this.Debug.Typen.Component);
      }
    }
  
     */
    DeleteOrCancelProjektpunkt(Projektpunkt) {
        try {
            let Nummer = 1;
            this.StopSaveProtokollTimer();
            this.Punkteliste = lodash.filter(this.Pool.Projektpunkteliste[this.DBProjekte.CurrentProjektindex], (punkt) => {
                return punkt._id !== Projektpunkt._id && punkt._id === this.DB.CurrentProtokoll._id;
            });
            this.Punkteliste.sort((a, b) => {
                if (a.Startzeitsptempel < b.Startzeitsptempel)
                    return -1;
                if (a.Startzeitsptempel > b.Startzeitsptempel)
                    return 1;
                return 0;
            });
            this.DB.CurrentProtokoll.ProjektpunkteIDListe = [];
            for (let Punkt of this.Punkteliste) {
                this.DB.CurrentProtokoll.ProjektpunkteIDListe.push(Punkt._id);
                Punkt.LiveEditor = false;
                Punkt.Nummer = Nummer.toString();
                Nummer++;
            }
            this.DBProjektpunkte.DeleteProjektpunkt(Projektpunkt).then(() => {
                this.StartSaveProtokollTimer();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'DeleteOrCancelProjektpunkt', this.Debug.Typen.Component);
        }
    }
    GetTermindatum(Projektpunkt) {
        try {
            if (Projektpunkt.EndeKalenderwoche !== null)
                return 'KW ' + Projektpunkt.EndeKalenderwoche;
            else {
                return (0, moment_1.default)(Projektpunkt.Endezeitstempel).format('DD.MM.YYYY');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetTermindatum', this.Debug.Typen.Component);
        }
    }
    ProjektpunktStatusClicked(Projektpunkt) {
        try {
            if (this.CheckProtokollpunktBearbeitung() === false) {
                this.DBProjektpunkte.CurrentProjektpunkt = Projektpunkt;
                this.ShowDatumStatusDialog = true;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ProjektpunktStatusClicked', this.Debug.Typen.Component);
        }
    }
    /*
  
    ProjektpunktProtokollPublicChanged(event: { status: boolean; index: number; event: any }) {
  
      try {
  
        this.StopSaveProtokollTimer();
  
        this.Punkteliste[event.index].ProtokollPublic = event.status;
        this.Punkteliste[event.index].DataChanged     = true;
  
        this.StartSaveProtokollTimer();
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ProjektpunktProtokollPublicChanged', this.Debug.Typen.Component);
      }
  
    }
  
     */
    /*
  
    BeteiligteButtonClicked() {
  
      try {
  
        if(this.CheckOkButtonEnabled()) {
  
          this.StopSaveProtokollTimer();
  
         // this.Personenauswahlservice.Auswahlursprung = this.Personenauswahlservice.Auswahlurspungsvarianten.Protokoll;
         // this.DB.PersonenauswahlModus = this.Constclass.Eventvarianten.BesprechungsteilnehmerExtern;
  
          this.StartSubscription();
  
          // this.Tools.PushPage(this.Constclass.Pages.PJProjektbeteiligteauswalPage);
        }
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'BeteiligteButtonClicked', this.Debug.Typen.Component);
      }
    }
  
     */
    /*
    ZustaendigExternZuweisenClicked(Projektpunkt: Projektpunktestruktur) {
  
      try {
  
  
        if(this.CheckProtokollpunktBearbeitung() === false) {
  
          this.StopSaveProtokollTimer();
  
          this.StartSubscription();
  
          this.DBProjekte.Projektpunkt        = Projektpunkt;
          this.DB.PersonenauswahlModus   = this.Constclass.Eventvarianten.ZustaendigkeitExtern;
          this.Personenauswahlservice.Auswahlursprung   = this.Personenauswahlservice.Auswahlurspungsvarianten.Protokoll;
  
          this.Tools.PushPage(this.Constclass.Pages.PJProjektbeteiligteauswalPage);
  
        }
  
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ZustaendigExternZuweisenClicked', this.Debug.Typen.Component);
      }
    }
    */
    /*
    ZustaendigInternZuweisenClicked(Projektpunkt: Projektpunktestruktur) {
  
      try {
  
  
        let Mitarbeiterliste: Mitarbeiterstruktur[] = [];
        let Mitarbeiter: Mitarbeiterstruktur;
  
        if(this.CheckProtokollpunktBearbeitung() === false) {
  
          this.StopSaveProtokollTimer();
  
          this.DBProjekte.Projektpunkt = Projektpunkt;
  
          for (let MitarbeiterID of Projektpunkt.ZustaendigeInternIDListe) {
  
            Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {MitarbeiterID: MitarbeiterID});
  
            if (lodash.isUndefined(Mitarbeiter) === false) Mitarbeiterliste.push(Mitarbeiter);
          }
  
          this.NavParams.Mitarbeiterauswahl = {
  
            Auswahlliste: Mitarbeiterliste,
            FastSelection:      false,
            NoSelectionEnabled: true,
            Title: "ZustÃ¤ndige Teammitglieder wÃ¤hlen"
          };
  
          this.DB.PersonenauswahlModus = this.Constclass.Eventvarianten.ZustaendigkeitIntern;
          this.Personenauswahlservice.Auswahlursprung = this.Personenauswahlservice.Auswahlurspungsvarianten.Protokoll;
  
          this.StartSubscription();
  
          this.Tools.PushPage(this.Constclass.Pages.FiMitarbeiterauswahlPage);
        }
  
  
  
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ZustaendigInternZuweisenClicked', this.Debug.Typen.Component);
      }
    }
  
  
     */
    GetZustaendigExternName(ZustaendigID) {
        try {
            let Beteiligter = lodash.find(this.DBProjekte.CurrentProjekt.Beteiligtenliste, { BeteiligtenID: ZustaendigID });
            if (lodash.isUndefined(Beteiligter) === false) {
                if (Beteiligter.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person) {
                    return Beteiligter.Name;
                }
                else {
                    return Beteiligter.Firma;
                }
            }
            else {
                return 'unbekannt';
            }
            return '';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetZustaendigExternName', this.Debug.Typen.Component);
        }
    }
    GetZustaendigInternName(ZustaendigID) {
        try {
            let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, { _id: ZustaendigID });
            if (lodash.isUndefined(Mitarbeiter) === false) {
                return Mitarbeiter.Kuerzel;
            }
            else {
                return 'unbekannt';
            }
            return '';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetZustaendigInternName', this.Debug.Typen.Component);
        }
    }
    LeistungsphaseButtonClicked() {
        try {
            this.StopSaveProtokollTimer();
            this.LeistungsphaseClickedEvent.emit();
            /*
      
            this.Auswahltitel = 'Leistungsphase';
            this.Auswahlliste = [];
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH1);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH2);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH3);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH4);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH5);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH6);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH7);
            this.Auswahlliste.push(this.DB.Leistungsphasenvarianten.LPH8);
      
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, (id: string) => {
      
              return id === this.DB.CurrentProtokoll.Leistungsphase;
            });
      
             */
            // this.MyAuswahlDialog.Open(false, this.Auswahlindex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'LeistungsphaseButtonClicked', this.Debug.Typen.Component);
        }
    }
    DuplicateProtokollClicked() {
        try {
            /*
      
            this.ProtokolleDatabase.DuplicateProtokoll(this.DB.CurrentProtokoll).then(() => {
      
              this.Tools.PopPage();
            });
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'DuplicateProtokollClicked', this.Debug.Typen.Component);
        }
    }
    StartzeitChanged(event) {
        try {
            this.StopSaveProtokollTimer();
            this.DB.CurrentProtokoll.Startstempel = event.valueOf();
            this.StartSaveProtokollTimer();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'StartzeitChanged', this.Debug.Typen.Component);
        }
    }
    EndezeitChanged(event) {
        try {
            this.StopSaveProtokollTimer();
            this.DB.CurrentProtokoll.Endestempel = event.valueOf();
            this.StartSaveProtokollTimer();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'EndezeitChanged', this.Debug.Typen.Component);
        }
    }
    GetStartzeit() {
        try {
            return (0, moment_1.default)(this.DB.CurrentProtokoll.Startstempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetStartzeit', this.Debug.Typen.Component);
        }
    }
    GetEndezeit() {
        try {
            return (0, moment_1.default)(this.DB.CurrentProtokoll.Endestempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetEndezeit', this.Debug.Typen.Component);
        }
    }
    ShowDetailsChanged(event) {
        try {
            this.DB.CurrentProtokoll.ShowDetails = !this.DB.CurrentProtokoll.ShowDetails;
            this.StartSaveProtokollTimer();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ShowDetailsChanged', this.Debug.Typen.Component);
        }
    }
    /*
    private StopSubscription() {
  
      try {
  
        if(this.MessageSubscription !== null) {
  
          this.MessageSubscription.unsubscribe();
          this.MessageSubscription = null;
        }
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'StopSubscription', this.Debug.Typen.Component);
      }
  
    }
     */
    /*
  
    public StartSubscription() {
  
      try {
  
        let Liste: Mitarbeiterstruktur[];
        let Index: number;
        let Punkteliste: Projektpunktestruktur[] = [];
        let Punkt: Projektpunktestruktur;
        let Projektbeteiligter: Projektbeteiligtestruktur;
        let Mitarbeiter: Mitarbeiterstruktur;
  
        /*
        this.MessageSubscription = this.Messenger.MessageReplaySubject.subscribe((message: string) => {
  
          switch (message) {
  
            case this.Personenauswahlservice.Auswahlurspungsvarianten.Protokoll:
  
              switch (this.DB.PersonenauswahlModus) {
  
                case this.Constclass.Eventvarianten.BesprechungsteilnehmerIntern:
  
                  Liste = this.DatabaseFirma.GetMitarbeiterauswahlliste();
  
                  this.Teammitgliederliste = [];
                  this.DB.CurrentProtokoll.TeambeteiligtenIDListe = [];
  
                  for(Mitarbeiter of Liste) {
  
                    this.DB.CurrentProtokoll.TeambeteiligtenIDListe.push(Mitarbeiter.MitarbeiterID);
                    this.Teammitgliederliste.push(Mitarbeiter);
                  }
  
                  this.Messenger.ClearMessage();
  
                  this.StopSaveProtokollTimer();
                  this.SaveProtokoll();
  
                  break;
  
                case this.Constclass.Eventvarianten.BesprechungsteilnehmerExtern:
  
                  this.Projektbeteiligteliste = [];
  
                  for(let ProjektbeteiligteID of this.DB.CurrentProtokoll.ProjektbeteiligteIDListe) {
  
                    Projektbeteiligter = lodash.find(this.Pool.Projektbeteiligteliste[this.Projektservice.CurrentProjektindex], {ProjektbeteiligteID: ProjektbeteiligteID});
  
                    if (lodash.isUndefined(Projektbeteiligter) === false) this.Projektbeteiligteliste.push(Projektbeteiligter);
                  }
  
                  this.Be_Zeilenanzahl = Math.ceil(this.Projektbeteiligteliste.length / this.Be_Spaltenanzahl);
  
                  this.Messenger.ClearMessage();
                  this.StopSaveProtokollTimer();
                  this.SaveProtokoll();
  
                  break;
  
                case this.Constclass.Eventvarianten.ZustaendigkeitExtern:
  
                  let text  = this.DBProjekte.Projektpunkt.ZustaendigeExternIDListe;
                  let text2 = this.Punkteliste;
  
                  Punkt = lodash.find(this.Pool.Projektpunkteliste[this.Projektservice.CurrentProjektindex], {id: this.DBProjekte.Projektpunkt._id});
  
                  console.log('Zustaendige: ' + Punkt.ZustaendigeExternIDListe.length);
  
                  this.Messenger.ClearMessage();
  
                  this.StopSaveProtokollTimer();
                  this.SaveProtokoll();
  
                  break;
  
                case this.Constclass.Eventvarianten.ZustaendigkeitIntern:
  
                  Index       = lodash.findIndex(this.Punkteliste, {id: this.DBProjekte.Projektpunkt._id});
                  Liste       = this.DatabaseFirma.GetMitarbeiterauswahlliste();
                  Punkteliste = [];
  
                  for(Index = 0; Index < this.Punkteliste.length; Index++) {
  
                    Punkt = lodash.cloneDeep(this.Punkteliste[Index]);
  
                    if(Punkt._id === this.DBProjekte.Projektpunkt._id) {
  
                      Punkt.ZustaendigeInternIDListe = [];
  
                      for(Mitarbeiter of Liste) {
  
                        Punkt.ZustaendigeInternIDListe.push(Mitarbeiter.MitarbeiterID);
                      }
  
                      console.log('Anzahl: ' + Punkt.ZustaendigeExternIDListe.length);
                    }
  
                    Punkteliste.push(Punkt);
                  }
  
                  this.Punkteliste = [];
                  this.Punkteliste = lodash.cloneDeep(Punkteliste);
  
                  this.Messenger.ClearMessage();
  
                  this.StopSaveProtokollTimer();
                  this.SaveProtokoll();
  
                  break;
              }
  
              break;
          }
  
          this.StopSubscription();
        });
  
  
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'StartSubscription', this.Debug.Typen.Component);
      }
    }
  
     */
    TeammitgliederButtonClicked() {
        try {
            /*
            let Mitarbeiterliste: Mitarbeiterstruktur[] = [];
            let Mitarbeiter: Mitarbeiterstruktur;
      
            if(this.CheckOkButtonEnabled()) {
      
              this.StopSaveProtokollTimer();
      
              for (let MitarbeiterID of this.DB.CurrentProtokoll.TeambeteiligtenIDListe) {
      
                Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, {MitarbeiterID: MitarbeiterID});
      
                if (lodash.isUndefined(Mitarbeiter) === false) Mitarbeiterliste.push(Mitarbeiter);
              }
      
              this.NavParams.Mitarbeiterauswahl = {
      
                Auswahlliste: Mitarbeiterliste,
                FastSelection: false,
                NoSelectionEnabled: true,
                Title: "Teammitglieder wÃ¤hlen"
              };
      
              this.StartSubscription();
      
              this.Personenauswahlservice.Auswahlursprung    = this.Personenauswahlservice.Auswahlurspungsvarianten.Protokoll;
              this.DB.PersonenauswahlModus    = this.Constclass.Eventvarianten.BesprechungsteilnehmerIntern;
      
              this.Tools.PushPage(this.Constclass.Pages.FiMitarbeiterauswahlPage);
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'TeammitgliederButtonClicked', this.Debug.Typen.Component);
        }
    }
    GetTeammitgliedername(Index) {
        try {
            let Mitarbeiter;
            if (lodash.isUndefined(this.Teammitgliederliste[Index]) === false) {
                Mitarbeiter = this.Teammitgliederliste[Index];
                return Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
            }
            else {
                return 'unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetTeammitgliedername', this.Debug.Typen.Component);
        }
    }
    GetTeammitgliederkuerzel(Index) {
        try {
            let Mitarbeiter;
            if (lodash.isUndefined(this.Teammitgliederliste[Index]) === false) {
                Mitarbeiter = this.Teammitgliederliste[Index];
                return Mitarbeiter.Kuerzel;
            }
            else {
                return 'unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetTeammitgliederkuerzel', this.Debug.Typen.Component);
        }
    }
    ZoomImageClicked(Projektpunkt) {
        try {
            /*
      
            this.DBProjekte.Projektpunkt = Projektpunkt;
      
            this.Auswahltitel = 'Bildzoom';
      
            this.Auswahlliste = [];
      
            for(let Zahl of this.Zoomfaktorenliste) {
      
              this.Auswahlliste.push(Zahl.toFixed(1));
            }
      
            this.Auswahlindex = this.Zoomfaktorenliste.indexOf(Projektpunkt.Filezoom);
      
            this.MyAuswahlDialog.Open(false, this.Auswahlindex);
      
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ZoomImageClicked', this.Debug.Typen.Component);
        }
    }
    TextChangedHandler() {
        try {
            this.ValidateInput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Festlegung Liste', 'TextChangedHandler', this.Debug.Typen.Component);
        }
    }
    AllgemeinMenuButtonClicked() {
        try {
            this.Bereich = this.Bereiche.Allgemein;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'AllgemeinMenuButtonClicked', this.Debug.Typen.Component);
        }
    }
    ThemenlisteMenuButtonClicked() {
        try {
            this.Bereich = this.Bereiche.Themenliste;
            this.DB.SaveProtokoll().then(() => {
            }).catch((error) => {
                this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ThemenlisteMenuButtonClicked', this.Debug.Typen.Component);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ThemenlisteMenuButtonClicked', this.Debug.Typen.Component);
        }
    }
    GetTeamteilnehmerliste() {
        try {
            let Teammitglied;
            let Value = '';
            for (let id of this.DB.CurrentProtokoll.BeteiligtInternIDListe) {
                Teammitglied = lodash.find(this.Pool.Mitarbeiterliste, { _id: id });
                if (!lodash.isUndefined(Teammitglied)) {
                    Value += Teammitglied.Vorname + ' ' + Teammitglied.Name + ' / ' + Teammitglied.Kuerzel + '\n';
                }
            }
            return Value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetTeamteilnehmerliste', this.Debug.Typen.Component);
        }
    }
    GetBeteiligteteilnehmerliste() {
        try {
            let Beteiligte;
            let Value = '';
            for (let id of this.DB.CurrentProtokoll.BeteiligExternIDListe) {
                Beteiligte = lodash.find(this.DBProjekte.CurrentProjekt.Beteiligtenliste, { BeteiligtenID: id });
                if (!lodash.isUndefined(Beteiligte)) {
                    if (Beteiligte.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person) {
                        Value += this.DBBeteiligte.GetBeteiligtenvorname(Beteiligte) + ' ' + Beteiligte.Name + '\n';
                    }
                    else {
                        Value += Beteiligte.Firma + '\n';
                    }
                }
            }
            return Value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetBeteiligteteilnehmerliste', this.Debug.Typen.Component);
        }
    }
    GetThemenlisteIconcolor() {
        try {
            if (this.Valid) {
                return this.Bereich === this.Bereiche.Themenliste ? 'burnicklgruen' : 'weis';
            }
            else {
                return 'burnicklbraun';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetThemenlisteIconcolor', this.Debug.Typen.Component);
        }
    }
    GetThemenlisteTextcolor() {
        try {
            if (this.Valid) {
                return this.Bereich === this.Bereiche.Themenliste ? this.Basics.Farben.Burnicklgruen : 'white';
            }
            else {
                return this.Basics.Farben.Burnicklbraun;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'GetThemenlisteTextcolor', this.Debug.Typen.Component);
        }
    }
};
PjProtokollEditorComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: kostengruppen_service_1.KostengruppenService },
    { type: display_service_1.DisplayService },
    { type: loadinganimation_1.LoadingAnimationService },
    { type: database_pool_service_1.DatabasePoolService }
];
PjProtokollEditorComponent.propDecorators = {
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    LeistungsphaseClickedEvent: [{ type: core_1.Output }],
    TeamteilnehmerClicked: [{ type: core_1.Output }],
    BeteiligteteilnehmerClicked: [{ type: core_1.Output }],
    AddProtokollpunktClicked: [{ type: core_1.Output }],
    ProtokollpunktClicked: [{ type: core_1.Output }],
    ValidChanged: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjProtokollEditorComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-protokoll-editor',
        template: __webpack_require__(/*! ./pj-protokoll-editor.component.html?ngResource */ 72379),
        styles: [__webpack_require__(/*! ./pj-protokoll-editor.component.scss?ngResource */ 27237)]
    })
], PjProtokollEditorComponent);
exports.PjProtokollEditorComponent = PjProtokollEditorComponent;


/***/ }),

/***/ 83722:
/*!***********************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-editor/pj-protokoll-editor.module.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokollEditorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const pj_protokoll_editor_component_1 = __webpack_require__(/*! ./pj-protokoll-editor.component */ 1494);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const button_value_time_module_1 = __webpack_require__(/*! ../../components/button-value-time/button-value-time.module */ 22353);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 97154);
let PjProtokollEditorModule = class PjProtokollEditorModule {
};
PjProtokollEditorModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        providers: [],
        declarations: [
            pj_protokoll_editor_component_1.PjProtokollEditorComponent,
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            page_header_module_1.PageHeaderModule,
            forms_1.FormsModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            page_footer_module_1.PageFooterModule,
            button_value_module_1.ButtonValueModule,
            button_value_date_module_1.ButtonValueDateModule,
            checkbox_clon_module_1.CheckboxClonModule,
            input_clone_module_1.InputCloneModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            button_value_time_module_1.ButtonValueTimeModule,
            safe_pipe_module_1.SafePipeModule,
        ],
        exports: [
            pj_protokoll_editor_component_1.PjProtokollEditorComponent
        ]
    })
], PjProtokollEditorModule);
exports.PjProtokollEditorModule = PjProtokollEditorModule;


/***/ }),

/***/ 53020:
/*!************************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.component.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokollListefilterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const input_clone_component_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.component */ 52836);
let PjProtokollListefilterComponent = class PjProtokollListefilterComponent {
    constructor(Basics, Debug, Tools, Const, DB, Displayservice) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.DB = DB;
        this.Displayservice = Displayservice;
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        try {
            this.Iconname = 'filter-outline';
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.PositionY = 100;
            this.ZIndex = 3000;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Protokolllistefilter, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Protokolllistefilter);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ionViewDidEnter() {
        try {
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'ionViewDidEnter', this.Debug.Typen.Component);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'ionViewDidLeave', this.Debug.Typen.Component);
        }
    }
    PrepareData() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'PrepareData', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        try {
            this.CancelClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        try {
            this.OkClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    GetMonatsstring(monatsabzug) {
        try {
            let Heute = (0, moment_1.default)();
            return Heute.subtract(monatsabzug, 'month').locale('de').format('MMMM YYYY');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokolle Liste Filter', 'GetMonatstring', this.Debug.Typen.Component);
        }
    }
};
PjProtokollListefilterComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: display_service_1.DisplayService }
];
PjProtokollListefilterComponent.propDecorators = {
    List: [{ type: core_1.ViewChildren, args: [input_clone_component_1.InputCloneComponent,] }],
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }]
};
PjProtokollListefilterComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-protokoll-listefilter',
        template: __webpack_require__(/*! ./pj-protokoll-listefilter.component.html?ngResource */ 17931),
        styles: [__webpack_require__(/*! ./pj-protokoll-listefilter.component.scss?ngResource */ 8671)]
    })
], PjProtokollListefilterComponent);
exports.PjProtokollListefilterComponent = PjProtokollListefilterComponent;


/***/ }),

/***/ 66754:
/*!*********************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.module.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokollListefilterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const button_value_date_module_1 = __webpack_require__(/*! ../../components/button-value-date/button-value-date.module */ 96366);
const pj_protokoll_listefilter_component_1 = __webpack_require__(/*! ./pj-protokoll-listefilter.component */ 53020);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const button_value_time_module_1 = __webpack_require__(/*! ../../components/button-value-time/button-value-time.module */ 22353);
let PjProtokollListefilterModule = class PjProtokollListefilterModule {
};
PjProtokollListefilterModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        providers: [],
        declarations: [
            pj_protokoll_listefilter_component_1.PjProtokollListefilterComponent,
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            page_header_module_1.PageHeaderModule,
            forms_1.FormsModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            page_footer_module_1.PageFooterModule,
            button_value_module_1.ButtonValueModule,
            button_value_date_module_1.ButtonValueDateModule,
            checkbox_clon_module_1.CheckboxClonModule,
            input_clone_module_1.InputCloneModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            button_value_time_module_1.ButtonValueTimeModule,
        ],
        exports: [
            pj_protokoll_listefilter_component_1.PjProtokollListefilterComponent
        ]
    })
], PjProtokollListefilterModule);
exports.PjProtokollListefilterModule = PjProtokollListefilterModule;


/***/ }),

/***/ 96108:
/*!*************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstandElementFixedComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
let AbstandElementFixedComponent = class AbstandElementFixedComponent {
    constructor() { }
    ngOnInit() {
    }
};
AbstandElementFixedComponent.ctorParameters = () => [];
AbstandElementFixedComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'abstand-element-fixed',
        template: __webpack_require__(/*! ./abstand-element-fixed.component.html?ngResource */ 96914),
        styles: [__webpack_require__(/*! ./abstand-element-fixed.component.scss?ngResource */ 64829)]
    })
], AbstandElementFixedComponent);
exports.AbstandElementFixedComponent = AbstandElementFixedComponent;


/***/ }),

/***/ 10047:
/*!**********************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.module.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstandElementFixedModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const abstand_element_fixed_component_1 = __webpack_require__(/*! ./abstand-element-fixed.component */ 96108);
let AbstandElementFixedModule = class AbstandElementFixedModule {
};
AbstandElementFixedModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            abstand_element_fixed_component_1.AbstandElementFixedComponent,
        ],
        exports: [
            abstand_element_fixed_component_1.AbstandElementFixedComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule
        ],
        providers: []
    })
], AbstandElementFixedModule);
exports.AbstandElementFixedModule = AbstandElementFixedModule;


/***/ }),

/***/ 36255:
/*!**************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlphabetRelativeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const alphabet_relative_1 = __webpack_require__(/*! ./alphabet-relative */ 45036);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let AlphabetRelativeModule = class AlphabetRelativeModule {
};
AlphabetRelativeModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            alphabet_relative_1.AlphabetRelativeComponent
        ],
        exports: [
            alphabet_relative_1.AlphabetRelativeComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule
        ],
        providers: []
    })
], AlphabetRelativeModule);
exports.AlphabetRelativeModule = AlphabetRelativeModule;


/***/ }),

/***/ 45036:
/*!*******************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlphabetRelativeComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
let AlphabetRelativeComponent = class AlphabetRelativeComponent {
    constructor(Debug, Basics, Const, Tools) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Const = Const;
        this.Tools = Tools;
        this.Auswahl = '';
        this.Buchstabenliste = [];
        this.AlphabetClicked = new core_1.EventEmitter();
        this.ZusatzbuttonClicked = new core_1.EventEmitter();
        try {
            this.Auswahl = '';
            this.Breite = 0;
            this.Buchstabenliste = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Filterliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'Constructor', this.Debug.Typen.Component);
        }
    }
    InitScreen() {
        try {
            let TopPossition = 0;
            let BottomPossition = 0;
            this.Style = {
                width: this.Breite + 'px',
                top: TopPossition + 'px',
                bottom: BottomPossition + 'px',
                background: this.Basics.Farben.Burnicklgrau,
                display: 'flex',
                'flex-direction': 'column',
                'justify-content': 'center' // horizontal
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'InitScreen', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.InitScreen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    AlphabetClickedHandler(buchstabe) {
        try {
            this.AlphabetClicked.emit(buchstabe);
            this.Auswahl = buchstabe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'AlphabetClickedHandler', this.Debug.Typen.Component);
        }
    }
    SetFilterliste() {
        try {
            this.Filterliste = this.Buchstabenliste;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'SetFilterliste', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Value;
            Value = changes.Buchstabenliste;
            if (typeof Value !== 'undefined') {
                this.SetFilterliste();
            }
            Value = changes.Breite;
            if (typeof Value !== 'undefined') {
                this.InitScreen();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
};
AlphabetRelativeComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: const_1.ConstProvider },
    { type: tools_1.ToolsProvider }
];
AlphabetRelativeComponent.propDecorators = {
    Breite: [{ type: core_1.Input }],
    Auswahl: [{ type: core_1.Input }],
    Buchstabenliste: [{ type: core_1.Input }],
    AlphabetClicked: [{ type: core_1.Output }],
    ZusatzbuttonClicked: [{ type: core_1.Output }],
    ImageKeeperDiv: [{ type: core_1.ViewChild, args: ['ImageKeeperDiv', { static: true },] }]
};
AlphabetRelativeComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'alphabet-relative',
        template: __webpack_require__(/*! ./alphabet-relative.html?ngResource */ 8448),
        styles: [__webpack_require__(/*! ./alphabet-relative.scss?ngResource */ 49674)]
    })
], AlphabetRelativeComponent);
exports.AlphabetRelativeComponent = AlphabetRelativeComponent;


/***/ }),

/***/ 21718:
/*!********************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.module.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlphabetModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const alphabet_1 = __webpack_require__(/*! ./alphabet */ 16073);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let AlphabetModule = class AlphabetModule {
};
AlphabetModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            alphabet_1.AlphabetComponent
        ],
        exports: [
            alphabet_1.AlphabetComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule
        ],
        providers: []
    })
], AlphabetModule);
exports.AlphabetModule = AlphabetModule;


/***/ }),

/***/ 16073:
/*!*************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlphabetComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
let AlphabetComponent = class AlphabetComponent {
    constructor(Debug, Basics, Const, Tools) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Const = Const;
        this.Tools = Tools;
        this.Auswahl = '';
        this.Buchstabenliste = [];
        this.PageHeader = null;
        this.PageFooter = null;
        this.AlphabetClicked = new core_1.EventEmitter();
        this.ZusatzbuttonClicked = new core_1.EventEmitter();
        try {
            this.Auswahl = '';
            this.Breite = 0;
            this.Buchstabenliste = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Filterliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'Constructor', this.Debug.Typen.Component);
        }
    }
    InitScreen() {
        try {
            let TopPossition = 0;
            let BottomPossition = 0;
            if (typeof this.PageHeader !== 'undefined' && this.PageHeader !== null)
                TopPossition = this.PageHeader.PageHeaderDiv.nativeElement.clientHeight;
            if (typeof this.PageFooter !== 'undefined' && this.PageFooter !== null)
                BottomPossition = this.PageFooter.PageFooterFrameDiv.nativeElement.clientHeight;
            this.Style = {
                width: this.Breite + 'px',
                top: TopPossition + 'px',
                bottom: BottomPossition + 'px',
                background: this.Basics.Farben.Burnicklgrau
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'InitScreen', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.InitScreen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    AlphabetClickedHandler(buchstabe) {
        try {
            this.AlphabetClicked.emit(buchstabe);
            this.Auswahl = buchstabe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'AlphabetClickedHandler', this.Debug.Typen.Component);
        }
    }
    SetFilterliste() {
        try {
            this.Filterliste = this.Buchstabenliste;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'SetFilterliste', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Value;
            Value = changes.Buchstabenliste;
            if (typeof Value !== 'undefined') {
                this.SetFilterliste();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Alphabet', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
};
AlphabetComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: const_1.ConstProvider },
    { type: tools_1.ToolsProvider }
];
AlphabetComponent.propDecorators = {
    Breite: [{ type: core_1.Input }],
    Auswahl: [{ type: core_1.Input }],
    Buchstabenliste: [{ type: core_1.Input }],
    PageHeader: [{ type: core_1.Input }],
    PageFooter: [{ type: core_1.Input }],
    AlphabetClicked: [{ type: core_1.Output }],
    ZusatzbuttonClicked: [{ type: core_1.Output }],
    ImageKeeperDiv: [{ type: core_1.ViewChild, args: ['ImageKeeperDiv', { static: true },] }]
};
AlphabetComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'alphabet',
        template: __webpack_require__(/*! ./alphabet.html?ngResource */ 41245),
        styles: [__webpack_require__(/*! ./alphabet.scss?ngResource */ 21006)]
    })
], AlphabetComponent);
exports.AlphabetComponent = AlphabetComponent;


/***/ }),

/***/ 91052:
/*!********************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.module.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuswahlDialogModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const auswahl_dialog_1 = __webpack_require__(/*! ./auswahl-dialog */ 74612);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const page_header_module_1 = __webpack_require__(/*! ../page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../page-footer/page-footer.module */ 61353);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 97154);
let AuswahlDialogModule = class AuswahlDialogModule {
};
AuswahlDialogModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            auswahl_dialog_1.AuswahlDialogComponent
        ],
        exports: [
            auswahl_dialog_1.AuswahlDialogComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            forms_1.FormsModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            safe_pipe_module_1.SafePipeModule,
        ],
        providers: []
    })
], AuswahlDialogModule);
exports.AuswahlDialogModule = AuswahlDialogModule;


/***/ }),

/***/ 74612:
/*!*************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuswahlDialogComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
let AuswahlDialogComponent = class AuswahlDialogComponent {
    constructor(Tools, Basics, Debug, DBStandort, Service, Displayservice, Const) {
        this.Tools = Tools;
        this.Basics = Basics;
        this.Debug = Debug;
        this.DBStandort = DBStandort;
        this.Service = Service;
        this.Displayservice = Displayservice;
        this.Const = Const;
        this.Titel = 'Testtitel';
        this.IndexChanged = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        this.CancelClickedEvent = new core_1.EventEmitter();
        try {
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.ZIndex = 4000;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.Displayservice.RemoveDialog(this.Displayservice.Dialognamen.Auswahldialog);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.AddDialog(this.Displayservice.Dialognamen.Auswahldialog, this.ZIndex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'OnInit', this.Debug.Typen.Component);
        }
    }
    Setup(titel, auswahlliste, auswahlindex) {
        try {
            this.Titel = titel;
            this.Auswahlliste = auswahlliste;
            this.Auswahlindex = auswahlindex;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'Setup', this.Debug.Typen.Page);
        }
    }
    Open(reset, index) {
        try {
            if (typeof reset !== 'undefined' && reset === true) {
                this.Auswahlindex = typeof index !== 'undefined' ? index : -1;
            }
            else {
            }
            this.MySelection.open();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'Open', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Value = changes.Auswahlindex;
            if (typeof Value !== 'undefined') {
                if (!Value.firstChange) {
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    IndexChangedHandler(event) {
        try {
            let Index;
            if (event.detail.value === '')
                Index = -1;
            else {
                if (isNaN(event.detail.value))
                    Index = -1;
                else
                    Index = event.detail.value;
            }
            this.Auswahlindex = Index;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'IndexChanged', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        this.OkClickedEvent.emit(this.Auswahlliste[this.Auswahlindex].Data);
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Auswahl Dialog', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
};
AuswahlDialogComponent.ctorParameters = () => [
    { type: tools_1.ToolsProvider },
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: display_service_1.DisplayService },
    { type: const_1.ConstProvider }
];
AuswahlDialogComponent.propDecorators = {
    MySelection: [{ type: core_1.ViewChild, args: ['MySelection', { static: true },] }],
    Titel: [{ type: core_1.Input }],
    Auswahlliste: [{ type: core_1.Input }],
    Auswahlindex: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }],
    ZIndex: [{ type: core_1.Input }],
    IndexChanged: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    CancelClickedEvent: [{ type: core_1.Output }]
};
AuswahlDialogComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'auswahl-dialog',
        template: __webpack_require__(/*! ./auswahl-dialog.html?ngResource */ 88402),
        styles: [__webpack_require__(/*! ./auswahl-dialog.scss?ngResource */ 52514)]
    })
], AuswahlDialogComponent);
exports.AuswahlDialogComponent = AuswahlDialogComponent;


/***/ }),

/***/ 4603:
/*!**************************************************************************************!*\
  !*** ./src/app/components/button-value-date-small/button-value-date-small.module.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueDateSmallModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const button_value_date_small_1 = __webpack_require__(/*! ./button-value-date-small */ 11122);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let ButtonValueDateSmallModule = class ButtonValueDateSmallModule {
};
ButtonValueDateSmallModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            button_value_date_small_1.ButtonValueDateSmallComponent
        ],
        exports: [
            button_value_date_small_1.ButtonValueDateSmallComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
        ],
        providers: []
    })
], ButtonValueDateSmallModule);
exports.ButtonValueDateSmallModule = ButtonValueDateSmallModule;


/***/ }),

/***/ 11122:
/*!*******************************************************************************!*\
  !*** ./src/app/components/button-value-date-small/button-value-date-small.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueDateSmallComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let ButtonValueDateSmallComponent = class ButtonValueDateSmallComponent {
    constructor(Basics, Debug, Tools, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.TimeChanged = new core_1.EventEmitter();
        this.DiabledButtonClicked = new core_1.EventEmitter();
        try {
            let Tag = 1;
            let Monat = 7;
            let Heute = (0, moment_1.default)();
            let Jahr = Heute.year();
            let Stunde = 12;
            let Minute = 0;
            this.Minimum = (0, moment_1.default)().set({ year: 2000, month: 0, date: 1 }).locale('de');
            this.Maximum = (0, moment_1.default)().set({ year: Jahr, month: 11, date: 31 }).locale('de');
            this.Minimumstring = '2000-01-01';
            this.Maximumstring = Jahr.toString() + '-12-31';
            this.Buttontext = 'Datum';
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.Enabled = true;
            this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
            this.ElementID = 'open-modal-date';
            this.Buttonsize = 'normal';
            this.ShowKW = false;
            this.InnerBackgroundcolor = this.Basics.Farben.Burnicklgrau;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'Constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Minimum = changes.Minimum;
            let Maximum = changes.Maximum;
            if (typeof Minimum !== 'undefined') {
                // debugger;
                this.Minimum = Minimum.currentValue;
                this.Minimumstring = this.Minimum.format('YYYY-MM-DD');
            }
            if (typeof Maximum !== 'undefined') {
                this.Maximum = Maximum.currentValue;
                this.Maximumstring = this.Maximum.format('YYYY-MM-DD');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    /*
  
    ButtonClickedHandler() {
  
      try {
  
        if(this.Enabled === true) {
  
          this.Tools.PlayClicksound().then(() => {
  
            // this.DatePicker.open();
          });
        }
        else {
  
          this.DiabledButtonClicked.emit();
        }
      }
      catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ButtonClickedHandler', this.Debug.Typen.Component);
      }
    }
  
     */
    FetigButtonClicked() {
        try {
            this.DatePicker.confirm(true);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'FetigButtonClicked', this.Debug.Typen.Component);
        }
    }
    DateChangedHandler(value) {
        try {
            // debugger;
            let Resultstring = value.detail.value;
            let Parts = Resultstring.split('T');
            let Datestring = Parts[0];
            let Werte = Datestring.split('-');
            let Tag = parseInt(Werte[2]);
            let Monat = parseInt(Werte[1]);
            let Jahr = parseInt(Werte[0]);
            let Stunde = this.Datum.hours();
            let Minute = this.Datum.minutes();
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.TimeChanged.emit(this.Datum);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'DateChangedHandler', this.Debug.Typen.Component);
        }
    }
};
ButtonValueDateSmallComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider }
];
ButtonValueDateSmallComponent.propDecorators = {
    Buttontext: [{ type: core_1.Input }],
    Minimum: [{ type: core_1.Input }],
    Maximum: [{ type: core_1.Input }],
    Datum: [{ type: core_1.Input }],
    Buttoncolor: [{ type: core_1.Input }],
    InnerBackgroundcolor: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    ElementID: [{ type: core_1.Input }],
    Buttonsize: [{ type: core_1.Input }],
    ShowKW: [{ type: core_1.Input }],
    TimeChanged: [{ type: core_1.Output }],
    DiabledButtonClicked: [{ type: core_1.Output }],
    DatePicker: [{ type: core_1.ViewChild, args: ['DatePicker', { static: false },] }]
};
ButtonValueDateSmallComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'button-value-date-small',
        template: __webpack_require__(/*! ./button-value-date-small.html?ngResource */ 76151),
        styles: [__webpack_require__(/*! ./button-value-date-small.scss?ngResource */ 15904)]
    })
], ButtonValueDateSmallComponent);
exports.ButtonValueDateSmallComponent = ButtonValueDateSmallComponent;


/***/ }),

/***/ 96366:
/*!**************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueDateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const button_value_date_1 = __webpack_require__(/*! ./button-value-date */ 50228);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let ButtonValueDateModule = class ButtonValueDateModule {
};
ButtonValueDateModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            button_value_date_1.ButtonValueDateComponent
        ],
        exports: [
            button_value_date_1.ButtonValueDateComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
        ],
        providers: []
    })
], ButtonValueDateModule);
exports.ButtonValueDateModule = ButtonValueDateModule;


/***/ }),

/***/ 50228:
/*!*******************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueDateComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let ButtonValueDateComponent = class ButtonValueDateComponent {
    constructor(Basics, Debug, Tools, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.TimeChanged = new core_1.EventEmitter();
        this.DiabledButtonClicked = new core_1.EventEmitter();
        try {
            let Tag = 1;
            let Monat = 7;
            let Heute = (0, moment_1.default)();
            let Jahr = Heute.year();
            let Stunde = 12;
            let Minute = 0;
            this.Minimum = (0, moment_1.default)().set({ year: 2000, month: 0, date: 1 }).locale('de');
            this.Maximum = (0, moment_1.default)().set({ year: Jahr, month: 11, date: 31 }).locale('de');
            this.Minimumstring = '2000-01-01';
            this.Maximumstring = Jahr.toString() + '-12-31';
            this.Buttontext = 'Datum';
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.Enabled = true;
            this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
            this.ElementID = 'open-modal-date';
            this.Buttonsize = 'normal';
            this.ShowKW = false;
            this.InnerBackgroundcolor = this.Basics.Farben.Burnicklgrau;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'Constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Minimum = changes.Minimum;
            let Maximum = changes.Maximum;
            if (typeof Minimum !== 'undefined') {
                this.Minimum = Minimum.currentValue;
                this.Minimumstring = this.Minimum.format('YYYY-MM-DD');
            }
            if (typeof Maximum !== 'undefined') {
                this.Maximum = Maximum.currentValue;
                this.Maximumstring = this.Maximum.format('YYYY-MM-DD');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    /*
  
    ButtonClickedHandler() {
  
      try {
  
        if(this.Enabled === true) {
  
          this.Tools.PlayClicksound().then(() => {
  
            // this.DatePicker.open();
          });
        }
        else {
  
          this.DiabledButtonClicked.emit();
        }
      }
      catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ButtonClickedHandler', this.Debug.Typen.Component);
      }
    }
  
     */
    FetigButtonClicked() {
        try {
            this.DatePicker.confirm(true);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'FetigButtonClicked', this.Debug.Typen.Component);
        }
    }
    DateChangedHandler(value) {
        try {
            let Resultstring = value.detail.value;
            let Parts = Resultstring.split('T');
            let Datestring = Parts[0];
            let Werte = Datestring.split('-');
            let Tag = parseInt(Werte[2]);
            let Monat = parseInt(Werte[1]);
            let Jahr = parseInt(Werte[0]);
            let Stunde = this.Datum.hours();
            let Minute = this.Datum.minutes();
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.TimeChanged.emit(this.Datum);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'DateChangedHandler', this.Debug.Typen.Component);
        }
    }
};
ButtonValueDateComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider }
];
ButtonValueDateComponent.propDecorators = {
    Buttontext: [{ type: core_1.Input }],
    Minimum: [{ type: core_1.Input }],
    Maximum: [{ type: core_1.Input }],
    Datum: [{ type: core_1.Input }],
    Buttoncolor: [{ type: core_1.Input }],
    InnerBackgroundcolor: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    ElementID: [{ type: core_1.Input }],
    Buttonsize: [{ type: core_1.Input }],
    ShowKW: [{ type: core_1.Input }],
    TimeChanged: [{ type: core_1.Output }],
    DiabledButtonClicked: [{ type: core_1.Output }],
    DatePicker: [{ type: core_1.ViewChild, args: ['DatePicker', { static: false },] }]
};
ButtonValueDateComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'button-value-date',
        template: __webpack_require__(/*! ./button-value-date.html?ngResource */ 58213),
        styles: [__webpack_require__(/*! ./button-value-date.scss?ngResource */ 29522)]
    })
], ButtonValueDateComponent);
exports.ButtonValueDateComponent = ButtonValueDateComponent;


/***/ }),

/***/ 22353:
/*!**************************************************************************!*\
  !*** ./src/app/components/button-value-time/button-value-time.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueTimeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const button_value_time_1 = __webpack_require__(/*! ./button-value-time */ 31864);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const ngx_material_timepicker_1 = __webpack_require__(/*! ngx-material-timepicker */ 40761);
let ButtonValueTimeModule = class ButtonValueTimeModule {
};
ButtonValueTimeModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            button_value_time_1.ButtonValueTimeComponent
        ],
        exports: [
            button_value_time_1.ButtonValueTimeComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            ngx_material_timepicker_1.NgxMaterialTimepickerModule,
        ],
        providers: []
    })
], ButtonValueTimeModule);
exports.ButtonValueTimeModule = ButtonValueTimeModule;


/***/ }),

/***/ 31864:
/*!*******************************************************************!*\
  !*** ./src/app/components/button-value-time/button-value-time.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueTimeComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let ButtonValueTimeComponent = class ButtonValueTimeComponent {
    constructor(Basics, Debug, Tools, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.TimeChanged = new core_1.EventEmitter();
        this.TimeChangedError = new core_1.EventEmitter();
        try {
            let Tag = (0, moment_1.default)().date();
            let Monat = (0, moment_1.default)().month();
            let Jahr = (0, moment_1.default)().year();
            let Stunde = 8;
            let Minute = 0;
            this.Enabled = true;
            this.Buttontext = 'Datum';
            this.Uhrzeit = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.Buttontext = 'Startzeit';
            this.MinUhrzeit = null;
            this.MaxUhrzeit = null;
            this.CheckLeft = true;
            this.ElementID = 'open-modal-time';
            this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
            this.InnerBackgroundcolor = this.Basics.Farben.Burnicklgrau;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'Constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    ButtonClickedHandler() {
        try {
            if (this.Enabled === true)
                this.Timepicker.open();
            // debugger;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'ButtonClickedHandler', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let UhrzeitValue = changes.Uhrzeit;
            if (typeof UhrzeitValue !== 'undefined' && UhrzeitValue !== null && UhrzeitValue.currentValue !== null) {
                this.UhrzeitMerker = UhrzeitValue.currentValue;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    TimeChangedHandler(Timestring) {
        try {
            let Message = '';
            let HasError = false;
            let Werte = Timestring.split(':');
            let Tag = this.Uhrzeit.date();
            let Monat = this.Uhrzeit.month() + 1;
            let Jahr = this.Uhrzeit.year();
            let Stunde = parseInt(Werte[0]);
            let Minute = parseInt(Werte[1]);
            let Uhrzeit = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            if (typeof this.MinUhrzeit !== 'undefined' && this.MinUhrzeit !== null && this.MinUhrzeit.isValid() &&
                typeof this.MaxUhrzeit !== 'undefined' && this.MaxUhrzeit !== null && this.MaxUhrzeit.isValid() && Uhrzeit.isValid()) {
                // Zeit auf Grenzen von lins prÃ¼fen
                if (Uhrzeit.isBefore(this.MinUhrzeit)) {
                    HasError = true;
                    Message = 'Der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' liegt vor dem minimalen Zeitpunkt um ' + this.MinUhrzeit.format('H:mm');
                }
                if (this.Uhrzeit.isAfter(this.MaxUhrzeit)) {
                    HasError = true;
                    Message = 'Der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' liegt nach dem maximalen Zeitpunkt um ' + this.MaxUhrzeit.format('H:mm');
                }
                if (this.CheckLeft) {
                    if (Uhrzeit.isSame(this.MaxUhrzeit)) {
                        HasError = true;
                        Message = 'der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' und der spÃ¤testens mÃ¶gliche Zeitpunkt dÃ¼rfen nicht identisch sein.';
                    }
                }
                else {
                    if (Uhrzeit.isSame(this.MinUhrzeit)) {
                        HasError = true;
                        Message = 'der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' und der frÃ¼hestends mÃ¶gliche Zeitpunkt dÃ¼rfen nicht identisch sein.';
                    }
                }
            }
            if (!HasError) {
                this.TimeChanged.emit(Uhrzeit);
            }
            /*
            else {
      
              this.Uhrzeit          = this.UhrzeitMerker.clone();
              this.TimePicker.value = this.GetUhrzeit();
      
              this.TimeChangedError.emit(Message);
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
        }
    }
    /*
  
    TimeChangedHandler(value: CustomEvent) {
  
      try {
  
        let Timestring: string = value.detail.value;
        let Werte: string[]    = Timestring.split(':');
        let Tag: number        = this.Uhrzeit.date();
        let Monat: number      = this.Uhrzeit.month() + 1;
        let Jahr: number       = this.Uhrzeit.year();
        let Stunde: number     = parseInt(Werte[0]);
        let Minute: number     = parseInt(Werte[1]);
        let Message: string    = '';
        let HasError: boolean  = false;
  
        let Uhrzeit = MyMoment( Tag + '.' + Monat + '.' +  Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
  
        if(typeof this.MinUhrzeit !== 'undefined' && this.MinUhrzeit !== null && this.MinUhrzeit.isValid() &&
           typeof this.MaxUhrzeit !== 'undefined' && this.MaxUhrzeit !== null && this.MaxUhrzeit.isValid() && Uhrzeit.isValid()) {
  
          // Zeit auf Grenzen von lins prÃ¼fen
  
          if(Uhrzeit.isBefore(this.MinUhrzeit)) {
  
            HasError = true;
            Message  = 'Der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' liegt vor dem minimalen Zeitpunkt um ' + this.MinUhrzeit.format('H:mm');
          }
  
          if(this.Uhrzeit.isAfter(this.MaxUhrzeit)) {
  
            HasError = true;
            Message  = 'Der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' liegt nach dem maximalen Zeitpunkt um ' + this.MaxUhrzeit.format('H:mm');
          }
  
          if(this.CheckLeft) {
  
            if(Uhrzeit.isSame(this.MaxUhrzeit)) {
  
              HasError = true;
              Message  = 'der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' und der spÃ¤testens mÃ¶gliche Zeitpunkt dÃ¼rfen nicht identisch sein.';
            }
          }
          else {
  
            if(Uhrzeit.isSame(this.MinUhrzeit)) {
  
              HasError = true;
              Message  = 'der gewÃ¤hlte Zeitpunkt ' + Uhrzeit.format('H:mm') + ' und der frÃ¼hestends mÃ¶gliche Zeitpunkt dÃ¼rfen nicht identisch sein.';
            }
          }
        }
  
        if(!HasError) {
  
          this.TimeChanged.emit(Uhrzeit);
        }
        else {
  
          this.Uhrzeit          = this.UhrzeitMerker.clone();
          this.TimePicker.value = this.GetUhrzeit();
  
          this.TimeChangedError.emit(Message);
        }
      }
      catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Button Value Time', 'TimeChangedHandler', this.Debug.Typen.Component);
      }
    }
  
     */
    GetMinUhrzeit() {
        try {
            if (typeof this.MinUhrzeit !== 'undefined' && this.MinUhrzeit !== null && this.MinUhrzeit.isValid()) {
                return this.MinUhrzeit.format('HH:mm');
            }
            else {
                return '00:00';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'GetMinUhrzeit', this.Debug.Typen.Component);
        }
    }
    GetMaxUhrzeit() {
        try {
            if (typeof this.MaxUhrzeit !== 'undefined' && this.MaxUhrzeit !== null && this.MaxUhrzeit.isValid()) {
                return this.MaxUhrzeit.format('HH:mm');
            }
            else {
                return '23:59';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'GetMaxUhrzeit', this.Debug.Typen.Component);
        }
    }
    GetUhrzeit() {
        try {
            if (typeof this.Uhrzeit !== 'undefined' && this.Uhrzeit !== null && this.Uhrzeit.isValid()) {
                return this.Uhrzeit.clone().format('HH:mm');
            }
            else {
                return '12:00';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Time', 'GetUhrzeit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        try {
            // debugger;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
        }
    }
};
ButtonValueTimeComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider }
];
ButtonValueTimeComponent.propDecorators = {
    Buttontext: [{ type: core_1.Input }],
    Uhrzeit: [{ type: core_1.Input }],
    MinUhrzeit: [{ type: core_1.Input }],
    MaxUhrzeit: [{ type: core_1.Input }],
    CheckLeft: [{ type: core_1.Input }],
    ElementID: [{ type: core_1.Input }],
    Buttoncolor: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    InnerBackgroundcolor: [{ type: core_1.Input }],
    TimeChanged: [{ type: core_1.Output }],
    TimeChangedError: [{ type: core_1.Output }],
    Timepicker: [{ type: core_1.ViewChild, args: ['Timepicker', { static: false },] }]
};
ButtonValueTimeComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'button-value-time',
        template: __webpack_require__(/*! ./button-value-time.html?ngResource */ 13907),
        styles: [__webpack_require__(/*! ./button-value-time.scss?ngResource */ 74932)]
    })
], ButtonValueTimeComponent);
exports.ButtonValueTimeComponent = ButtonValueTimeComponent;


/***/ }),

/***/ 45596:
/*!****************************************************************!*\
  !*** ./src/app/components/button-value/button-value.module.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const button_value_1 = __webpack_require__(/*! ./button-value */ 28678);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let ButtonValueModule = class ButtonValueModule {
};
ButtonValueModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            button_value_1.ButtonValueComponent
        ],
        exports: [
            button_value_1.ButtonValueComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
        ],
        providers: []
    })
], ButtonValueModule);
exports.ButtonValueModule = ButtonValueModule;


/***/ }),

/***/ 28678:
/*!*********************************************************!*\
  !*** ./src/app/components/button-value/button-value.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonValueComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
let ButtonValueComponent = class ButtonValueComponent {
    constructor(Basics, Debug, Tools, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.ProContent = false;
        this.ProMessage = '';
        this.Buttonvaluecolor = '';
        this.ButtonClicked = new core_1.EventEmitter();
        this.DisabledButtonClicked = new core_1.EventEmitter();
        try {
            this.Width = 0;
            this.ShowMargin = true;
            this.BigHeight = false;
            this.SmallWidth = false;
            this.Buttontext = '';
            this.Wert_A = '';
            this.Wert_B = '';
            this.Iconcolor = 'red';
            this.Iconfile = '';
            this.Buttoncolor = this.Basics.Farben.Burnicklbraun;
            this.Enabled = true;
            this.Buttonvaluecolor = this.Basics.Farben.Burnicklgrau;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value', 'Constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Buttonvalue = changes.Buttoncolor;
            let Wert_A_Value = changes.Wert_A;
            // let Werte: Tastaturdatenstruktur;
            let Index;
            let Text;
            if (typeof Buttonvalue !== 'undefined') {
                if (!Buttonvalue.firstChange) {
                    this.RGB = this.Tools.HexToRGB(Buttonvalue.currentValue);
                }
            }
            if (typeof Wert_A_Value !== 'undefined' && typeof Wert_A_Value.currentValue !== 'undefined') {
                if (typeof Wert_A_Value.currentValue === 'string') {
                    // Stringausgabe
                    this.Wert_A_String = Wert_A_Value.currentValue;
                }
                else {
                    /*
          
                    // Tastaturstruktur aks String ausgeben
          
                    Werte = Wert_A_Value.currentValue;
                    Index = Exponentenzahlen.indexOf(Werte.Exponent);
          
                    if(Werte.Currency) {
          
                      if(typeof Werte.Wert !== 'undefined') {
          
                        Text = Werte.Wert.toFixed(2).replace('.', ',') + ' ' + Exponentensymbole[Index] + Werte.Einheit;
          
                      } else {
          
                        Text = Werte.Wertname + ' n.d.';
                      }
          
                    } else {
          
                      if(typeof Werte.Wert !== 'undefined') {
          
                        Text = Werte.Wert.toString().replace('.', ',') + ' ' + Exponentensymbole[Index] + Werte.Einheit;
          
                      } else {
          
                          Text = Werte.Wertname + ' n.d.';
                      }
                    }
          
                    if(Werte.Hochzahl === 2) Text += '&sup2';
                    if(Werte.Hochzahl === 3) Text += '&sup3';
          
                    this.Wert_A_String = Text;
          
          
                     */
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    ButtonClickedHandler() {
        try {
            if (this.Enabled === true) {
                this.ButtonClicked.emit();
            }
            else {
                this.DisabledButtonClicked.emit();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value', 'ButtonClickedHandler', this.Debug.Typen.Component);
        }
    }
};
ButtonValueComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider }
];
ButtonValueComponent.propDecorators = {
    Buttoncolor: [{ type: core_1.Input }],
    Buttontext: [{ type: core_1.Input }],
    Wert_A: [{ type: core_1.Input }],
    Wert_B: [{ type: core_1.Input }],
    Iconfile: [{ type: core_1.Input }],
    Iconcolor: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    SmallWidth: [{ type: core_1.Input }],
    BigHeight: [{ type: core_1.Input }],
    ShowMargin: [{ type: core_1.Input }],
    Width: [{ type: core_1.Input }],
    ProContent: [{ type: core_1.Input }],
    ProMessage: [{ type: core_1.Input }],
    Buttonvaluecolor: [{ type: core_1.Input }],
    ButtonClicked: [{ type: core_1.Output }],
    DisabledButtonClicked: [{ type: core_1.Output }]
};
ButtonValueComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'button-value',
        template: __webpack_require__(/*! ./button-value.html?ngResource */ 31661),
        styles: [__webpack_require__(/*! ./button-value.scss?ngResource */ 25203)]
    })
], ButtonValueComponent);
exports.ButtonValueComponent = ButtonValueComponent;


/***/ }),

/***/ 94183:
/*!*********************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckboxClonComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
let CheckboxClonComponent = class CheckboxClonComponent {
    constructor(Basics, Tools, Debug) {
        this.Basics = Basics;
        this.Tools = Tools;
        this.Debug = Debug;
        this.Checked = false;
        this.Enabled = true;
        this.CanUnselect = true;
        this.Index = -1;
        this.Background = 'white';
        this.CheckChanged = new core_1.EventEmitter();
        try {
            this.ImgSource = this.Basics.Svgpath + 'hacken.svg';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
        }
    }
    ngOnInit() { }
    DivClickedHnadler(event) {
        try {
            event.stopPropagation();
            event.preventDefault();
            if (this.Enabled && this.CanUnselect === true || this.Enabled && this.CanUnselect === false && this.Checked === false) {
                this.CheckChanged.emit({ status: !this.Checked, index: this.Index, event: event });
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
        }
    }
};
CheckboxClonComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: tools_1.ToolsProvider },
    { type: debug_1.DebugProvider }
];
CheckboxClonComponent.propDecorators = {
    Checked: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    CanUnselect: [{ type: core_1.Input }],
    Index: [{ type: core_1.Input }],
    Background: [{ type: core_1.Input }],
    CheckChanged: [{ type: core_1.Output }]
};
CheckboxClonComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'checkbox-clon',
        template: __webpack_require__(/*! ./checkbox-clon.component.html?ngResource */ 92442),
        styles: [__webpack_require__(/*! ./checkbox-clon.component.scss?ngResource */ 26778)]
    })
], CheckboxClonComponent);
exports.CheckboxClonComponent = CheckboxClonComponent;


/***/ }),

/***/ 60034:
/*!******************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.module.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckboxClonModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const checkbox_clon_component_1 = __webpack_require__(/*! ./checkbox-clon.component */ 94183);
let CheckboxClonModule = class CheckboxClonModule {
};
CheckboxClonModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            checkbox_clon_component_1.CheckboxClonComponent
        ],
        exports: [
            checkbox_clon_component_1.CheckboxClonComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
        ],
        providers: []
    })
], CheckboxClonModule);
exports.CheckboxClonModule = CheckboxClonModule;


/***/ }),

/***/ 48938:
/*!*******************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputCloneKeeperComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const input_clone_component_1 = __webpack_require__(/*! ../input-clone/input-clone.component */ 52836);
let InputCloneKeeperComponent = class InputCloneKeeperComponent {
    constructor(Debug, Basics, elRef, Tools) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.elRef = elRef;
        this.Tools = Tools;
        this.ValidChange = new core_1.EventEmitter();
        try {
            this.Valid = true;
            this.Inputliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone Keeper', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone Keeper', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    CheckValid() {
        try {
            let Valid = true;
            for (let Inputelement of this.Inputliste) {
                if (!Inputelement.Valid) {
                    Valid = false;
                    break;
                }
            }
            return Valid;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone Keeper', 'CheckValid', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
            this.Inputliste = this.elRef.nativeElement.getElementsByTagName('input-clone');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone Keeper', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
};
InputCloneKeeperComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: core_1.ElementRef },
    { type: tools_1.ToolsProvider }
];
InputCloneKeeperComponent.propDecorators = {
    Valid: [{ type: core_1.Input }],
    ValidChange: [{ type: core_1.Output }],
    List: [{ type: core_1.ViewChildren, args: [input_clone_component_1.InputCloneComponent,] }]
};
InputCloneKeeperComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'input-clone-keeper',
        template: __webpack_require__(/*! ./input-clone-keeper.component.html?ngResource */ 17121),
        styles: [__webpack_require__(/*! ./input-clone-keeper.component.scss?ngResource */ 47957)]
    })
], InputCloneKeeperComponent);
exports.InputCloneKeeperComponent = InputCloneKeeperComponent;


/***/ }),

/***/ 44030:
/*!****************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.module.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputCloneKeeperModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_keeper_component_1 = __webpack_require__(/*! ./input-clone-keeper.component */ 48938);
let InputCloneKeeperModule = class InputCloneKeeperModule {
};
InputCloneKeeperModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            input_clone_keeper_component_1.InputCloneKeeperComponent
        ],
        exports: [
            input_clone_keeper_component_1.InputCloneKeeperComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule
        ],
        providers: []
    })
], InputCloneKeeperModule);
exports.InputCloneKeeperModule = InputCloneKeeperModule;


/***/ }),

/***/ 52836:
/*!*****************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputCloneComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const Joi = tslib_1.__importStar(__webpack_require__(/*! joi */ 25614));
let InputCloneComponent = class InputCloneComponent {
    constructor(Debug, Basics, Tools) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Tools = Tools;
        this.ValueChange = new core_1.EventEmitter();
        this.TextChanged = new core_1.EventEmitter();
        try {
            let Border = 1;
            this.DisabledColor = this.Basics.Farben.Blau;
            this.OkBorder = Border + 'px solid ' + this.Basics.Farben.Burnicklgrau;
            this.RequiredBorder = Border + 'px solid ' + this.Basics.Farben.Orange;
            this.DisabledBorder = Border + 'px solid ' + this.DisabledColor;
            this.Valid = true;
            this.MinLength = 0;
            this.MaxLength = 0;
            this.Enabled = true;
            this.Titel = '';
            this.Value = '';
            this.MinHeight = 0;
            this.Inputtype = 'text';
            this.Lines = 1;
            this.Debouncetime = 0;
            this.Clickable = false;
            this.Required = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'constructor', this.Debug.Typen.Component);
        }
    }
    ngAfterViewInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'AfterViewInit', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            let schema;
            if (this.Inputtype === 'text' || this.Inputtype === 'email') {
                schema = Joi.string();
                if (this.Inputtype === 'email')
                    schema = schema.email({ tlds: { allow: false } });
            }
            else {
                schema = Joi.number();
            }
            if (this.MinLength > 0)
                schema = schema.min(this.MinLength);
            if (this.MaxLength > 0)
                schema = schema.max(this.MaxLength);
            if (this.Required === true)
                schema = schema.required();
            else
                schema = schema.allow('');
            this.JoiShema = Joi.object({
                Text: schema
            }).options({ stripUnknown: true });
            this.Valid = this.CheckValid(this.Value);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    CheckValid(text) {
        try {
            let Result;
            let valid;
            if (this.JoiShema) {
                Result = this.JoiShema.validate({ Text: text });
                if (Result.error) {
                    valid = false;
                    console.log(Result.error.message);
                }
                else
                    valid = true;
            }
            else {
                valid = false;
            }
            return valid;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'CheckValid', this.Debug.Typen.Component);
        }
    }
    TextChangedHandler(event) {
        try {
            let Text = this.Inputtype === 'text' || this.Inputtype === 'email' ? event.detail.value : parseInt(event.detail.value);
            if (this.Enabled === true) {
                if (typeof Text === 'undefined') {
                    Text = '';
                }
                this.Valid = this.CheckValid(Text);
                this.ValueChange.emit(Text); // Ãbertragen fÃ¼r Banana in a Box
                this.TextChanged.emit({
                    Titel: this.Titel,
                    Text: Text,
                    Valid: this.Valid
                });
            }
            event.stopPropagation();
            event.preventDefault();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'TextChangedHandler', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Border = 1;
            let Value = changes.Value;
            if (typeof Value !== 'undefined') {
                this.Valid = this.CheckValid(Value.currentValue);
                this.TextChanged.emit({
                    Titel: this.Titel,
                    Text: Value.currentValue,
                    Valid: this.Valid
                });
            }
            this.DisabledBorder = Border + 'px solid ' + this.DisabledColor;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Input Clone', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
};
InputCloneComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: tools_1.ToolsProvider }
];
InputCloneComponent.propDecorators = {
    Titel: [{ type: core_1.Input }],
    Value: [{ type: core_1.Input }],
    Debouncetime: [{ type: core_1.Input }],
    ValueChange: [{ type: core_1.Output }],
    MinLength: [{ type: core_1.Input }],
    MaxLength: [{ type: core_1.Input }],
    Enabled: [{ type: core_1.Input }],
    Clickable: [{ type: core_1.Input }],
    MinHeight: [{ type: core_1.Input }],
    Inputtype: [{ type: core_1.Input }],
    Required: [{ type: core_1.Input }],
    Lines: [{ type: core_1.Input }],
    DisabledColor: [{ type: core_1.Input }],
    TextChanged: [{ type: core_1.Output }]
};
InputCloneComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'input-clone',
        template: __webpack_require__(/*! ./input-clone.component.html?ngResource */ 54327),
        styles: [__webpack_require__(/*! ./input-clone.component.scss?ngResource */ 91449)]
    })
], InputCloneComponent);
exports.InputCloneComponent = InputCloneComponent;


/***/ }),

/***/ 65480:
/*!**************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputCloneModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const input_clone_component_1 = __webpack_require__(/*! ./input-clone.component */ 52836);
let InputCloneModule = class InputCloneModule {
};
InputCloneModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            input_clone_component_1.InputCloneComponent
        ],
        exports: [
            input_clone_component_1.InputCloneComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule
        ],
        providers: []
    })
], InputCloneModule);
exports.InputCloneModule = InputCloneModule;


/***/ }),

/***/ 61353:
/*!**************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageFooterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_footer_1 = __webpack_require__(/*! ./page-footer */ 80912);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let PageFooterModule = class PageFooterModule {
};
PageFooterModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            page_footer_1.PageFooterComponent
        ],
        exports: [
            page_footer_1.PageFooterComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule
        ],
        providers: []
    })
], PageFooterModule);
exports.PageFooterModule = PageFooterModule;


/***/ }),

/***/ 80912:
/*!*******************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageFooterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
let PageFooterComponent = class PageFooterComponent {
    constructor(Const, Debug, Basics) {
        this.Const = Const;
        this.Debug = Debug;
        this.Basics = Basics;
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Footer', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    InitMaximalhoehe() {
        try {
            this.MaxFooterhoehe = this.PageFooterFrameDiv.nativeElement.clientHeight;
            return this.MaxFooterhoehe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Footer', 'InitMaximalhoehe', this.Debug.Typen.Component);
        }
    }
};
PageFooterComponent.ctorParameters = () => [
    { type: const_1.ConstProvider },
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider }
];
PageFooterComponent.propDecorators = {
    PageFooterFrameDiv: [{ type: core_1.ViewChild, args: ['PageFooterFrameDiv', { read: core_1.ElementRef, static: true },] }]
};
PageFooterComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'page-footer',
        template: __webpack_require__(/*! ./page-footer.html?ngResource */ 70098),
        styles: [__webpack_require__(/*! ./page-footer.scss?ngResource */ 31518)]
    })
], PageFooterComponent);
exports.PageFooterComponent = PageFooterComponent;


/***/ }),

/***/ 26217:
/*!****************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.module.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageHeaderCenterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_header_center_1 = __webpack_require__(/*! ./page-header-center */ 89631);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let PageHeaderCenterModule = class PageHeaderCenterModule {
};
PageHeaderCenterModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            page_header_center_1.PageHeaderCenterComponent,
        ],
        exports: [
            page_header_center_1.PageHeaderCenterComponent,
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
        ],
        providers: []
    })
], PageHeaderCenterModule);
exports.PageHeaderCenterModule = PageHeaderCenterModule;


/***/ }),

/***/ 89631:
/*!*********************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageHeaderCenterComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
let PageHeaderCenterComponent = class PageHeaderCenterComponent {
    constructor(Debug, Basics, Const, menuCtrl) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Const = Const;
        this.menuCtrl = menuCtrl;
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Header', 'Construktor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Header', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
};
PageHeaderCenterComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: const_1.ConstProvider },
    { type: angular_1.MenuController }
];
PageHeaderCenterComponent.propDecorators = {
    PageHeaderDiv: [{ type: core_1.ViewChild, args: ['PageHeaderDiv', { read: core_1.ElementRef, static: true },] }]
};
PageHeaderCenterComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'page-header-center',
        template: __webpack_require__(/*! ./page-header-center.html?ngResource */ 77853),
        styles: [__webpack_require__(/*! ./page-header-center.scss?ngResource */ 54783)]
    })
], PageHeaderCenterComponent);
exports.PageHeaderCenterComponent = PageHeaderCenterComponent;


/***/ }),

/***/ 64650:
/*!***************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 21778)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PageHeaderMenuComponent = void 0;

const tslib_1 = __webpack_require__(/*! tslib */ 34929);

const core_1 = __webpack_require__(/*! @angular/core */ 22560);

const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);

const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);

const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 47314);

const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);

const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);

const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));

const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);

const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);

const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);

const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);

const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 67334); // import {LocalstorageService} from "../../services/localstorage/localstorage";


const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);

const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));

const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);

let PageHeaderMenuComponent = class PageHeaderMenuComponent {
  constructor(Debug, Basics, Const, DBMitarbeiter, DBMitarbeitersettings, Auswahlservice, DBStandort, DBProjekte, DBProjektpunkte, AuthService, Pool, Menuservice) {
    this.Debug = Debug;
    this.Basics = Basics;
    this.Const = Const;
    this.DBMitarbeiter = DBMitarbeiter;
    this.DBMitarbeitersettings = DBMitarbeitersettings;
    this.Auswahlservice = Auswahlservice;
    this.DBStandort = DBStandort;
    this.DBProjekte = DBProjekte;
    this.DBProjektpunkte = DBProjektpunkte;
    this.AuthService = AuthService;
    this.Pool = Pool;
    this.Menuservice = Menuservice;
    this.SucheChanged = new core_1.EventEmitter();
    this.StandortfilterClicked = new core_1.EventEmitter();
    this.ZeitspanneFilterClicked = new core_1.EventEmitter();
    this.LeistungsphaseFilterClicked = new core_1.EventEmitter();
    this.FavoritenClicked = new core_1.EventEmitter();
    this.FilterChanged = new core_1.EventEmitter();

    try {
      this.ShowSuchleiste = false;
      this.SuchleisteClearSubscription = null;
      this.SuchleisteInputSubscription = null;
      this.FavoritenSubscription = null;
      this.Inputtimer = null;
      this.ShowSandortfilter = false;
      this.Projektauswahlbreite = 200;
      this.Filterorigin = this.Const.NONE;
      this.Wochentaghoehe = 30;
      this.Tagbreite = 0;
      this.HomeMouseOver = false;
      this.ShowStandorttitle = false;
      this.ShowMitarbeitertitle = false;
      this.ShowProjektetitle = false;
      this.ShowFavoritentitle = false;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'consturctor', this.Debug.Typen.Component);
    }
  }

  ngOnDestroy() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'OnDestroy', this.Debug.Typen.Component);
    }
  }

  ngOnInit() {
    try {
      this.Projektauswahlbreite = this.Basics.Contentbreite - 630;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'OnInit', this.Debug.Typen.Component);
    }
  }

  ngAfterViewInit() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        let Text;
        _this.Tagbreite = (_this.Basics.Contentbreite - 4) / 5;

        if (_this.Suchleiste) {
          // Muss hier stehen / funktioniert in OnInit() nicht
          _this.SuchleisteInputSubscription = _this.Suchleiste.ionInput.subscribe(data => {
            Text = data.target.value;

            if (_this.Inputtimer !== null) {
              window.clearTimeout(_this.Inputtimer);
              _this.Inputtimer = null;
            }

            if (Text.length >= 3 || Text.length === 0) {
              _this.Inputtimer = window.setTimeout(() => {
                _this.SucheChanged.emit(Text);
              }, 600);
            }
          });
          _this.SuchleisteClearSubscription = _this.Suchleiste.ionClear.subscribe(() => {
            _this.SucheChanged.emit('');
          });
        } else _this.Suchleiste = null;
        /*
        this.FavoritenSubscription = this.DBProjekte.CurrentFavoritenChanged.subscribe(() => {
                 debugger;
                 this.DBProjekte.InitProjektfavoritenliste();
                 this.Pool.ReadProjektdaten(this.DBProjekte.Projektliste).then(() => {
         
            this.DBProjekte.InitMenuProjektauswahl();
            this.Pool.LoadingAllDataFinished.emit();
          });
        });
                */

      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ngAfterViewInit', _this.Debug.Typen.Component);
      }
    })();
  }

  MainMenueButtonClicked(mainmenubereich) {
    try {
      this.Menuservice.MainMenuebereich = mainmenubereich;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'MainMenueButtonClicked', this.Debug.Typen.Component);
    }
  }

  FirmaMenueButtonClicked(firmamenubereich) {
    try {
      this.Menuservice.FirmaMenuebereich = firmamenubereich;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'FirmaMenueButtonClicked', this.Debug.Typen.Component);
    }
  }

  ProjekteMenueButtonClicked(projektmenubereich) {
    try {
      this.Menuservice.ProjekteMenuebereich = projektmenubereich;
      this.Menuservice.SetCurrentPage();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ProjekteMenueButtonClicked', this.Debug.Typen.Component);
    }
  }

  GetMainMenueColor(mainmenubereich) {
    try {
      return mainmenubereich === this.Menuservice.MainMenuebereich ? 'burnicklgruen' : 'weis';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetMainMenueColor', this.Debug.Typen.Component);
    }
  }

  GetProjekteMenueIconcolor(projektemenubereich) {
    try {
      return projektemenubereich === this.Menuservice.ProjekteMenuebereich ? 'burnicklgruen' : 'weis';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetProjekteMenueIconcolor', this.Debug.Typen.Component);
    }
  }

  GetProjekteMenueFontcolor(projektemenubereich) {
    try {
      return projektemenubereich === this.Menuservice.ProjekteMenuebereich ? '#c7d304' : 'white';
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetProjekteMenueIconcolor', this.Debug.Typen.Component);
    }
  }

  StandortButtonClicked() {
    try {
      this.StandortfilterClicked.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'StandortButtonClicked', this.Debug.Typen.Component);
    }
  }

  FavoritenClickedHandler(settings) {
    try {
      this.DBProjekte.CurrentFavoritprojektindex = settings.Index;

      switch (settings.Index) {
        case 1000:
          // = Favoriten
          break;

        case 1500:
          // = Meilensteine
          break;

        case 2000:
          // = Mein Tag
          // this.Menuservice.SetCurrentPage();
          break;

        case 3000:
          // = Meine Woche
          // this.Menuservice.SetCurrentPage();
          break;

        default:
          this.DBProjekte.CurrentProjekt = lodash.find(this.Pool.Gesamtprojektliste, projekt => {
            return projekt.Projektkey === settings.Projektkey;
          });
          this.Pool.Mitarbeitersettings.ProjektID = this.DBProjekte.CurrentProjekt._id;
          break;
      }

      if (settings.Index !== 1000) this.Pool.Mitarbeitersettings.Favoritprojektindex = settings.Index;
      this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings);
      this.FavoritenClicked.emit(this.DBProjekte.CurrentFavoritprojektindex);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'FavoritenClickedHandler', this.Debug.Typen.Component);
    }
  }

  GetProjektbuttoncolor(settings) {
    try {
      switch (settings.Index) {
        default:
          return settings.Index === this.DBProjekte.CurrentFavoritprojektindex ? this.Basics.Farben.Burnicklgruen : 'white';
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetProjektbuttoncolor', this.Debug.Typen.Component);
    }
  }

  ZeitspaneClickedHandler(origin) {
    try {
      this.ZeitspanneFilterClicked.emit(origin);
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'ZeitspaneClickedHandler', this.Debug.Typen.Component);
    }
  }

  LeistungsphaseClickedHandler() {
    try {
      this.LeistungsphaseFilterClicked.emit();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'LeistungsphaseClickedHandler', this.Debug.Typen.Component);
    }
  }

  StatusFilterChanged(event, Statusname) {
    try {
      let status = event.status;

      switch (Statusname) {
        case this.Const.Projektpunktstatustypen.Offen.Name:
          this.Pool.Mitarbeitersettings.AufgabenShowOffen = status;
          break;

        case this.Const.Projektpunktstatustypen.Geschlossen.Name:
          this.Pool.Mitarbeitersettings.AufgabenShowGeschlossen = status;
          break;

        case this.Const.Projektpunktstatustypen.Bearbeitung.Name:
          this.Pool.Mitarbeitersettings.AufgabenShowBearbeitung = status;
          break;

        case this.Const.Projektpunktstatustypen.Ruecklauf.Name:
          this.Pool.Mitarbeitersettings.AufgabenShowRuecklauf = status;
          break;

        case 'Meilenstein':
          this.Pool.Mitarbeitersettings.AufgabenShowMeilensteinOnly = status;
          break;
      }

      this.DBMitarbeitersettings.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings).then(() => {
        this.FilterChanged.emit(Statusname);
      }).catch(error => {
        this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'StatusFilterChanged', this.Debug.Typen.Component);
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'StatusFilterChanged', this.Debug.Typen.Component);
    }
  }

  StatusFilterShowFaelligOnlyChanged(event) {
    try {// this.DBProjekte.CurrentProjekt.Aufgabenlistefilter.FilterShowFaelligOnly = event.status;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'StatusFilterShowFaelligOnlyChanged', this.Debug.Typen.Component);
    }
  }

  GetZeitfilterButtontext() {
    try {
      switch (this.Filterorigin) {
        case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Zeitfilter:
          switch (this.Pool.Mitarbeitersettings.AufgabenTerminfiltervariante) {
            case this.Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt:
              return 'Seit dem Zeitpunkt';
              break;

            case this.Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt:
              return 'Bis zum Zeitpunkt';
              break;

            case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
              return 'Zeitspanne';
              break;

            case this.Const.Faelligkeitsterminfiltervarianten.Nur_diesen_Monat:
              return 'Monat';
              break;

            case this.Const.Faelligkeitsterminfiltervarianten.Nur_diese_Woche:
              return 'Woche';
              break;

            default:
              return 'Zeitfilter';
              break;
          }

          break;

        default:
          return 'Zeitfilter';
          break;
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetZeitfilterButtontext', this.Debug.Typen.Component);
    }
  }

  GetZeitfilterButtonwert() {
    try {
      let Starttag;
      let Endetag;
      let Text = '';

      if (this.Pool.Mitarbeitersettings !== null) {
        switch (this.Filterorigin) {
          case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Zeitfilter:
            switch (this.Pool.Mitarbeitersettings.AufgabenTerminfiltervariante) {
              case this.Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert !== null) {
                  Starttag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert);
                  return Starttag.format('DD.MM.YYYY');
                } else return 'Unbekannt';

                break;

              case this.Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert !== null) {
                  Endetag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert);
                  return Endetag.format('DD.MM.YYYY');
                } else return 'Unbekannt';

                break;

              case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert !== null) {
                  Starttag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterStartwert);
                  Text += Starttag.format('DD.MM.YYYY');
                } else Text += 'Unbekannt';

                Text += ' - ';

                if (this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert !== null) {
                  Endetag = (0, moment_1.default)(this.Pool.Mitarbeitersettings.AufgabenTerminfilterEndewert);
                  Text += Endetag.format('DD.MM.YYYY');
                } else Text += 'Unbekannt';

                return Text;
                break;

              case this.Const.Faelligkeitsterminfiltervarianten.Nur_diesen_Monat:
                return 'Unbekannt';
                break;

              case this.Const.Faelligkeitsterminfiltervarianten.Nur_diese_Woche:
                return 'Unbekannt';
                break;

              default:
                return 'kein Filter';
                break;
            }

            break;

          default:
            return 'Zeitfilter';
            break;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'GetZeitfilterButtonwert', this.Debug.Typen.Component);
    }
  }

  MainMenueHomeButtonClicked() {
    try {} catch (error) {
      this.Debug.ShowErrorMessage(error, 'Page Header Menu', 'MainMenueHomeButtonClicked', this.Debug.Typen.Page);
    }
  }

};

PageHeaderMenuComponent.ctorParameters = () => [{
  type: debug_1.DebugProvider
}, {
  type: basics_1.BasicsProvider
}, {
  type: const_1.ConstProvider
}, {
  type: database_mitarbeiter_service_1.DatabaseMitarbeiterService
}, {
  type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService
}, {
  type: auswahl_dialog_service_1.AuswahlDialogService
}, {
  type: database_standorte_service_1.DatabaseStandorteService
}, {
  type: database_projekte_service_1.DatabaseProjekteService
}, {
  type: database_projektpunkte_service_1.DatabaseProjektpunkteService
}, {
  type: database_authentication_service_1.DatabaseAuthenticationService
}, {
  type: database_pool_service_1.DatabasePoolService
}, {
  type: menue_service_1.MenueService
}];

PageHeaderMenuComponent.propDecorators = {
  Suchleiste: [{
    type: core_1.ViewChild,
    args: ['Suchleiste', {
      static: false
    }]
  }],
  ShowSandortfilter: [{
    type: core_1.Input
  }],
  ShowSuchleiste: [{
    type: core_1.Input
  }],
  Filterorigin: [{
    type: core_1.Input
  }],
  ShowStandorttitle: [{
    type: core_1.Input
  }],
  ShowMitarbeitertitle: [{
    type: core_1.Input
  }],
  ShowProjektetitle: [{
    type: core_1.Input
  }],
  ShowFavoritentitle: [{
    type: core_1.Input
  }],
  SucheChanged: [{
    type: core_1.Output
  }],
  StandortfilterClicked: [{
    type: core_1.Output
  }],
  ZeitspanneFilterClicked: [{
    type: core_1.Output
  }],
  LeistungsphaseFilterClicked: [{
    type: core_1.Output
  }],
  FavoritenClicked: [{
    type: core_1.Output
  }],
  FilterChanged: [{
    type: core_1.Output
  }]
};
PageHeaderMenuComponent = tslib_1.__decorate([(0, core_1.Component)({
  selector: 'page-header-menu',
  template: __webpack_require__(/*! ./page-header-menu.component.html?ngResource */ 75941),
  styles: [__webpack_require__(/*! ./page-header-menu.component.scss?ngResource */ 77703)]
})], PageHeaderMenuComponent);
exports.PageHeaderMenuComponent = PageHeaderMenuComponent;

/***/ }),

/***/ 77044:
/*!************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.module.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageHeaderMenuModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const page_header_menu_component_1 = __webpack_require__(/*! ../page-header-menu/page-header-menu.component */ 64650);
const button_value_module_1 = __webpack_require__(/*! ../button-value/button-value.module */ 45596);
const checkbox_clon_module_1 = __webpack_require__(/*! ../checkbox-clon/checkbox-clon.module */ 60034);
let PageHeaderMenuModule = class PageHeaderMenuModule {
};
PageHeaderMenuModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            page_header_menu_component_1.PageHeaderMenuComponent
        ],
        exports: [
            page_header_menu_component_1.PageHeaderMenuComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            button_value_module_1.ButtonValueModule,
            checkbox_clon_module_1.CheckboxClonModule,
        ],
        providers: []
    })
], PageHeaderMenuModule);
exports.PageHeaderMenuModule = PageHeaderMenuModule;


/***/ }),

/***/ 54810:
/*!**************************************************************!*\
  !*** ./src/app/components/page-header/page-header.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageHeaderModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_header_1 = __webpack_require__(/*! ./page-header */ 24664);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let PageHeaderModule = class PageHeaderModule {
};
PageHeaderModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            page_header_1.PageHeaderComponent,
        ],
        exports: [
            page_header_1.PageHeaderComponent,
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
        ],
        providers: []
    })
], PageHeaderModule);
exports.PageHeaderModule = PageHeaderModule;


/***/ }),

/***/ 24664:
/*!*******************************************************!*\
  !*** ./src/app/components/page-header/page-header.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageHeaderComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
let PageHeaderComponent = class PageHeaderComponent {
    constructor(Debug, Basics, Pool, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Pool = Pool;
        this.Const = Const;
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Header', 'Construktor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Header', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
};
PageHeaderComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider }
];
PageHeaderComponent.propDecorators = {
    PageHeaderDiv: [{ type: core_1.ViewChild, args: ['PageHeaderDiv', { read: core_1.ElementRef, static: true },] }]
};
PageHeaderComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'page-header',
        template: __webpack_require__(/*! ./page-header.html?ngResource */ 1423),
        styles: [__webpack_require__(/*! ./page-header.scss?ngResource */ 94196)]
    })
], PageHeaderComponent);
exports.PageHeaderComponent = PageHeaderComponent;


/***/ }),

/***/ 6838:
/*!*****************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageModalKeeperComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
let PageModalKeeperComponent = class PageModalKeeperComponent {
    /*
    @Input()  DialogVisible: boolean;
    @Output() DialogVisibleChange = new EventEmitter<boolean>();
  
     */
    constructor(Debug, Const, Basics, DBStandort) {
        this.Debug = Debug;
        this.Const = Const;
        this.Basics = Basics;
        this.DBStandort = DBStandort;
        this.CancelClickedEvent = new core_1.EventEmitter();
        this.StandortfilterClickedEvent = new core_1.EventEmitter();
        this.OkClickedEvent = new core_1.EventEmitter();
        try {
            this.Titel = this.Const.NONE;
            this.Iconname = 'help-circle-outline';
            // this.DialogVisible     = false;
            this.Dialogbreite = 400;
            this.Dialoghoehe = 300;
            this.OkButtonEneabled = true;
            this.ShowSandortfilter = true;
            this.PositionY = 100;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'consturctor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'OnInit', this.Debug.Typen.Component);
        }
    }
    CancelButtonClicked() {
        this.CancelClickedEvent.emit();
        // this.DialogVisibleChange.emit(false);
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'CancelButtonClicked', this.Debug.Typen.Component);
        }
    }
    OkButtonClicked() {
        this.OkClickedEvent.emit();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'OkButtonClicked', this.Debug.Typen.Component);
        }
    }
    ContentClicked(event) {
        event.preventDefault();
        event.stopPropagation();
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'ContentClicked', this.Debug.Typen.Component);
        }
    }
    StandortfilterButtonClicked() {
        try {
            this.StandortfilterClickedEvent.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Page Modal Keeper', 'StandortfilterButtonClicked', this.Debug.Typen.Component);
        }
    }
};
PageModalKeeperComponent.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider },
    { type: basics_1.BasicsProvider },
    { type: database_standorte_service_1.DatabaseStandorteService }
];
PageModalKeeperComponent.propDecorators = {
    CancelClickedEvent: [{ type: core_1.Output }],
    StandortfilterClickedEvent: [{ type: core_1.Output }],
    OkClickedEvent: [{ type: core_1.Output }],
    Titel: [{ type: core_1.Input }],
    Iconname: [{ type: core_1.Input }],
    Dialogbreite: [{ type: core_1.Input }],
    Dialoghoehe: [{ type: core_1.Input }],
    OkButtonEneabled: [{ type: core_1.Input }],
    ShowSandortfilter: [{ type: core_1.Input }],
    PositionY: [{ type: core_1.Input }]
};
PageModalKeeperComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'page-modal-keeper',
        template: __webpack_require__(/*! ./page-modal-keeper.component.html?ngResource */ 1357),
        styles: [__webpack_require__(/*! ./page-modal-keeper.component.scss?ngResource */ 32206)]
    })
], PageModalKeeperComponent);
exports.PageModalKeeperComponent = PageModalKeeperComponent;


/***/ }),

/***/ 85267:
/*!**************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.module.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageModalKeepermodule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const page_modal_keeper_component_1 = __webpack_require__(/*! ./page-modal-keeper.component */ 6838);
const page_header_module_1 = __webpack_require__(/*! ../page-header/page-header.module */ 54810);
let PageModalKeepermodule = class PageModalKeepermodule {
};
PageModalKeepermodule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            page_modal_keeper_component_1.PageModalKeeperComponent
        ],
        exports: [
            page_modal_keeper_component_1.PageModalKeeperComponent
        ],
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
        ],
        providers: []
    })
], PageModalKeepermodule);
exports.PageModalKeepermodule = PageModalKeepermodule;


/***/ }),

/***/ 89907:
/*!******************************************************************!*\
  !*** ./src/app/components/pj-datepicker/pj-datepicker.module.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjDatepickerModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const pj_datepicker_1 = __webpack_require__(/*! ./pj-datepicker */ 35359);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
let PjDatepickerModule = class PjDatepickerModule {
};
PjDatepickerModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_datepicker_1.PjDatepickerComponent
        ],
        exports: [
            pj_datepicker_1.PjDatepickerComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
        ],
        providers: []
    })
], PjDatepickerModule);
exports.PjDatepickerModule = PjDatepickerModule;


/***/ }),

/***/ 35359:
/*!***********************************************************!*\
  !*** ./src/app/components/pj-datepicker/pj-datepicker.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjDatepickerComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let PjDatepickerComponent = class PjDatepickerComponent {
    constructor(Basics, Debug, Tools, Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.DateClicked = new core_1.EventEmitter();
        this.TimeChanged = new core_1.EventEmitter();
        this.DiabledButtonClicked = new core_1.EventEmitter();
        try {
            let Tag = 1;
            let Monat = 7;
            let Heute = (0, moment_1.default)();
            let Jahr = Heute.year();
            let Stunde = 12;
            let Minute = 0;
            this.Minimum = (0, moment_1.default)().set({ year: 2000, month: 0, date: 1 }).locale('de');
            this.Maximum = (0, moment_1.default)().set({ year: Jahr, month: 11, date: 31 }).locale('de');
            this.Minimumstring = '2000-01-01';
            this.Maximumstring = Jahr.toString() + '-12-31';
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.ElementID = 'open-modal-date';
            this.Background = 'white';
            this.Color = 'black';
            this.Projektpunkt = null;
            this.Smallsize = false;
            this.Smalldate = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'Constructor', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnInit', this.Debug.Typen.Component);
        }
    }
    ngOnChanges(changes) {
        try {
            let Minimum = changes.Minimum;
            let Maximum = changes.Maximum;
            if (typeof Minimum !== 'undefined') {
                // debugger;
                this.Minimum = Minimum.currentValue;
                this.Minimumstring = this.Minimum.format('YYYY-MM-DD');
            }
            if (typeof Maximum !== 'undefined') {
                this.Maximum = Maximum.currentValue;
                this.Maximumstring = this.Maximum.format('YYYY-MM-DD');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'ngOnChanges', this.Debug.Typen.Component);
        }
    }
    FetigButtonClicked() {
        try {
            this.DatePicker.confirm(true);
            this.DatePicker.reset();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'FetigButtonClicked', this.Debug.Typen.Component);
        }
    }
    DateChangedHandler(value) {
        try {
            let Resultstring = value.detail.value;
            let Parts = Resultstring.split('T');
            let Datestring = Parts[0];
            let Werte = Datestring.split('-');
            let Tag = parseInt(Werte[2]);
            let Monat = parseInt(Werte[1]);
            let Jahr = parseInt(Werte[0]);
            let Stunde = this.Datum.hours();
            let Minute = this.Datum.minutes();
            this.Datum = (0, moment_1.default)(Tag + '.' + Monat + '.' + Jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de');
            this.Debug.ShowMessage(Datestring, 'Button Value Date', 'DateChangedHandler', this.Debug.Typen.Component);
            this.TimeChanged.emit({ Zeit: this.Datum, Projektpunkt: this.Projektpunkt });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'DateChangedHandler', this.Debug.Typen.Component);
        }
    }
    DateClickedHandler($event) {
        try {
            this.DateClicked.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Button Value Date', 'DateClickedHandler', this.Debug.Typen.Component);
        }
    }
};
PjDatepickerComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider }
];
PjDatepickerComponent.propDecorators = {
    Minimum: [{ type: core_1.Input }],
    Maximum: [{ type: core_1.Input }],
    Datum: [{ type: core_1.Input }],
    ElementID: [{ type: core_1.Input }],
    Background: [{ type: core_1.Input }],
    Color: [{ type: core_1.Input }],
    Projektpunkt: [{ type: core_1.Input }],
    Smallsize: [{ type: core_1.Input }],
    Smalldate: [{ type: core_1.Input }],
    DateClicked: [{ type: core_1.Output }],
    TimeChanged: [{ type: core_1.Output }],
    DiabledButtonClicked: [{ type: core_1.Output }],
    DatePicker: [{ type: core_1.ViewChild, args: ['DatePicker', { static: false },] }]
};
PjDatepickerComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-datepicker',
        template: __webpack_require__(/*! ./pj-datepicker.html?ngResource */ 64403),
        styles: [__webpack_require__(/*! ./pj-datepicker.scss?ngResource */ 33720)]
    })
], PjDatepickerComponent);
exports.PjDatepickerComponent = PjDatepickerComponent;


/***/ }),

/***/ 20679:
/*!*************************************************************************************!*\
  !*** ./src/app/components/pj-projektpunkteliste/pj-projektpunkteliste.component.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktelisteComponent = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
let PjProjektpunktelisteComponent = class PjProjektpunktelisteComponent {
    constructor(Basics, Debug, Tools, 
    // private NavParams: Navparameter,
    Pool, Database, ProjekteDB, ProtokolleDB, MitarbeiterDB, MitarbeitersettingsDB, 
    // private Emailservice: EmailService,
    Const) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Pool = Pool;
        this.Database = Database;
        this.ProjekteDB = ProjekteDB;
        this.ProtokolleDB = ProtokolleDB;
        this.MitarbeiterDB = MitarbeiterDB;
        this.MitarbeitersettingsDB = MitarbeitersettingsDB;
        this.Const = Const;
        this.StatusClicked = new core_1.EventEmitter();
        this.ProtokollmarkeClicked = new core_1.EventEmitter();
        this.AufgabeClicked = new core_1.EventEmitter();
        this.StartdatumChanged = new core_1.EventEmitter();
        this.DetaildatumChanged = new core_1.EventEmitter();
        this.EndedatumChanged = new core_1.EventEmitter();
        this.EndedatumClicked = new core_1.EventEmitter();
        this.FortschrittClicked = new core_1.EventEmitter();
        this.MeintagClicked = new core_1.EventEmitter();
        this.MeilensteinClicked = new core_1.EventEmitter();
        this.NotizenMarkeClicked = new core_1.EventEmitter();
        this.MeinewocheZuweisenClicked = new core_1.EventEmitter();
        this.MeinewocheBearbeitenClicked = new core_1.EventEmitter();
        this.ZustaendigExternZuweisenClicked = new core_1.EventEmitter();
        this.ZustaendigInternZuweisenClicked = new core_1.EventEmitter();
        this.AddProjektpunktClicked = new core_1.EventEmitter();
        this.InsertProjektpunkt = new core_1.EventEmitter();
        this.ProjektpunktDown = new core_1.EventEmitter();
        this.ProjektpunktUp = new core_1.EventEmitter();
        this.EditBemerkung = new core_1.EventEmitter();
        this.TerminFiltermodusClicked = new core_1.EventEmitter();
        this.DeleteDetailClicked = new core_1.EventEmitter();
        this.CancelDetailClicked = new core_1.EventEmitter();
        this.SaveDetailClicked = new core_1.EventEmitter();
        try {
            this.Datenliste = [];
            this.Projektindex = null;
            this.Projekt = null;
            this.ShowMeintag = false;
            this.Settings = null;
            this.Datepickerprefix = '';
            this.ShowProjektnamen = false;
            this.CheckFilterEnabled = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'constructor', this.Debug.Typen.Component);
        }
    }
    MeintagChanged(event, Projektpunkt) {
        try {
            window.setTimeout(() => {
                // Projektpunkt.Meintag = event.status;
            }, 300);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'MeintagChanged', this.Debug.Typen.Component);
        }
    }
    MeintagDivClicked(event, Projektpunkt) {
        try {
            let Meintag;
            let Meintagliste = this.Pool.Mitarbeiterdaten.Meintagliste;
            debugger;
            Meintag = lodash.find(Meintagliste, (meintageintrag) => {
                return meintageintrag.ProjektID === Projektpunkt.ProjektID && meintageintrag.ProjektpunktID === Projektpunkt._id;
            });
            if (lodash.isUndefined(Meintag)) {
                Meintag = {
                    ProjektID: Projektpunkt.ProjektID,
                    ProjektpunktID: Projektpunkt._id,
                    Checkedstatus: 'ON'
                };
                Meintagliste.push(Meintag);
            }
            else {
                Meintag.Checkedstatus = Meintag.Checkedstatus === 'ON' ? 'OFF' : 'ON';
            }
            window.setTimeout(() => {
                this.Pool.Mitarbeiterdaten.Meintagliste = lodash.filter(this.Pool.Mitarbeiterdaten.Meintagliste, { Checkedstatus: 'ON' });
                debugger;
                this.MitarbeiterDB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
                    this.Pool.MitarbeiterdatenChanged.emit();
                });
            }, 300);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'MeintagDivClicked', this.Debug.Typen.Component);
        }
    }
    MeilensteinDivClicked(event, Projektpunkt) {
        try {
            let Meilenstein;
            if (Projektpunkt.Meilenstein === true) {
                Projektpunkt.Meilensteinstatus = 'OFF';
                Meilenstein = false;
            }
            else {
                Projektpunkt.Meilensteinstatus = 'ON';
                Meilenstein = true;
            }
            window.setTimeout(() => {
                Projektpunkt.Meilenstein = Meilenstein;
                this.Database.UpdateProjektpunkt(Projektpunkt).then(() => {
                    this.MeilensteinClicked.emit(Projektpunkt);
                });
            }, 300);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'MeilensteinDivClicked', this.Debug.Typen.Component);
        }
    }
    ngOnDestroy() {
        try {
            this.SettingsSubscription.unsubscribe();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'OnDestroy', this.Debug.Typen.Component);
        }
    }
    NotizMarkeClickedHandler(Projektpunkt) {
        try {
            this.NotizenMarkeClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'NotizMarkeClickedHandler', this.Debug.Typen.Component);
        }
    }
    ngOnInit() {
        try {
            this.SettingsSubscription = this.Pool.MitarbeitersettingsChanged.subscribe(() => {
                this.Settings = this.Pool.Mitarbeitersettings;
            });
            if (this.Pool.Mitarbeitersettings !== null) {
                this.Settings = this.Pool.Mitarbeitersettings;
            }
            /*
      
            switch (this.Basics.Mitarbeiterdaten.Settings.Listenmodus) {
      
              case this.Service.Listenmodusvarianten.Einfach:
      
                this.Listesettings = this.Basics.Mitarbeiterdaten.Settings.Einfachlistefeldersettings;
      
                break;
      
              case this.Service.Listenmodusvarianten.Zweifach:
      
                this.Listesettings = this.Basics.Mitarbeiterdaten.Settings.Zweifachlistefeldersettings;
      
                break;
      
              case this.Service.Listenmodusvarianten.Dreifach:
      
                this.Listesettings = this.Basics.Mitarbeiterdaten.Settings.Dreifachlistefeldersettings;
      
                break;
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'OnInit', this.Debug.Typen.Component);
        }
    }
    ChangeStatusClicked(Projektpunkt) {
        try {
            this.StatusClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'OnInit', this.Debug.Typen.Component);
        }
    }
    AufgabeClickedHandler(Projektpunkt) {
        try {
            this.AufgabeClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'AufgabeClickedHandler', this.Debug.Typen.Component);
        }
    }
    StartdatumClickedHandler(Projektpunkt) {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'StartdatumClickedHandler', this.Debug.Typen.Component);
        }
    }
    EndeDatumChangedHandler(event) {
        try {
            event.Projektpunkt.Endezeitstempel = event.Zeit.valueOf();
            event.Projektpunkt.Endezeitstring = event.Zeit.format('DD.MM.YYYY');
            this.EndedatumChanged.emit(event.Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'EndeDatumChangedHandler', this.Debug.Typen.Component);
        }
    }
    StartDatumChangedHandler(event) {
        try {
            event.Projektpunkt.Startzeitsptempel = event.Zeit.valueOf();
            event.Projektpunkt.Startzeitstring = event.Zeit.format('DD.MM.YYYY');
            this.StartdatumChanged.emit(event.Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'StartDatumChangedHandler', this.Debug.Typen.Component);
        }
    }
    GetStartdatum(Projektpunkt) {
        try {
            return (0, moment_1.default)(Projektpunkt.Startzeitsptempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetStartdatum', this.Debug.Typen.Component);
        }
    }
    AnmerkungTextChangedHandler(event, Detailindex) {
        try {
            let Text = event.detail.value;
            this.Database.CurrentProjektpunkt.Anmerkungenliste[Detailindex].Anmerkung = Text;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'AnmerkungTextChangedHandler', this.Debug.Typen.Component);
        }
    }
    DateClickedHandler() {
        try {
            // this.Database.SaveLastTextinput();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'DateClickedHandler', this.Debug.Typen.Component);
        }
    }
    DeleteAnmerkung(Projektpunkt, Anmerkung) {
        try {
            this.Database.CurrentProjektpunkt.Anmerkungenliste = lodash.filter(this.Database.CurrentProjektpunkt.Anmerkungenliste, (CurrentAnmerkung) => {
                return CurrentAnmerkung.AnmerkungID !== Anmerkung.AnmerkungID;
            });
            this.Database.UpdateProjektpunkt(this.Database.CurrentProjektpunkt);
            this.Database.CurrentProjektpunkt = null;
            this.Database.LiveEditorOpen = false;
            // this.Service.Projektpunkt = null;
            /*
      
            if(Detail.ProjektpunktdetailID === this.Const.NONE) {
      
      
              this.CancelDetailClicked.emit({
      
                Projektpunkt: Projektpunkt,
                Detail:       Detail
              });
            }
            else {
      
              this.DeleteDetailClicked.emit({
      
                Projektpunkt: Projektpunkt,
                Detail:       Detail
              });
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'DeleteAnmerkung', this.Debug.Typen.Component);
        }
    }
    GetAnmerkungdatum(Anmerkung) {
        try {
            return (0, moment_1.default)(Anmerkung.Zeitstempel);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetAnmerkungdatum', this.Debug.Typen.Component);
        }
    }
    EditAnmerkungClickedHandler(Projektpunkt, anmerkung) {
        try {
            if (this.Database.CurrentProjektpunkt !== null) {
                for (let Anmerkung of this.Database.CurrentProjektpunkt.Anmerkungenliste) {
                    Anmerkung.LiveEditor = false;
                }
            }
            this.Database.CurrentProjektpunkt = Projektpunkt;
            anmerkung.LiveEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'EditAnmerkungClickedHandler', this.Debug.Typen.Component);
        }
    }
    AddAnmerkungClickedHandler(Projektpunkt) {
        try {
            let Detail;
            let Anmerkung;
            this.Database.LiveEditorOpen = true;
            if (this.Database.CurrentProjektpunkt !== null) {
                for (Detail of this.Database.CurrentProjektpunkt.Anmerkungenliste) {
                    Detail.LiveEditor = false;
                }
            }
            this.Database.CurrentProjektpunkt = Projektpunkt;
            Anmerkung = this.Database.GetNewAnmerkung();
            Anmerkung.LiveEditor = true;
            Projektpunkt.Anmerkungenliste.push(Anmerkung);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'AddAnmerkungClickedHandler', this.Debug.Typen.Component);
        }
    }
    ShowAddNewDetail(Projektpunkt) {
        try {
            for (let Detail of Projektpunkt.Anmerkungenliste) {
                if (Detail.LiveEditor === true)
                    return false;
            }
            if (this.Database.LiveEditorOpen === true)
                return false;
            return true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'ShowAddNewDetail', this.Debug.Typen.Component);
        }
    }
    ProjektpunktDetailtypChanged(event, Detail) {
        try {
            let Typ = event.detail.value;
            // Detail.Detailtyp = Typ;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'ProjektpunktDetailtypChanged', this.Debug.Typen.Component);
        }
    }
    EndedatumClickedHandler(Projektpunkt) {
        try {
            this.EndedatumClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'EndedatumClicked', this.Debug.Typen.Component);
        }
    }
    ProtokollMarkeClicked(Projektpunkt) {
        try {
            let Protokoll;
            let Projekt;
            Projekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: Projektpunkt.ProjektID });
            if (lodash.isUndefined(Projekt) === false) {
                this.ProjekteDB.CurrentProjekt = Projekt;
                // this.ProjekteDB.Projektindex = lodash.findIndex(this.Pool.Projektliste, {ProjektID: Projektpunkt.ProjektID});
                Protokoll = lodash.find(this.Pool.Protokollliste[Projekt.Projektkey], { _id: Projektpunkt.ProtokollID });
                if (lodash.isUndefined(Protokoll) === false) {
                    this.ProtokolleDB.CurrentProtokoll = Protokoll;
                    this.ProtokollmarkeClicked.emit();
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'ProtokollMarkeClicked', this.Debug.Typen.Component);
        }
    }
    StatusCheckChanged(event, Projektpunkt) {
        try {
            let Heute = (0, moment_1.default)();
            if (event.status === true) {
                Projektpunkt.Status = this.Const.Projektpunktstatustypen.Geschlossen.Name;
                Projektpunkt.Geschlossenzeitstring = Heute.format('DD.MM.YYYY');
                Projektpunkt.Geschlossenzeitstempel = Heute.valueOf();
            }
            else {
                Projektpunkt.Status = this.Const.Projektpunktstatustypen.Offen.Name;
                Projektpunkt.Geschlossenzeitstring = null;
                Projektpunkt.Geschlossenzeitstempel = null;
            }
            this.Database.UpdateProjektpunkt(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'StatusCheckChanged', this.Debug.Typen.Component);
        }
    }
    SaveAnmerkung(Projektpunkt, Anmerkung) {
        try {
            if (Anmerkung.Anmerkung !== '') {
                Anmerkung.LiveEditor = false;
                this.Database.LiveEditorOpen = false;
                this.Database.UpdateProjektpunkt(this.Database.CurrentProjektpunkt);
            }
            this.Database.CurrentProjektpunkt = null;
            /*
      
            this.Service.Projektpunkt = null;
      
            if(Detail.Bemerkung !== '') {
      
              this.SaveDetailClicked.emit({
      
                Projektpunkt: Projektpunkt,
                Detail:       Detail
              });
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'SaveAnmerkung', this.Debug.Typen.Component);
        }
    }
    /*
  
    BemerkungMouseOver(event: MouseEvent, Projektpunkt: Projektpunktestruktur) {
  
      try {
  
        Projektpunkt.BemerkungMouseOver = true;
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'BemerkungMouseOver', this.Debug.Typen.Component);
      }
    }
  
    BemerkungMouseOut(event: MouseEvent, Projektpunkt: Projektpunktestruktur) {
  
      try {
  
        Projektpunkt.BemerkungMouseOver = false;
  
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'BemerkungMouseOut', this.Debug.Typen.Component);
      }
    }
  
     */
    GetEndedatumstyle(Projektpunkt) {
        try {
            return {
                textDecoration: Projektpunkt.EndeMouseOver === true ? 'underline' : 'none',
                color: this.Database.CheckProjektpunktFaellig(Projektpunkt) === this.Const.Faelligkeitsstatus.Nicht_faellig ? 'black' : 'white'
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetEndedatumstyle', this.Debug.Typen.Component);
        }
    }
    GetZustaendigInternName(ZustaendigID) {
        try {
            let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, { _id: ZustaendigID });
            if (lodash.isUndefined(Mitarbeiter) === false) {
                return Mitarbeiter.Kuerzel;
            }
            else {
                return 'unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Projektpunkteintrag', 'GetZustaendigInternName', this.Debug.Typen.Component);
        }
    }
    ZustaendigExternZuweisenClickedHandler(Projektpunkt) {
        try {
            this.ZustaendigExternZuweisenClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Editor', 'ZustaendigExternZuweisenClicked', this.Debug.Typen.Component);
        }
    }
    GetEndetagestyle(Projektpunkt) {
        try {
            return {
                color: this.Database.CheckProjektpunktFaellig(Projektpunkt) === this.Const.Faelligkeitsstatus.Nicht_faellig ? 'black' : 'white'
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetEndedatumstyle', this.Debug.Typen.Component);
        }
    }
    AddProjektpunktButtonClicked() {
        try {
            this.AddProjektpunktClicked.emit(this.Projektindex);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'AddProjektpunktButtonClicked', this.Debug.Typen.Component);
        }
    }
    FortschrittClickedHandler(Projektpunkt) {
        try {
            this.FortschrittClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'FortschrittClicked', this.Debug.Typen.Component);
        }
    }
    GetFortschritt(Projektpunkt) {
        try {
            let x = Projektpunkt.Fortschritt / 100;
            return x;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetFortschritt', this.Debug.Typen.Component);
        }
    }
    GetZustaendigExternName(BeteiligtenID) {
        try {
            let Beteiligter = lodash.find(this.Projekt.Beteiligtenliste, { BeteiligtenID: BeteiligtenID });
            if (lodash.isUndefined(Beteiligter) === false) {
                if (Beteiligter.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person) {
                    return Beteiligter.Name;
                }
                else {
                    return Beteiligter.Firma;
                }
            }
            else {
            }
            return 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetZustaendigExternName', this.Debug.Typen.Component);
        }
    }
    ZustaendigInternZuweisenClickedHandler(Projektpunkt) {
        try {
            this.ZustaendigInternZuweisenClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'ZustaendigInternZuweisenClickedHandler', this.Debug.Typen.Component);
        }
    }
    TerminFilterAufsteigendClickedHandler() {
        try {
            this.Pool.Mitarbeitersettings.AufgabenSortiermodus = this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend;
            this.TerminFiltermodusClicked.emit(this.Pool.Mitarbeitersettings.AufgabenSortiermodus);
            this.MitarbeitersettingsDB.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'TerminFilterAufsteigendClickedHandler', this.Debug.Typen.Component);
        }
    }
    TerminFilterAbsteigendClickedHandler() {
        try {
            this.Pool.Mitarbeitersettings.AufgabenSortiermodus = this.Const.AufgabenSortiermodusvarianten.TermineAbsteigend;
            //  this.Settings.AufgabenSortiermodus                 = this.Const.AufgabenSortiermodusvarianten.TermineAbsteigend;
            this.TerminFiltermodusClicked.emit(this.Pool.Mitarbeitersettings.AufgabenSortiermodus);
            this.MitarbeitersettingsDB.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'TerminFilterAbsteigendClickedHandler', this.Debug.Typen.Component);
        }
    }
    GetGeschlossenDatum(Projektpunkt) {
        try {
            if (Projektpunkt.Geschlossenzeitstempel !== null) {
                return (0, moment_1.default)(Projektpunkt.Geschlossenzeitstempel).format('DD.MM.YYYY');
            }
            else
                return 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'function', this.Debug.Typen.Component);
        }
    }
    MeineWocheZuweisenClickedHandler(Projektpunkt) {
        try {
            this.MeinewocheZuweisenClicked.emit(Projektpunkt);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'MeineWocheZuweisenClickedHandler', this.Debug.Typen.Component);
        }
    }
    GetMeineWocheTage(Projektpunkt) {
        try {
            let Eintrag;
            let Text = '';
            if (this.Pool.Mitarbeiterdaten !== null) {
                Eintrag = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                    return eintrag.ProjektID === Projektpunkt.ProjektID && eintrag.ProjektpunktID === Projektpunkt._id;
                });
                if (!lodash.isUndefined(Eintrag)) {
                    if (Eintrag.Montagseinsatz)
                        Text += 'Montag<br>';
                    if (Eintrag.Dienstagseinsatz)
                        Text += 'Dienstag<br>';
                    if (Eintrag.Mittwochseinsatz)
                        Text += 'Mittwoch<br>';
                    if (Eintrag.Donnerstagseinsatz)
                        Text += 'Donnerstag<br>';
                    if (Eintrag.Freitagseinsatz)
                        Text += 'Freitag<br>';
                    if (Eintrag.Samstagseinsatz)
                        Text += 'Samstag<br>';
                    return Text;
                }
                else
                    return 'Unbekannt';
            }
            else {
                return 'Unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'GetMeineWocheTage', this.Debug.Typen.Component);
        }
    }
    MeineWocheBearbeitenClickedHandler(Projektpunkt) {
        try {
            if (this.Pool.Mitarbeiterdaten !== null) {
                this.MitarbeiterDB.CurrentMeinewoche = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                    return eintrag.ProjektID === Projektpunkt.ProjektID && eintrag.ProjektpunktID === Projektpunkt._id;
                });
                if (lodash.isUndefined(this.MitarbeiterDB.CurrentMeinewoche)) {
                    this.MitarbeiterDB.CurrentMeinewoche = null;
                }
                else {
                    this.MeinewocheBearbeitenClicked.emit(Projektpunkt);
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'MeineWocheBearbeitenClickedHandler', this.Debug.Typen.Component);
        }
    }
    DebugButtonClicked(event, Projektpunkt) {
        try {
            event.preventDefault();
            event.stopPropagation();
            this.Debug.AddDebugMessage(Projektpunkt);
            this.Tools.ShowHinweisDialog('Debug Message printed...');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkteliste', 'DebugButtonClicked', this.Debug.Typen.Component);
        }
    }
};
PjProjektpunktelisteComponent.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService },
    { type: const_1.ConstProvider }
];
PjProjektpunktelisteComponent.propDecorators = {
    StatusClicked: [{ type: core_1.Output }],
    ProtokollmarkeClicked: [{ type: core_1.Output }],
    AufgabeClicked: [{ type: core_1.Output }],
    StartdatumChanged: [{ type: core_1.Output }],
    DetaildatumChanged: [{ type: core_1.Output }],
    EndedatumChanged: [{ type: core_1.Output }],
    EndedatumClicked: [{ type: core_1.Output }],
    FortschrittClicked: [{ type: core_1.Output }],
    MeintagClicked: [{ type: core_1.Output }],
    MeilensteinClicked: [{ type: core_1.Output }],
    NotizenMarkeClicked: [{ type: core_1.Output }],
    MeinewocheZuweisenClicked: [{ type: core_1.Output }],
    MeinewocheBearbeitenClicked: [{ type: core_1.Output }],
    ZustaendigExternZuweisenClicked: [{ type: core_1.Output }],
    ZustaendigInternZuweisenClicked: [{ type: core_1.Output }],
    AddProjektpunktClicked: [{ type: core_1.Output }],
    InsertProjektpunkt: [{ type: core_1.Output }],
    ProjektpunktDown: [{ type: core_1.Output }],
    ProjektpunktUp: [{ type: core_1.Output }],
    EditBemerkung: [{ type: core_1.Output }],
    TerminFiltermodusClicked: [{ type: core_1.Output }],
    DeleteDetailClicked: [{ type: core_1.Output }],
    CancelDetailClicked: [{ type: core_1.Output }],
    SaveDetailClicked: [{ type: core_1.Output }],
    Datenliste: [{ type: core_1.Input }],
    Projektindex: [{ type: core_1.Input }],
    Projekt: [{ type: core_1.Input }],
    ShowMeintag: [{ type: core_1.Input }],
    Datepickerprefix: [{ type: core_1.Input }],
    ShowProjektnamen: [{ type: core_1.Input }],
    CheckFilterEnabled: [{ type: core_1.Input }]
};
PjProjektpunktelisteComponent = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-projektpunkteliste',
        template: __webpack_require__(/*! ./pj-projektpunkteliste.component.html?ngResource */ 25641),
        styles: [__webpack_require__(/*! ./pj-projektpunkteliste.component.scss?ngResource */ 11303)]
    })
], PjProjektpunktelisteComponent);
exports.PjProjektpunktelisteComponent = PjProjektpunktelisteComponent;


/***/ }),

/***/ 12375:
/*!**********************************************************************************!*\
  !*** ./src/app/components/pj-projektpunkteliste/pj-projektpunkteliste.module.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektpunktelisteModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const pj_projektpunkteliste_component_1 = __webpack_require__(/*! ./pj-projektpunkteliste.component */ 20679);
const pj_datepicker_module_1 = __webpack_require__(/*! ../pj-datepicker/pj-datepicker.module */ 89907);
const checkbox_clon_module_1 = __webpack_require__(/*! ../checkbox-clon/checkbox-clon.module */ 60034);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 97154);
let PjProjektpunktelisteModule = class PjProjektpunktelisteModule {
};
PjProjektpunktelisteModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projektpunkteliste_component_1.PjProjektpunktelisteComponent
        ],
        exports: [
            pj_projektpunkteliste_component_1.PjProjektpunktelisteComponent
        ],
        imports: [
            angular_1.IonicModule,
            common_1.CommonModule,
            pj_datepicker_module_1.PjDatepickerModule,
            checkbox_clon_module_1.CheckboxClonModule,
            safe_pipe_module_1.SafePipeModule,
        ],
        providers: []
    })
], PjProjektpunktelisteModule);
exports.PjProjektpunktelisteModule = PjProjektpunktelisteModule;


/***/ }),

/***/ 43769:
/*!***********************************************************!*\
  !*** ./src/app/pages/common-debug/common-debug.module.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonDebugPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_debug_page_1 = __webpack_require__(/*! ./common-debug.page */ 62653);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const prettyjson_module_1 = __webpack_require__(/*! ../../pipes/prettyjson.module */ 45561);
const routes = [
    {
        path: '',
        component: common_debug_page_1.CommonDebugPage
    }
];
let CommonDebugPageModule = class CommonDebugPageModule {
};
CommonDebugPageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            page_header_module_1.PageHeaderModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            forms_1.ReactiveFormsModule,
            page_footer_module_1.PageFooterModule,
            page_header_menu_module_1.PageHeaderMenuModule,
            prettyjson_module_1.PrettyjsonModule,
        ],
        declarations: [common_debug_page_1.CommonDebugPage]
    })
], CommonDebugPageModule);
exports.CommonDebugPageModule = CommonDebugPageModule;


/***/ }),

/***/ 62653:
/*!*********************************************************!*\
  !*** ./src/app/pages/common-debug/common-debug.page.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonDebugPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 67334);
const localstorage_1 = __webpack_require__(/*! ../../services/localstorage/localstorage */ 42117);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
let CommonDebugPage = class CommonDebugPage {
    constructor(Basics, Debug, Tools, Const, fb, http, Pool, DBProjekte, DBProjektpunkte, AuthService, StorageService) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.fb = fb;
        this.http = http;
        this.Pool = Pool;
        this.DBProjekte = DBProjekte;
        this.DBProjektpunkte = DBProjektpunkte;
        this.AuthService = AuthService;
        this.StorageService = StorageService;
        try {
            this.ServerUrl = this.Pool.CockpitserverURL + '/standorte/';
            // Test
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Title = 'Debug';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ClearSecurityToken() {
        try {
            this.AuthService.SecurityToken = this.Const.NONE;
            this.AuthService.ActiveUser = null;
            this.StorageService.SetSecurityToken(this.Const.NONE);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'ClearSecurityToken', this.Debug.Typen.Page);
        }
    }
    TestButtonCLcicked() {
        try {
            let Observer;
            let headers = new http_1.HttpHeaders({
                'content-type': 'application/json',
                'authorization': this.AuthService.SecurityToken
            });
            Observer = this.http.get(this.ServerUrl, { headers: headers }); // { headers: {'Authorization' : this.AuthService.SecurityToken} }
            Observer.subscribe({
                next: (result) => {
                    debugger;
                    // this.UpdateStandortliste(result.data);
                },
                complete: () => {
                    // this.Pool.StandortelisteChanged.emit();
                    debugger;
                    // resove(true);
                },
                error: (error) => {
                    debugger;
                    //reject(error);
                }
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'TextButtonCLcicked', this.Debug.Typen.Page);
        }
    }
    ClearMessagesButtonCLcicked() {
        try {
            this.Debug.Debugmessageliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Debug', 'ClearMessagesButtonCLcicked', this.Debug.Typen.Page);
        }
    }
};
CommonDebugPage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: forms_1.FormBuilder },
    { type: http_1.HttpClient },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: localstorage_1.LocalstorageService }
];
CommonDebugPage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-debug-page',
        template: __webpack_require__(/*! ./common-debug.page.html?ngResource */ 33196),
        styles: [__webpack_require__(/*! ./common-debug.page.scss?ngResource */ 32686)]
    })
], CommonDebugPage);
exports.CommonDebugPage = CommonDebugPage;


/***/ }),

/***/ 1853:
/*!***************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.module.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonEinstellungenPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const common_einstellungen_page_1 = __webpack_require__(/*! ./common-einstellungen.page */ 23980);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const button_value_module_1 = __webpack_require__(/*! ../../components/button-value/button-value.module */ 45596);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const routes = [
    {
        path: '',
        component: common_einstellungen_page_1.CommonEinstellungenPage
    }
];
let CommonEinstellungenPageModule = class CommonEinstellungenPageModule {
};
CommonEinstellungenPageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
            router_1.RouterModule.forChild(routes),
            page_header_menu_module_1.PageHeaderMenuModule,
            page_footer_module_1.PageFooterModule,
            checkbox_clon_module_1.CheckboxClonModule,
            button_value_module_1.ButtonValueModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
        ],
        declarations: [common_einstellungen_page_1.CommonEinstellungenPage]
    })
], CommonEinstellungenPageModule);
exports.CommonEinstellungenPageModule = CommonEinstellungenPageModule;


/***/ }),

/***/ 23980:
/*!*************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonEinstellungenPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_mitarbeitersettings_service_1 = __webpack_require__(/*! ../../services/database-mitarbeitersettings/database-mitarbeitersettings.service */ 68083);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
let CommonEinstellungenPage = class CommonEinstellungenPage {
    constructor(MitarbeitersettingsDB, ProjekteDB, Pool, Const, Basics, Debug) {
        this.MitarbeitersettingsDB = MitarbeitersettingsDB;
        this.ProjekteDB = ProjekteDB;
        this.Pool = Pool;
        this.Const = Const;
        this.Basics = Basics;
        this.Debug = Debug;
        try {
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.Auswahltitel = '';
            this.ShowAuswahl = false;
            this.Auswahldialogorigin = this.Const.NONE;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Einstellungen', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
    }
    ListesettingCheckChanged(event, bereich) {
        try {
            switch (bereich) {
                case 'Nummer':
                    this.Pool.Mitarbeitersettings.AufgabenShowNummer = event.status;
                    break;
                case 'Startdatum':
                    this.Pool.Mitarbeitersettings.AufgabenShowStartdatum = event.status;
                    break;
                case 'Aufgabe':
                    this.Pool.Mitarbeitersettings.AufgabenShowAufgabe = event.status;
                    break;
                case 'Bemerkungen':
                    this.Pool.Mitarbeitersettings.AufgabenShowBemerkung = event.status;
                    break;
                case 'Fortschritt':
                    this.Pool.Mitarbeitersettings.AufgabenShowFortschritt = event.status;
                    break;
                case 'Tage':
                    this.Pool.Mitarbeitersettings.AufgabenShowTage = event.status;
                    break;
                case 'Zeitansatz':
                    this.Pool.Mitarbeitersettings.AufgabenShowZeitansatz = event.status;
                    break;
                case 'Termin':
                    this.Pool.Mitarbeitersettings.AufgabenShowTermin = event.status;
                    break;
                case 'Zustaendig':
                    this.Pool.Mitarbeitersettings.AufgabenShowZustaendig = event.status;
                    break;
                case 'Status':
                    this.Pool.Mitarbeitersettings.AufgabenShowStatus = event.status;
                    break;
                case 'Meintag':
                    this.Pool.Mitarbeitersettings.AufgabenShowMeintag = event.status;
                    break;
                case 'Meine Woche':
                    this.Pool.Mitarbeitersettings.AufgabenShowMeinewoche = event.status;
                    break;
            }
            this.MitarbeitersettingsDB.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings).then(() => {
            }).catch((error) => {
                this.Debug.ShowErrorMessage(error, 'Mitarbeiter Settings', 'ListesettingCheckChanged', this.Debug.Typen.Page);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Settings', 'ListesettingCheckChanged', this.Debug.Typen.Page);
        }
    }
    FavoritenanzahlClicked() {
        try {
            this.Auswahldialogorigin = 'Favoritenanzahl';
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Favoritenanzahl festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: '4', SecoundColumn: '', Data: 4 });
            this.Auswahlliste.push({ Index: 1, FirstColumn: '5', SecoundColumn: '', Data: 5 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: '6', SecoundColumn: '', Data: 6 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: '7', SecoundColumn: '', Data: 7 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: '8', SecoundColumn: '', Data: 8 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: '9', SecoundColumn: '', Data: 9 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: '10', SecoundColumn: '', Data: 10 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: '11', SecoundColumn: '', Data: 11 });
            this.Auswahlliste.push({ Index: 8, FirstColumn: '12', SecoundColumn: '', Data: 12 });
            this.Auswahlindex = this.Auswahlliste.findIndex((eintrag) => {
                return eintrag.Data === this.Pool.Mitarbeitersettings.HeadermenueMaxFavoriten;
            });
            if (this.Auswahlindex === -1)
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Settings', 'FavoritenanzahlClicked', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case 'Favoritenanzahl':
                    this.Pool.Mitarbeitersettings.HeadermenueMaxFavoriten = data;
                    break;
                case 'MeielnsteineNachlauf':
                    this.Pool.Mitarbeitersettings.AufgabenMeilensteineNachlauf = data;
                    break;
            }
            this.MitarbeitersettingsDB.UpdateMitarbeitersettings(this.Pool.Mitarbeitersettings).then(() => {
                this.ProjekteDB.InitMenuProjektauswahl();
                this.ProjekteDB.CurrentFavoritenChanged.emit();
            }).catch((error) => {
                this.Debug.ShowErrorMessage(error, 'Einstellungen', 'MaxFavoritenanzahlChanged', this.Debug.Typen.Page);
            });
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Settings', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    MeilensteineNachlaufClicked() {
        try {
            this.Auswahldialogorigin = 'MeielnsteineNachlauf';
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Mailensteine Nachlauf festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: '1 Kalderwoche', SecoundColumn: '', Data: 1 });
            this.Auswahlliste.push({ Index: 1, FirstColumn: '2 Kalenderwochen', SecoundColumn: '', Data: 2 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: '3 Kalenderwochen', SecoundColumn: '', Data: 3 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: '4 Kalenderwochen', SecoundColumn: '', Data: 4 });
            this.Auswahlindex = this.Auswahlliste.findIndex((eintrag) => {
                return eintrag.Data === this.Pool.Mitarbeitersettings.AufgabenMeilensteineNachlauf;
            });
            if (this.Auswahlindex === -1)
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Settings', 'MeilensteineNachlaufClicked', this.Debug.Typen.Page);
        }
    }
};
CommonEinstellungenPage.ctorParameters = () => [
    { type: database_mitarbeitersettings_service_1.DatabaseMitarbeitersettingsService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider },
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider }
];
CommonEinstellungenPage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-einstellungen-page',
        template: __webpack_require__(/*! ./common-einstellungen.page.html?ngResource */ 69748),
        styles: [__webpack_require__(/*! ./common-einstellungen.page.scss?ngResource */ 97308)]
    })
], CommonEinstellungenPage);
exports.CommonEinstellungenPage = CommonEinstellungenPage;


/***/ }),

/***/ 57051:
/*!***********************************************************!*\
  !*** ./src/app/pages/common-error/common-error.module.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonErrorPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_error_page_1 = __webpack_require__(/*! ./common-error.page */ 15902);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const safe_pipe_module_1 = __webpack_require__(/*! ../../pipes/safe.pipe.module */ 97154);
const routes = [
    {
        path: '',
        component: common_error_page_1.CommonErrorPage
    }
];
let CommonErrorPageModule = class CommonErrorPageModule {
};
CommonErrorPageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
            router_1.RouterModule.forChild(routes),
            safe_pipe_module_1.SafePipeModule
        ],
        declarations: [common_error_page_1.CommonErrorPage]
    })
], CommonErrorPageModule);
exports.CommonErrorPageModule = CommonErrorPageModule;


/***/ }),

/***/ 15902:
/*!*********************************************************!*\
  !*** ./src/app/pages/common-error/common-error.page.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonErrorPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 73253);
const error_service_1 = __webpack_require__(/*! ../../services/error/error.service */ 84055);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let CommonErrorPage = class CommonErrorPage {
    constructor(Basics, Debug, Const, Tools, Fehlerservice, LoadingAnimation) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Const = Const;
        this.Tools = Tools;
        this.Fehlerservice = Fehlerservice;
        this.LoadingAnimation = LoadingAnimation;
        this.Titel = 'Zoomtest';
        try {
            this.Message = '';
            this.Stack = '';
            (0, moment_1.default)();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Common Error', 'Constructor', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Message = '';
            this.Title = 'Fehlermeldung';
            this.LoadingAnimation.HideLoadingAnimation(false);
            for (let Eintrag of this.Fehlerservice.Fehlermeldung) {
                switch (Eintrag.Type) {
                    case this.Const.Fehlermeldungtypen.Script:
                        this.ShowError(Eintrag);
                        break;
                    case this.Const.Fehlermeldungtypen.Sql:
                        this.ShowSqlError(Eintrag);
                        break;
                    case this.Const.Fehlermeldungtypen.Transaction:
                        this.ShowTransactionError(Eintrag);
                        break;
                    case this.Const.Fehlermeldungtypen.Firebase:
                        break;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Common Error', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ShowError(data) {
        try {
            let Skript = data.Script;
            let Error = data.Error;
            let Funktion = data.Funktion;
            let Typ = data.Scripttype;
            this.SendMailFinished = false;
            this.Message += '<table cellpadding="4" cellspacing="4" style="color: black">';
            this.Message += '<tr>';
            this.Message += '<td colspan="2">';
            this.Message += '<span>';
            this.Message += 'Runtime Error';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Skript';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Skript + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Funktion';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Funktion + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Typ';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Typ + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Message';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Error.message + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Stack';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Error.stack + '</td>';
            this.Message += '</tr>';
            this.Message += '</table>';
            console.log(this.Message);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Error', 'ShowError', this.Debug.Typen.Component);
        }
    }
    ShowTransactionError(data) {
        try {
            let Errormessage = data.Errormessage;
            let Stack = data.Stack;
            let Commonscript = data.Commonscript;
            let Callingscript = data.Callingscript;
            let Callingfunction = data.Callingfunction;
            let Sqlliste = data.Sql;
            this.SendMailFinished = false;
            this.Message += '<table cellpadding="4" cellspacing="4">';
            this.Message += '<tr>';
            this.Message += '<td colspan="2">';
            this.Message += '<span>';
            this.Message += 'Transaction Error';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Common Script';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Commonscript + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Calling Script';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Callingscript + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Calling Function';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Callingfunction + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Error Message';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Errormessage + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Stack';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Stack + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Sql';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>';
            this.Message += '<table class="TablePaddingClass">';
            for (let Sql of Sqlliste) {
                this.Message += '<tr>';
                this.Message += '<td>';
                this.Message += Sql;
                this.Message += '</td>';
                this.Message += '</tr>';
            }
            this.Message += '</table>';
            this.Message += '</td>';
            this.Message += '</tr>';
            this.Message += '</table>';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Error', 'ShowTransactionError', this.Debug.Typen.Component);
        }
    }
    ShowSqlError(data) {
        try {
            let Errormessage = data.Errormessage;
            let Commonscript = data.Commonscript;
            let Callingscript = data.Callingscript;
            let Callingfunction = data.Callingfunction;
            let Sqlliste = data.Sql;
            this.SendMailFinished = false;
            this.Message += '<table cellpadding="4" cellspacing="4">';
            this.Message += '<tr>';
            this.Message += '<td colspan="2">';
            this.Message += '<span>';
            this.Message += 'Sql Error';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Common Script';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Commonscript + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Calling Script';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Callingscript + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td>';
            this.Message += '<span>';
            this.Message += 'Calling Function';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Callingfunction + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Error Message';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>' + Errormessage + '</td>';
            this.Message += '</tr>';
            this.Message += '<tr>';
            this.Message += '<td valign="top">';
            this.Message += '<span>';
            this.Message += 'Sql';
            this.Message += '</span>';
            this.Message += '</td>';
            this.Message += '<td>';
            this.Message += '<table class="TablePaddingClass">';
            for (let Sql of Sqlliste) {
                this.Message += '<tr>';
                this.Message += '<td>';
                this.Message += Sql;
                this.Message += '</td>';
                this.Message += '</tr>';
            }
            this.Message += '</table>';
            this.Message += '</td>';
            this.Message += '</tr>';
            this.Message += '</table>';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Error', 'ShowSqlError', this.Debug.Typen.Component);
        }
    }
    SendMail() {
        try {
            let Version = '';
            let Manufacturer = '';
            let Model = '';
            let Daten;
            let Url;
            let Message;
            Message = '';
            Message += '<table>';
            Message += '<tr>';
            Message += '<td>';
            Message += '<span>';
            Message += 'App Type';
            Message += '</span>';
            Message += '</td>';
            Message += '<td></td>';
            Message += '</tr>';
            Message += '<tr>';
            Message += '<td>';
            Message += '<span>';
            Message += 'App Version';
            Message += '</span>';
            Message += '</td>';
            Message += '</tr>';
            Message += '<tr>';
            Message += '<td>';
            Message += '<span>';
            Message += 'OS';
            Message += '</span>';
            Message += '</td>';
            Message += '<td>' + Version + '</td>';
            Message += '</tr>';
            Message += '<tr>';
            Message += '<td>';
            Message += '<span>';
            Message += 'Hersteller';
            Message += '</span>';
            Message += '</td>';
            Message += '<td>' + Manufacturer + '</td>';
            Message += '</tr>';
            Message += '<tr>';
            Message += '<td>';
            Message += '<span>';
            Message += 'GerÃ¤temodel';
            Message += '</span>';
            Message += '</td>';
            Message += '<td>' + Model + '</td>';
            Message += '</tr>';
            Message += '</table>';
            Message += this.Message;
            Daten = {
                'Message': Message,
                'Manufacturer': Manufacturer,
                'Model': Model,
                'Product': '',
                'Version': Version
            };
            /*
      
            Daten = JSON.stringify(Daten);
            Url   = this.Basics.SERVER_URL + "/errorlog/httprequest/updateerrorlog.php";
      
            this.Internetlibary.SendData(Url, Daten).then(() => {
      
              // success
      
              this.SendMailError    = false;
              this.SendMailFinished = true;
              this.SendMailResult   = 'Fehlerbericht wurde versendet.';
      
      
            }).catch((error) => {
      
              // error
      
              this.SendMailError    = true;
              this.SendMailFinished = true;
              this.SendMailResult   = 'Verbindungsfehler. Fehlerbericht wurde nicht versendet.';
      
            });
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'PageError', 'SendMail', this.Debug.Typen.Component);
        }
    }
    SendMailButtonCLicked() {
        try {
            this.SendMail();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'PageError', 'SendMailButtonCLicked', this.Debug.Typen.Component);
        }
    }
};
CommonErrorPage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider },
    { type: tools_1.ToolsProvider },
    { type: error_service_1.ErrorService },
    { type: loadinganimation_1.LoadingAnimationService }
];
CommonErrorPage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-error-page',
        template: __webpack_require__(/*! ./common-error.page.html?ngResource */ 68630),
        styles: [__webpack_require__(/*! ./common-error.page.scss?ngResource */ 45936)]
    })
], CommonErrorPage);
exports.CommonErrorPage = CommonErrorPage;


/***/ }),

/***/ 52679:
/*!*********************************************************!*\
  !*** ./src/app/pages/common-home/common-home.module.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonHomePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_home_page_1 = __webpack_require__(/*! ./common-home.page */ 98001);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const routes = [
    {
        path: '',
        component: common_home_page_1.CommonHomePage
    }
];
let CommonHomePageModule = class CommonHomePageModule {
};
CommonHomePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            page_header_module_1.PageHeaderModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            forms_1.ReactiveFormsModule,
            page_footer_module_1.PageFooterModule,
        ],
        declarations: [common_home_page_1.CommonHomePage]
    })
], CommonHomePageModule);
exports.CommonHomePageModule = CommonHomePageModule;


/***/ }),

/***/ 98001:
/*!*******************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonHomePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 67334);
const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 47314);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let CommonHomePage = class CommonHomePage {
    constructor(Basics, Debug, Tools, Const, fb, Pool, DBProjekte, AuthService, Menuservice) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.fb = fb;
        this.Pool = Pool;
        this.DBProjekte = DBProjekte;
        this.AuthService = AuthService;
        this.Menuservice = Menuservice;
        try {
            this.StandortMouseOver = false;
            this.MitarbeiterMouseOver = false;
            this.ProjekteMouseOver = false;
            this.FavoritenMouseOver = false;
            this.LogoutMouseOver = false;
            this.DebugMouseOver = false;
            this.EinstellungenMouseOver = false;
            this.PlayMouseOver = false;
            this.BackgroundimageURL = '../../../assets/background/' + lodash.random(1, 36, false).toString() + '.jpg';
            this.Backgroundinterval = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            let Nummer;
            this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Home;
            this.Backgroundinterval = window.setInterval(() => {
                Nummer = lodash.random(1, 36, false);
                this.BackgroundimageURL = '../../../assets/background/' + Nummer.toString() + '.jpg';
            }, 60000);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
            this.Backgroundinterval = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    FavoritChangedHandler(event) {
        try {
            this.DBProjekte.CurrentFavorit = lodash.find(this.Pool.Mitarbeiterdaten.Favoritenliste, { FavoritenID: event.detail.value });
            debugger;
            if (lodash.isUndefined(this.DBProjekte.CurrentFavorit))
                this.DBProjekte.CurrentFavorit = null;
            if (this.DBProjekte.CurrentFavorit === null) {
                this.Pool.Mitarbeitersettings.FavoritenID = null;
                this.DBProjekte.CurrentFavoritenlisteindex = null;
                this.Pool.Mitarbeitersettings.ProjektID = null;
            }
            else {
                this.Pool.Mitarbeitersettings.FavoritenID = this.DBProjekte.CurrentFavorit.FavoritenID;
                this.DBProjekte.CurrentFavoritenlisteindex = lodash.findIndex(this.Pool.Mitarbeiterdaten.Favoritenliste, { FavoritenID: this.DBProjekte.CurrentFavorit.FavoritenID });
                this.Pool.Mitarbeitersettings.ProjektID = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'FavoritChangedHandler', this.Debug.Typen.Page);
        }
    }
    DebugButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.DebugPage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'DebugButtonClicked', this.Debug.Typen.Page);
        }
    }
    EinstellungenButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.EinstellungenPage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'EinstellungenButtonClicked', this.Debug.Typen.Page);
        }
    }
    LogoutButtonClicked() {
        try {
            this.AuthService.Logout();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'LogoutButtonClicked', this.Debug.Typen.Page);
        }
    }
    StandorteButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.FiStandortelistePage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'StandorteButtonClicked', this.Debug.Typen.Page);
        }
    }
    MitarbeiterButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.FiMitarbeiterlistePage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'MitarbeiterButtonClicked', this.Debug.Typen.Page);
        }
    }
    ProjekteButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.PjListePage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'ProjekteButtonClicked', this.Debug.Typen.Page);
        }
    }
    FavoritenButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.PjFavoritenlistePage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'FavoritenButtonClicked', this.Debug.Typen.Page);
        }
    }
    PlayButtonClicked() {
        try {
            if (this.DBProjekte.CurrentFavorit !== null) {
                this.Menuservice.MainMenuebereich = this.Menuservice.MainMenuebereiche.Projekte;
                this.Menuservice.ProjekteMenuebereich = this.Menuservice.ProjekteMenuebereiche.LOPListe;
                this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'PlayButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetFavoritenlistehoehe() {
        try {
            let Anzahl = 0;
            if (this.Pool.Mitarbeiterdaten !== null) {
                Anzahl = this.Pool.Mitarbeiterdaten.Favoritenliste.length === 0 ? 2 : this.Pool.Mitarbeiterdaten.Favoritenliste.length;
            }
            return Anzahl * 50;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Home', 'GetFavoritenlistehoehe', this.Debug.Typen.Page);
        }
    }
};
CommonHomePage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: forms_1.FormBuilder },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: menue_service_1.MenueService }
];
CommonHomePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-home-page',
        template: __webpack_require__(/*! ./common-home.page.html?ngResource */ 84909),
        styles: [__webpack_require__(/*! ./common-home.page.scss?ngResource */ 16355)]
    })
], CommonHomePage);
exports.CommonHomePage = CommonHomePage;


/***/ }),

/***/ 62324:
/*!***********************************************************!*\
  !*** ./src/app/pages/common-login/common-login.module.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonLoginPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_login_page_1 = __webpack_require__(/*! ./common-login.page */ 40230);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const routes = [
    {
        path: '',
        component: common_login_page_1.CommonLoginPage
    }
];
let CommonLoginPageModule = class CommonLoginPageModule {
};
CommonLoginPageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            page_header_module_1.PageHeaderModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            forms_1.ReactiveFormsModule,
            page_footer_module_1.PageFooterModule,
        ],
        declarations: [common_login_page_1.CommonLoginPage]
    })
], CommonLoginPageModule);
exports.CommonLoginPageModule = CommonLoginPageModule;


/***/ }),

/***/ 40230:
/*!*********************************************************!*\
  !*** ./src/app/pages/common-login/common-login.page.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonLoginPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const loadinganimation_1 = __webpack_require__(/*! ../../services/loadinganimation/loadinganimation */ 73253);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 67334);
let CommonLoginPage = class CommonLoginPage {
    constructor(Basics, Debug, Tools, Const, fb, AuthService, LoadingAnimation) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.fb = fb;
        this.AuthService = AuthService;
        this.LoadingAnimation = LoadingAnimation;
        try {
            let Border = 2;
            this.OkBorder = Border + 'px solid green';
            this.RequiredBorder = Border + 'px solid orange';
            /*
            this.LoginForm = this.fb.group({
      
              Email:          [null, Validators.compose([Validators.required, Validators.email,    Validators.maxLength(255), Validators.minLength(8)])],
              Password:       [null, Validators.compose([Validators.required, Validators.maxLength(80), Validators.minLength(6)])],
            });
      
            this.LoginForm.controls['Email'].setValue('info@alinea-software.net');
            this.LoginForm.controls['Password'].setValue('Spekyland');
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Title = 'Anmeldung';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    OkButtonClicked() {
        try {
            this.SubmitLoginForm();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'OkButtonClicked', this.Debug.Typen.Page);
        }
    }
    SubmitLoginForm() {
        try {
            /*
      
            let data = this.LoginForm.value;
            let InputError: boolean;
            let Password: string;
            let Email: string;
            let Message: string;
      
      
            InputError = (
                !this.LoginForm.controls['Email'].valid ||
                !this.LoginForm.controls['Password'].valid);
      
            Email       = data.Email;
            Password    = data.Password;
      
            if(InputError) {
      
              this.Tools.ShowHinweisDialog('Login.Bitte_pruefen_Sie_die_erforderlichen_Angaben');
            }
            else {
      
              this.LoadingAnimation.ShowLoadingAnimation('Login.Titel', 'Login.Die_Anmeldedaten_werden_uebertragen').then(() => {
      
                this.AuthDatabase.Login(Email, Password).then((result: any) => {
      
                  this.LoadingAnimation.HideLoadingAnimation(true).then(() => {
      
                    this.Tools.SetRootPage(this.Constclass.Pages.StartseitePage).then(() => {
      
                    });
                  });
      
                }).catch((error: FirebaseError) => {
      
                  this.LoadingAnimation.HideLoadingAnimation(false).then(() => {
      
                    switch(error.code) {
      
                      case 'auth/user-not-found':
      
                        Message = 'Login.Benutzer_wurde_nicht_gefunden';
      
                        break;
      
                      case 'auth/wrong-password':
      
                        Message = 'Login.Das_angegebene_Passwort_ist_falsch';
      
                        break;
      
                      case 'auth/user-disabled':
      
                        Message = 'Login.Ihr_Benutzerkonto_wurde_deaktiviert';
      
                        break;
      
                      default:
      
                        Message = 'Leider_ist_ein_Fehler_aufgetreten_Btte_versuchen_Sie_es_spaeter_noch_einmal';
      
                        break;
                    }
      
                    this.Tools.ShowHinweisDialog(Message);
      
                  });
      
      
              });
      
              });
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'CheckForm', this.Debug.Typen.Page);
        }
    }
    NeuButtonClicked() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.RegistrierungPage).then(() => {
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'NeuButtonClicked', this.Debug.Typen.Page);
        }
    }
    CheckLoginForm() {
        try {
            return false; //  this.LoginForm.controls['Email'].valid && this.LoginForm.controls['Password'].valid && this.Internet.InternetAvailable();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'CheckLoginForm', this.Debug.Typen.Page);
        }
    }
    PasswortVergessenButtonClicked() {
        try {
            this.Tools.PushPage(this.Const.Pages.PasswortVergessenPage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'PasswortVergessenButtonClicked', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
};
CommonLoginPage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: forms_1.FormBuilder },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: loadinganimation_1.LoadingAnimationService }
];
CommonLoginPage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-login-page',
        template: __webpack_require__(/*! ./common-login.page.html?ngResource */ 2611),
        styles: [__webpack_require__(/*! ./common-login.page.scss?ngResource */ 81595)]
    })
], CommonLoginPage);
exports.CommonLoginPage = CommonLoginPage;


/***/ }),

/***/ 38246:
/*!***************************************************************************!*\
  !*** ./src/app/pages/common-registrierung/common-registrierung.module.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonRegistrierungPageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const common_registrierung_page_1 = __webpack_require__(/*! ./common-registrierung.page */ 55984);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 57763);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const routes = [
    {
        path: '',
        component: common_registrierung_page_1.CommonRegistrierungPage
    }
];
let CommonRegistrierungPageModule = class CommonRegistrierungPageModule {
};
CommonRegistrierungPageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            page_header_module_1.PageHeaderModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            forms_1.ReactiveFormsModule,
            page_footer_module_1.PageFooterModule,
            fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
        ],
        declarations: [common_registrierung_page_1.CommonRegistrierungPage]
    })
], CommonRegistrierungPageModule);
exports.CommonRegistrierungPageModule = CommonRegistrierungPageModule;


/***/ }),

/***/ 55984:
/*!*************************************************************************!*\
  !*** ./src/app/pages/common-registrierung/common-registrierung.page.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonRegistrierungPage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 47314);
const database_authentication_service_1 = __webpack_require__(/*! ../../services/database-authentication/database-authentication.service */ 67334);
const localstorage_1 = __webpack_require__(/*! ../../services/localstorage/localstorage */ 42117);
let CommonRegistrierungPage = class CommonRegistrierungPage {
    constructor(Basics, Debug, Tools, Const, fb, Pool, Auswahlservice, Menueservice, AuthService, Menuservice, StorageService, DB) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.fb = fb;
        this.Pool = Pool;
        this.Auswahlservice = Auswahlservice;
        this.Menueservice = Menueservice;
        this.AuthService = AuthService;
        this.Menuservice = Menuservice;
        this.StorageService = StorageService;
        this.DB = DB;
        try {
            this.ShowEditor = true;
            this.ShowAuswahl = false;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Const.NONE;
            // Test
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Login', 'constructor', this.Debug.Typen.Page);
        }
    }
    GetDialogTitel() {
        try {
            return 'Mitarbeiter registrieren';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'GetDialogTitel', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            let Liste;
            this.DB.CurrentMitarbeiter = this.DB.GetEmptyMitarbeiter();
            if (this.AuthService.ActiveUser !== null) {
                debugger;
                Liste = this.AuthService.ActiveUser.name.split(' ');
                this.DB.CurrentMitarbeiter.Email = this.AuthService.ActiveUser.username;
                if (Liste.length > 1) {
                    this.DB.CurrentMitarbeiter.Vorname = Liste[0];
                    this.DB.CurrentMitarbeiter.Name = Liste[1];
                }
                else {
                    this.DB.CurrentMitarbeiter.Name = Liste[0];
                }
            }
            else {
                this.Tools.ShowHinweisDialog('Keine Authentifizierung');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    FachbereichClickedHandler() {
        try {
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Fachbereich festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Fachbereich;
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Fachbereiche.unbekannt, SecoundColumn: '', Data: this.Const.Fachbereiche.unbekannt });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.Elektrotechnik, SecoundColumn: '', Data: this.Const.Fachbereiche.Elektrotechnik });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.HLS, SecoundColumn: '', Data: this.Const.Fachbereiche.HLS });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Heizung, SecoundColumn: '', Data: this.Const.Fachbereiche.Heizung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Lueftung, SecoundColumn: '', Data: this.Const.Fachbereiche.Lueftung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Sanitaer, SecoundColumn: '', Data: this.Const.Fachbereiche.Sanitaer });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Klimatisierung, SecoundColumn: '', Data: this.Const.Fachbereiche.Klimatisierung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.MSR, SecoundColumn: '', Data: this.Const.Fachbereiche.MSR });
            this.Auswahlliste.push({ Index: 3, FirstColumn: 'GeschÃ¤ftsfÃ¼hrung', SecoundColumn: '', Data: this.Const.Fachbereiche.Geschaeftsfuehrung });
            this.Auswahlliste.push({ Index: 4, FirstColumn: 'Assistenz', SecoundColumn: '', Data: this.Const.Fachbereiche.Assistenz });
            this.Auswahlindex = this.DB.Fachbereichsliste.indexOf(this.DB.CurrentMitarbeiter.Fachbereich);
            if (this.Auswahlindex === -1)
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'StandortClickedHandler', this.Debug.Typen.Page);
        }
    }
    StandortClickedHandler() {
        try {
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Ort, Data: Eintrag });
                Index++;
            }
            this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DB.CurrentMitarbeiter.StandortID });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'StandortClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            if (this.DB.CurrentMitarbeiter) {
                switch (this.Auswahltitel) {
                    case 'Standort festlegen':
                        return 'location-outline';
                        break;
                    case 'Fachbereich festlegen':
                        return 'hammer-outline';
                        break;
                    default:
                        return 'help-outline';
                        break;
                }
            }
            else
                return 'help-outline';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort:
                    this.DB.CurrentMitarbeiter.StandortID = data._id;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Fachbereich:
                    this.DB.CurrentMitarbeiter.Fachbereich = data;
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    EditorCancelButtonClicked(event) {
        try {
            this.ShowEditor = false;
            this.Menueservice.ShowLoginPage();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'EditorCancelButtonClicked', this.Debug.Typen.Page);
        }
    }
    EditorOkButtonClicked() {
        try {
            this.DB.RegisterMitarbeiter().then((result) => {
                this.Pool.Mitarbeiterdaten = result.Mitarbeiter;
                this.AuthService.SecurityToken = result.Token;
                this.StorageService.SetSecurityToken(this.AuthService.SecurityToken).then(() => {
                    this.Pool.Init().then(() => {
                        this.Menuservice.SetCurrentPage();
                    }).catch((error) => {
                        this.Tools.ShowHinweisDialog('Pool.Init: ' + error.message);
                    });
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Registrierung', 'EditorOkButtonClicked', this.Debug.Typen.Page);
        }
    }
};
CommonRegistrierungPage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: forms_1.FormBuilder },
    { type: database_pool_service_1.DatabasePoolService },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: menue_service_1.MenueService },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: menue_service_1.MenueService },
    { type: localstorage_1.LocalstorageService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService }
];
CommonRegistrierungPage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-registrierung-page',
        template: __webpack_require__(/*! ./common-registrierung.page.html?ngResource */ 83858),
        styles: [__webpack_require__(/*! ./common-registrierung.page.scss?ngResource */ 95222)]
    })
], CommonRegistrierungPage);
exports.CommonRegistrierungPage = CommonRegistrierungPage;


/***/ }),

/***/ 61187:
/*!*******************************************************************!*\
  !*** ./src/app/pages/common-testseite/common-testseite.module.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonTestseitePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const common_testseite_page_1 = __webpack_require__(/*! ./common-testseite.page */ 88326);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const routes = [
    {
        path: '',
        component: common_testseite_page_1.CommonTestseitePage
    }
];
let CommonTestseitePageModule = class CommonTestseitePageModule {
};
CommonTestseitePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
            router_1.RouterModule.forChild(routes),
            page_header_menu_module_1.PageHeaderMenuModule,
            page_footer_module_1.PageFooterModule,
        ],
        declarations: [common_testseite_page_1.CommonTestseitePage]
    })
], CommonTestseitePageModule);
exports.CommonTestseitePageModule = CommonTestseitePageModule;


/***/ }),

/***/ 88326:
/*!*****************************************************************!*\
  !*** ./src/app/pages/common-testseite/common-testseite.page.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonTestseitePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const menue_service_1 = __webpack_require__(/*! ../../services/menue/menue.service */ 47314);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
let CommonTestseitePage = class CommonTestseitePage {
    constructor(Menuservice, Debug) {
        this.Menuservice = Menuservice;
        this.Debug = Debug;
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Test', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
    }
};
CommonTestseitePage.ctorParameters = () => [
    { type: menue_service_1.MenueService },
    { type: debug_1.DebugProvider }
];
CommonTestseitePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'common-testseite-page',
        template: __webpack_require__(/*! ./common-testseite.page.html?ngResource */ 84422),
        styles: [__webpack_require__(/*! ./common-testseite.page.scss?ngResource */ 64774)]
    })
], CommonTestseitePage);
exports.CommonTestseitePage = CommonTestseitePage;


/***/ }),

/***/ 93297:
/*!*************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.module.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FIMitarbeiterlistePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const fi_mitarbeiterliste_1 = __webpack_require__(/*! ./fi-mitarbeiterliste */ 18659);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const fi_mitarbeiter_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.module */ 57763);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const routes = [
    {
        path: '',
        component: fi_mitarbeiterliste_1.FiMitarbeiterlistePage
    }
];
let FIMitarbeiterlistePageModule = class FIMitarbeiterlistePageModule {
};
FIMitarbeiterlistePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            alphabet_module_1.AlphabetModule,
            page_header_menu_module_1.PageHeaderMenuModule,
            fi_mitarbeiter_editor_module_1.FiMitarbeiterEditorModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
        ],
        declarations: [fi_mitarbeiterliste_1.FiMitarbeiterlistePage]
    })
], FIMitarbeiterlistePageModule);
exports.FIMitarbeiterlistePageModule = FIMitarbeiterlistePageModule;


/***/ }),

/***/ 18659:
/*!******************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiMitarbeiterlistePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
let FiMitarbeiterlistePage = class FiMitarbeiterlistePage {
    constructor(Basics, Debug, Tools, Const, DB, DBStandort, Auswahlservice, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.DB = DB;
        this.DBStandort = DBStandort;
        this.Auswahlservice = Auswahlservice;
        this.Pool = Pool;
        try {
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Mitarbeiteralphabet = [];
            this.Mitarbeiteralphabetauswahl = 'Alle';
            this.Mitarbeiterliste = [];
            this.Alphapetbreite = 44;
            this.Zusatzbuttonliste = [];
            this.HideAuswahl = true;
            this.Mitarbeiteralphabet = this.Standardalphabet;
            this.Mitarbeiterbuchstabenliste = [];
            this.Mitarbeiterfiltertext = '';
            this.Listenbreite = 0;
            this.ShowEditor = false;
            this.EditorValid = false;
            this.ShowAuswahl = false;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Const.NONE;
            this.ListeSubscription = null;
            this.StandortfilterSubsciption = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            if (this.ListeSubscription !== null) {
                this.ListeSubscription.unsubscribe();
                this.ListeSubscription = null;
            }
            if (this.StandortfilterSubsciption !== null) {
                this.StandortfilterSubsciption.unsubscribe();
                this.StandortfilterSubsciption = null;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.ListeSubscription = this.Pool.MitarbeiterlisteChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.StandortfilterSubsciption = this.DBStandort.StandortfilterChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ResetSucheButtonClicked() {
        try {
            this.Mitarbeiterfiltertext = '';
            this.Mitarbeiteralphabetauswahl = 'Alle';
            this.PrepareDaten();
            /*
            switch (this.Menueindex) {
      
              case 0:
      
      
                break;
      
              case 1:
      
                this.Lieferantenfiltertext         = '';
                this.Lieferantenfilter             = '';
                this.Lieferantenalphabetauswahl    = 'Alle';
                this.Suchleiste.value              = '';
      
                this.PrepareLieferantenDaten();
      
                break;
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ResetSucheButtonClicked', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            let Alphabetbreite = typeof this.Alphabetcomponent.Breite !== 'undefined' ? this.Alphabetcomponent.Breite : 40;
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.Listenbreite = this.Basics.Contentbreite - Alphabetbreite - 4;
            this.Alphabetcomponent.InitScreen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    MitrabeiterButtonClicked(eintrag) {
        try {
            this.DB.CurrentMitarbeiter = lodash.cloneDeep(eintrag);
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'MitrabeiterButtonClicked', this.Debug.Typen.Page);
        }
    }
    AddMitarbeiterButtonClicked() {
        try {
            this.DB.CurrentMitarbeiter = this.DB.GetEmptyMitarbeiter();
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'AddMitarbeiterButtonClicked', this.Debug.Typen.Page);
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Mitarbeiterfiltertext = '';
            this.Mitarbeiteralphabetauswahl = buchstabe;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'AlphabetClicked', this.Debug.Typen.Page);
        }
    }
    GetMitarbeiterAlphabetbuchstabe(value) {
        try {
            let Buchstabe = value.Name.substring(0, 1).toUpperCase();
            if (Buchstabe !== this.Lastletter) {
                this.Lastletter = Buchstabe;
                return Buchstabe;
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'GetMitarbeiterAlphabetbuchstabe', this.Debug.Typen.Page);
        }
    }
    PrepareDaten() {
        try {
            let Liste;
            let Merker;
            let Buchstabe;
            let Quelle;
            let Laenge;
            let TeilA;
            let TeilB;
            let TeilC;
            let Teillaenge;
            let PosA;
            let Solltext;
            let Suchtext;
            if (this.Pool.Mitarbeiterliste !== null) {
                Quelle = lodash.cloneDeep(this.Pool.Mitarbeiterliste);
                this.Lastletter = '';
                // Nach Namen sortieren
                Liste = lodash.cloneDeep(Quelle);
                // Standortfilter anwenden
                if (this.DBStandort.CurrentStandortfilter !== null) {
                    Liste = lodash.filter(Liste, (eintrag) => {
                        return eintrag.StandortID === this.DBStandort.CurrentStandortfilter._id;
                    });
                }
                Liste.sort((a, b) => {
                    if (a.Name < b.Name)
                        return -1;
                    if (a.Name > b.Name)
                        return 1;
                    return 0;
                });
                // Administrator aussortieren
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    Liste.push(Eintrag);
                }
                // Mitarbeiteralphabetauswahl Buchstaben festlegen
                if (Liste.length > 6) {
                    this.Mitarbeiteralphabet = ['Alle'];
                    for (let Eintrag of Liste) {
                        Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
                        if (this.Mitarbeiteralphabet.indexOf(Buchstabe) === -1)
                            this.Mitarbeiteralphabet.push(Buchstabe);
                    }
                }
                else {
                    this.Mitarbeiteralphabet = this.Standardalphabet;
                }
                // Alphabetfilter anwenden
                if (this.Mitarbeiteralphabetauswahl !== 'Alle') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Buchstabe = Eintrag.Name.substring(0, 1).toUpperCase();
                        Buchstabe = Buchstabe === 'Ã' ? 'A' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'O' : Buchstabe;
                        Buchstabe = Buchstabe === 'Ã' ? 'U' : Buchstabe;
                        if (this.Mitarbeiteralphabetauswahl === Buchstabe)
                            Liste.push(Eintrag);
                    }
                }
                // Suche Mitarbeiterfilter anwenden
                if (this.Mitarbeiterfiltertext !== '') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Solltext = this.Mitarbeiterfiltertext.toLowerCase();
                        Suchtext = Eintrag.Name.toLowerCase();
                        PosA = Suchtext.indexOf(Solltext);
                        if (PosA !== -1) {
                            Laenge = Eintrag.Name.length;
                            Teillaenge = Solltext.length;
                            TeilA = Eintrag.Name.substr(0, PosA);
                            TeilB = Eintrag.Name.substr(PosA, Teillaenge);
                            Teillaenge = Laenge - Teillaenge - PosA;
                            TeilC = Eintrag.Name.substr(Laenge - Teillaenge, Teillaenge);
                            Eintrag.Filtered = true;
                            Eintrag.Text_A = TeilA;
                            Eintrag.Text_B = TeilB;
                            Eintrag.Text_C = TeilC;
                            Liste.push(Eintrag);
                        }
                    }
                }
                // Buchstabenliste festlegen
                this.Mitarbeiterbuchstabenliste = [];
                for (let Eintrag of Liste) {
                    this.Mitarbeiterbuchstabenliste.push(this.GetMitarbeiterAlphabetbuchstabe(Eintrag));
                }
                this.Mitarbeiterliste = lodash.cloneDeep(Liste);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'PrepareDaten', this.Debug.Typen.Page);
        }
    }
    EditorValidChanged(event) {
        try {
            this.EditorValid = event;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'EditorValidChanged', this.Debug.Typen.Page);
        }
    }
    GetDialogTitel() {
        try {
            if (this.DB.CurrentMitarbeiter !== null) {
                return this.DB.CurrentMitarbeiter._id === null ? 'Neuen Mitarbeiter anlegen' : 'Mitarbeiter bearbeiten';
            }
            else {
                return 'Unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'GetDialogTitel', this.Debug.Typen.Page);
        }
    }
    StandortClickedHandler() {
        try {
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Ort, Data: Eintrag });
                Index++;
            }
            this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DB.CurrentMitarbeiter.StandortID });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'StandortClickedHandler', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Standort:
                    this.DB.CurrentMitarbeiter.StandortID = data._id;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Fachbereich:
                    this.DB.CurrentMitarbeiter.Fachbereich = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Standortfilter:
                    this.DBStandort.CurrentStandortfilter = data;
                    this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : this.Const.NONE;
                    this.DB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
                        this.DBStandort.StandortfilterChanged.emit();
                    }).catch((error) => {
                        this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
                    });
                    this.PrepareDaten();
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    FachbereichClickedHandler() {
        try {
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Fachbereich festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Editor_Fachbereich;
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Fachbereiche.unbekannt, SecoundColumn: '', Data: this.Const.Fachbereiche.unbekannt });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.Elektrotechnik, SecoundColumn: '', Data: this.Const.Fachbereiche.Elektrotechnik });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.HLS, SecoundColumn: '', Data: this.Const.Fachbereiche.HLS });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Heizung, SecoundColumn: '', Data: this.Const.Fachbereiche.Heizung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Lueftung, SecoundColumn: '', Data: this.Const.Fachbereiche.Lueftung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Sanitaer, SecoundColumn: '', Data: this.Const.Fachbereiche.Sanitaer });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Klimatisierung, SecoundColumn: '', Data: this.Const.Fachbereiche.Klimatisierung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.MSR, SecoundColumn: '', Data: this.Const.Fachbereiche.MSR });
            this.Auswahlindex = this.DB.Fachbereichsliste.indexOf(this.DB.CurrentMitarbeiter.Fachbereich);
            if (this.Auswahlindex === -1)
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'StandortClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            if (this.DB.CurrentMitarbeiter || this.Pool.Mitarbeiterdaten) {
                switch (this.Auswahltitel) {
                    case 'Standort festlegen':
                        return 'location-outline';
                        break;
                    case 'Fachbereich festlegen':
                        return 'hammer-outline';
                        break;
                    case 'Standortfilter festlegen':
                        return 'location-outline';
                        break;
                    default:
                        return 'help-outline';
                        break;
                }
            }
            else
                return 'help-outline';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    SucheChanged(text) {
        try {
            this.Mitarbeiteralphabetauswahl = 'Alle';
            this.Mitarbeiterfiltertext = text;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'SucheChanged', this.Debug.Typen.Page);
        }
    }
    StandortFilterClickedHandler() {
        try {
            let Index = 0;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Mitarbeiter_Liste_Standortfilter;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standortfilter festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: Index, FirstColumn: '----', SecoundColumn: 'kein Filter', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Ort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.CurrentStandortfilter === null) {
                this.Auswahlindex = 0;
            }
            else {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.CurrentStandortfilter._id });
                this.Auswahlindex++;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiterliste', 'StandortFilterClickedHandler', this.Debug.Typen.Page);
        }
    }
};
FiMitarbeiterlistePage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: database_pool_service_1.DatabasePoolService }
];
FiMitarbeiterlistePage.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['Alphabet', { static: false },] }],
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
FiMitarbeiterlistePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'fi-mitarbeiterliste-page',
        template: __webpack_require__(/*! ./fi-mitarbeiterliste.html?ngResource */ 21335),
        styles: [__webpack_require__(/*! ./fi-mitarbeiterliste.scss?ngResource */ 83146)]
    })
], FiMitarbeiterlistePage);
exports.FiMitarbeiterlistePage = FiMitarbeiterlistePage;


/***/ }),

/***/ 89048:
/*!*********************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.module.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiStandortelistePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const fi_standorteliste_1 = __webpack_require__(/*! ./fi-standorteliste */ 73948);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const fi_standort_editor_module_1 = __webpack_require__(/*! ../../components-page/fi-standort-editor/fi-standort-editor.module */ 50339);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_modal_keeper_module_1 = __webpack_require__(/*! ../../components/page-modal-keeper/page-modal-keeper.module */ 85267);
const routes = [
    {
        path: '',
        component: fi_standorteliste_1.FiStandortelistePage
    }
];
let FiStandortelistePageModule = class FiStandortelistePageModule {
};
FiStandortelistePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            forms_1.FormsModule,
            forms_1.ReactiveFormsModule,
            angular_1.IonicModule,
            router_1.RouterModule.forChild(routes),
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            alphabet_module_1.AlphabetModule,
            fi_standort_editor_module_1.FiStandortEditorModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            page_header_menu_module_1.PageHeaderMenuModule,
            page_modal_keeper_module_1.PageModalKeepermodule
        ],
        declarations: [fi_standorteliste_1.FiStandortelistePage]
    })
], FiStandortelistePageModule);
exports.FiStandortelistePageModule = FiStandortelistePageModule;


/***/ }),

/***/ 73948:
/*!**************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FiStandortelistePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
let FiStandortelistePage = class FiStandortelistePage {
    constructor(Basics, Debug, Tools, Const, DB, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.Const = Const;
        this.DB = DB;
        this.Pool = Pool;
        try {
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Standortealphabet = [];
            this.Standortealphabetauswahl = 'Alle';
            this.Standorteliste = [];
            this.Zusatzbuttonliste = [];
            this.HideAuswahl = true;
            this.Inputtimer = null;
            this.Alphapetbreite = 44;
            this.Standortefilter = '';
            this.Standortealphabet = this.Standardalphabet;
            this.Standortebuchstabenliste = [];
            this.Listenbreite = 0;
            this.ShowEditor = false;
            this.EditorValid = false;
            this.ListeSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            this.ListeSubscription.unsubscribe();
            this.ListeSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.ListeSubscription = this.Pool.StandortelisteChanged.subscribe(() => {
                this.PrepareDaten();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            let Alphabetbreite = typeof this.Alphabetcomponent.Breite !== 'undefined' ? this.Alphabetcomponent.Breite : 40;
            this.Listenbreite = this.Basics.Contentbreite - Alphabetbreite - 4;
            this.PrepareDaten();
            this.Alphabetcomponent.InitScreen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    StandortButtonClicked(eintrag) {
        try {
            this.DB.CurrentStandort = lodash.cloneDeep(eintrag);
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'MitrabeiterButtonClicked', this.Debug.Typen.Page);
        }
    }
    AddStandorteButtonClicked() {
        try {
            this.DB.CurrentStandort = this.DB.GetEmptyStandort();
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'AddStandorteButtonClicked', this.Debug.Typen.Page);
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Standortefiltertext = '';
            this.Standortefilter = '';
            this.Standortealphabetauswahl = buchstabe;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'AlphabetClicked', this.Debug.Typen.Page);
        }
    }
    GetStandorteAlphabetbuchstabe(value) {
        try {
            let Buchstabe = value.Ort.substring(0, 1).toUpperCase();
            if (Buchstabe !== this.Lastletter) {
                this.Lastletter = Buchstabe;
                return Buchstabe;
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'GetStandorteAlphabetbuchstabe', this.Debug.Typen.Page);
        }
    }
    PrepareDaten() {
        try {
            let Liste;
            let Merker;
            let Buchstabe;
            let Quelle;
            let Laenge;
            let TeilA;
            let TeilB;
            let TeilC;
            let Teillaenge;
            let PosA;
            let Solltext;
            let Suchtext;
            if (this.Pool.Standorteliste !== null) {
                Quelle = lodash.cloneDeep(this.Pool.Standorteliste);
                this.Lastletter = '';
                // Nach Namen sortieren
                Liste = lodash.cloneDeep(Quelle);
                Liste.sort((a, b) => {
                    if (a.Ort < b.Ort)
                        return -1;
                    if (a.Ort > b.Ort)
                        return 1;
                    return 0;
                });
                // Standortfilter anwenden
                if (this.DB.CurrentStandortfilter !== null) {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Liste.push(Eintrag);
                    }
                }
                // Standortealphabetauswahl Buchstaben festlegen
                if (Liste.length > 6) {
                    this.Standortealphabet = ['Alle'];
                    for (let Eintrag of Liste) {
                        Buchstabe = Eintrag.Ort.substring(0, 1).toUpperCase();
                        if (this.Standortealphabet.indexOf(Buchstabe) === -1)
                            this.Standortealphabet.push(Buchstabe);
                    }
                }
                else {
                    this.Standortealphabet = this.Standardalphabet;
                }
                // Alphabetfilter anwenden
                if (this.Standortealphabetauswahl !== 'Alle') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Buchstabe = Eintrag.Ort.substring(0, 1).toUpperCase();
                        if (this.Standortealphabetauswahl === Buchstabe)
                            Liste.push(Eintrag);
                    }
                }
                // Suche Standortefilter anwenden
                if (this.Standortefilter !== '') {
                    Merker = lodash.cloneDeep(Liste);
                    Liste = [];
                    for (let Eintrag of Merker) {
                        Solltext = this.Standortefilter.toLowerCase();
                        Suchtext = Eintrag.Ort.toLowerCase();
                        PosA = Suchtext.indexOf(Solltext);
                        if (PosA !== -1) {
                            Laenge = Eintrag.Ort.length;
                            Teillaenge = Solltext.length;
                            TeilA = Eintrag.Ort.substr(0, PosA);
                            TeilB = Eintrag.Ort.substr(PosA, Teillaenge);
                            Teillaenge = Laenge - Teillaenge - PosA;
                            TeilC = Eintrag.Ort.substr(Laenge - Teillaenge, Teillaenge);
                            Eintrag.Filtered = true;
                            Eintrag.Text_A = TeilA;
                            Eintrag.Text_B = TeilB;
                            Eintrag.Text_C = TeilC;
                            Liste.push(Eintrag);
                        }
                    }
                }
                // Buchstabenliste festlegen
                this.Standortebuchstabenliste = [];
                for (let Eintrag of Liste) {
                    this.Standortebuchstabenliste.push(this.GetStandorteAlphabetbuchstabe(Eintrag));
                }
                this.Standorteliste = lodash.cloneDeep(Liste);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'PrepareDaten', this.Debug.Typen.Page);
        }
    }
    EditorValidChanged(event) {
        try {
            this.EditorValid = event;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'EditorValidChanged', this.Debug.Typen.Page);
        }
    }
    GetDialogTitel() {
        try {
            if (this.DB.CurrentStandort !== null) {
                return this.DB.CurrentStandort._id === null ? 'Neuen Standort anlegen' : 'Standort bearbeiten';
            }
            else {
                return 'Unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'GetDialogTitel', this.Debug.Typen.Page);
        }
    }
    SucheChangedHandler(text) {
        try {
            this.Standortefiltertext = text;
            this.Standortefilter = this.Standortefiltertext;
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Standorteliste', 'SucheChangedHandler', this.Debug.Typen.Page);
        }
    }
};
FiStandortelistePage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: const_1.ConstProvider },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_pool_service_1.DatabasePoolService }
];
FiStandortelistePage.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['Alphabet', { static: false },] }],
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
FiStandortelistePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'fi-standorteliste-page',
        template: __webpack_require__(/*! ./fi-standorteliste.html?ngResource */ 41769),
        styles: [__webpack_require__(/*! ./fi-standorteliste.scss?ngResource */ 28019)]
    })
], FiStandortelistePage);
exports.FiStandortelistePage = FiStandortelistePage;


/***/ }),

/***/ 19045:
/*!*********************************************************************!*\
  !*** ./src/app/pages/pj-aufgaben-liste/pj-aufgaben-liste.module.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjAufgabenListePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 45601);
const pj_beteiligten_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.module */ 15438);
const pj_aufgaben_liste_page_1 = __webpack_require__(/*! ./pj-aufgaben-liste.page */ 12441);
const pj_protokoll_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-protokoll-editor/pj-protokoll-editor.module */ 83722);
const pj_projektpunkt_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.module */ 38266);
const pj_kostengruppen_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.module */ 11214);
const pj_gebaeude_raumauswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.module */ 1579);
const pj_protokoll_listefilter_module_1 = __webpack_require__(/*! ../../components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.module */ 66754);
const pj_projektpunkteliste_module_1 = __webpack_require__(/*! ../../components/pj-projektpunkteliste/pj-projektpunkteliste.module */ 12375);
const pj_aufgaben_listefilter_module_1 = __webpack_require__(/*! ../../components-page/pj-aufgaben-listefilter/pj-aufgaben-listefilter.module */ 10022);
const pj_favoriten_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-favoriten-auswahl/pj-favoriten-auswahl.module */ 64877);
const pj_meinewoche_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-meinewoche-editor/pj-meinewoche-editor.module */ 75095);
const pj_projektpunkt_statusdate_picker_module_1 = __webpack_require__(/*! ../../components-page/pj-projektpunkt-statusdate-picker/pj-projektpunkt-statusdate-picker.module */ 10843);
const pj_projektpunkt_date_kw_picker_module_1 = __webpack_require__(/*! ../../components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.module */ 47121);
const routes = [
    {
        path: '',
        component: pj_aufgaben_liste_page_1.PjAufgabenListePage
    }
];
let PjAufgabenListePageModule = class PjAufgabenListePageModule {
};
PjAufgabenListePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
            router_1.RouterModule.forChild(routes),
            page_header_menu_module_1.PageHeaderMenuModule,
            page_footer_module_1.PageFooterModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule,
            pj_beteiligten_auswahl_module_1.PjBeteiligtenAuswahlModule,
            pj_protokoll_editor_module_1.PjProtokollEditorModule,
            pj_projektpunkt_editor_module_1.PjProjektpunktEditorModule,
            pj_kostengruppen_auswahl_module_1.PjKostengruppenAuswahlModule,
            pj_gebaeude_raumauswahl_module_1.PjGebaeudeRaumauswahlModule,
            pj_protokoll_listefilter_module_1.PjProtokollListefilterModule,
            pj_projektpunkteliste_module_1.PjProjektpunktelisteModule,
            pj_projektpunkt_statusdate_picker_module_1.PjProjektpunktStatusdatePickerModule,
            pj_aufgaben_listefilter_module_1.PjAufgabenListefilterModule,
            pj_favoriten_auswahl_module_1.PjFavoritenAuswahlModule,
            pj_meinewoche_editor_module_1.PjMeinewocheEditorModule,
            pj_projektpunkt_statusdate_picker_module_1.PjProjektpunktStatusdatePickerModule,
            pj_projektpunkt_date_kw_picker_module_1.PjProjektpunktDateKwPickerModule,
        ],
        declarations: [pj_aufgaben_liste_page_1.PjAufgabenListePage],
        exports: [
            pj_aufgaben_liste_page_1.PjAufgabenListePage
        ]
    })
], PjAufgabenListePageModule);
exports.PjAufgabenListePageModule = PjAufgabenListePageModule;


/***/ }),

/***/ 12441:
/*!*******************************************************************!*\
  !*** ./src/app/pages/pj-aufgaben-liste/pj-aufgaben-liste.page.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjAufgabenListePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
let PjAufgabenListePage = class PjAufgabenListePage {
    constructor(Displayservice, Basics, Auswahlservice, DBProjektpunkte, DBStandort, DBProtokolle, DBProjekte, DBMitarbeiter, Const, Pool, Debug) {
        this.Displayservice = Displayservice;
        this.Basics = Basics;
        this.Auswahlservice = Auswahlservice;
        this.DBProjektpunkte = DBProjektpunkte;
        this.DBStandort = DBStandort;
        this.DBProtokolle = DBProtokolle;
        this.DBProjekte = DBProjekte;
        this.DBMitarbeiter = DBMitarbeiter;
        this.Const = Const;
        this.Pool = Pool;
        this.Debug = Debug;
        this.Datenursprungsvarianten = {
            MeinTag: 'MeinTag',
            MeineWoche: 'MeineWoche',
            Meilensteine: 'Meilenstein',
            Favoritenprojekt: 'Favoritenprojekt'
        };
        try {
            this.ShowProtokollEditor = false;
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.Auswahltitel = '';
            this.ShowAuswahl = false;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Standort;
            this.ShowMitarbeiterauswahl = false;
            this.ShowBeteiligteauswahl = false;
            this.ShowProjektpunktEditor = false;
            this.ShowKostengruppenauswahl = false;
            this.ShowRaumauswahl = false;
            this.ShowZeitspannefilter = false;
            this.Dialoghoehe = 400;
            this.Dialogbreite = 600;
            this.KostenDialogbreite = 1200;
            this.KostenDialoghoehe = 500;
            this.DialogPosY = 60;
            this.AuswahlIDliste = [];
            this.Restarbeitszahl = 0;
            this.FavoritenProjektpunkteliste = [];
            this.Meintagprojektpunkteliste = [];
            this.Meilensteineprojektpunkteliste = [];
            this.StrukturDialogbreite = 1260;
            this.StrukturDialoghoehe = 800;
            this.MeinTagProjektliste = [];
            this.MeilensteineProjektliste = [];
            this.Auswahlhoehe = 200;
            this.ShowDateStatusPicker = false;
            this.Datenursprung = null;
            this.MitarbeiterSubscription = null;
            this.ProtokollSubscription = null;
            this.ShowFavoritenauswahl = false;
            this.ShowMeinewocheEditor = false;
            this.Listenhoehe = 0;
            this.Minutenhoehe = 0;
            this.Tagbreite = 0;
            this.Headerhoehe = 0;
            this.ShowDateKkPicker = false;
            this.Heute = (0, moment_1.default)().set({ date: 6, month: 1, year: 2023, hour: 7, minute: 0, second: 0 }).locale('de'); // Month ist Zero based
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'constructor', this.Debug.Typen.Page);
        }
    }
    GetProjektpunthoehe(Punkt) {
        try {
            let Hoehe;
            Hoehe = Punkt.Minuten * this.Minutenhoehe;
            return Hoehe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GetProjektpunthoehe', this.Debug.Typen.Page);
        }
    }
    InitScreen() {
        try {
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.DialogPosY = 60;
            this.Dialoghoehe = this.Basics.Contenthoehe - this.DialogPosY - 80 - 80;
            this.Dialogbreite = 850;
            this.Headerhoehe = 30;
            this.Listenhoehe = this.Basics.InnerContenthoehe;
            this.Minutenhoehe = this.Listenhoehe / (8 * 60);
            this.Tagbreite = (this.Basics.Contentbreite - 4) / 5;
            this.StrukturDialoghoehe = this.Dialoghoehe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'InitScreen', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.DatenLoadedSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
                this.InitScreen();
                this.PrepareDaten();
            });
            this.SettingsSubscription = this.Pool.MitarbeitersettingsChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.ProjektpunktSubscription = this.Pool.ProjektpunktChanged.subscribe(() => {
                this.UpdateDaten();
            });
            this.MitarbeiterSubscription = this.Pool.MitarbeiterdatenChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.ProtokollSubscription = this.Pool.ProtokolllisteChanged.subscribe(() => {
                this.PrepareDaten();
            });
            this.Displayservice.ResetDialogliste();
            this.PrepareDaten();
            this.Auswahlhoehe = this.Basics.Contenthoehe - 400;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'OnInit', this.Debug.Typen.Page);
        }
    }
    GetProjektpunktAufgabentext(Punkt) {
        try {
            let Projekt = this.DBProjekte.GetProjektByID(Punkt.ProjektID);
            let Text = Punkt.Aufgabe.replace(/<p[^>]*>/g, '').replace(/<\/p>/g, '<br />');
            Text = '<b>' + Projekt.Projektkurzname + ': </b>' + Text;
            return Text;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GetProjektpunktAufgabentext', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            this.DatenLoadedSubscription.unsubscribe();
            this.ProjektpunktSubscription.unsubscribe();
            this.SettingsSubscription.unsubscribe();
            this.MitarbeiterSubscription.unsubscribe();
            this.ProtokollSubscription.unsubscribe();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.InitScreen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Status:
                    this.DBProjektpunkte.CurrentProjektpunkt.Status = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Meintageintrag_Status:
                    this.DBProjektpunkte.CurrentProjektpunkt.Status = data;
                    this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt);
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Fachbereich:
                    this.DBProjektpunkte.CurrentProjektpunkt.Fachbereich = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Fortschritt:
                    this.DBProjektpunkte.CurrentProjektpunkt.Fortschritt = data;
                    this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt);
                    break;
                default:
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    BeteiligteauswahlOkButtonClicked(idliste) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_ZustaendigExtern:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeExternIDListe = idliste;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_ZustaendigExtern:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeExternIDListe = idliste;
                    this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt);
                    break;
            }
            this.ShowBeteiligteauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'BeteiligteauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Editor_Leistungsphase:
                    return 'stats-chart-outline';
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Filter_Leistungsphase:
                    return 'filter-circle-outline';
                    break;
                default:
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    MitarebiterStandortfilterClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_Standortfilter;
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahlhoehe = 200;
            this.Auswahlliste.push({ Index: Index, FirstColumn: 'kein Filter', SecoundColumn: '', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Standort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.MitarbeiterauswahlStandortfilter !== null) {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.MitarbeiterauswahlStandortfilter._id });
            }
            else
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    MitarbeiterauswahlOkButtonClicked(idliste) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_ZustaendigIntern:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeInternIDListe = idliste;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_ZustaendigIntern:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeInternIDListe = idliste;
                    this.DBProjektpunkte.UpdateProjektpunkt(this.DBProjektpunkte.CurrentProjektpunkt);
                    break;
            }
            this.ShowMitarbeiterauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetProjektpunkteditorTitel() {
        try {
            return this.DBProjektpunkte.CurrentProjektpunkt._id !== null ? 'Aufgabe bearbeiten' : 'Neue Aufgabe erstellen';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GetProjektpunkteditorTitel', this.Debug.Typen.Page);
        }
    }
    SetProjektindexAndUrsprung(index, ursprung) {
        try {
            this.Datenursprung = ursprung;
            switch (this.Datenursprung) {
                case this.Datenursprungsvarianten.Favoritenprojekt:
                    // ist Ã¼ber DBProjekte.CurrentFavoritprojektindex gesetzt
                    break;
                case this.Datenursprungsvarianten.MeinTag:
                    this.MeinTagProjektindex = index;
                    this.DBProjekte.CurrentProjekt = this.MeinTagProjektliste[index];
                    break;
                case this.Datenursprungsvarianten.Meilensteine:
                    this.MeilensteineProjektindex = index;
                    this.DBProjekte.CurrentProjekt = this.MeinTagProjektliste[index];
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'SetProjektindexAndUrsprung', this.Debug.Typen.Page);
        }
    }
    FortschrittClickedHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBProjektpunkte.CurrentProjektpunkt = projektpunkt;
            this.Auswahltitel = 'Fortschritt';
            this.Auswahlhoehe = 360;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Fortschritt;
            this.Auswahltitel = 'Fortschritt';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: '0%', SecoundColumn: '', Data: 0 });
            this.Auswahlliste.push({ Index: 1, FirstColumn: '10%', SecoundColumn: '', Data: 10 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: '20%', SecoundColumn: '', Data: 20 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: '30%', SecoundColumn: '', Data: 30 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: '40%', SecoundColumn: '', Data: 40 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: '50%', SecoundColumn: '', Data: 50 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: '60%', SecoundColumn: '', Data: 60 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: '70%', SecoundColumn: '', Data: 70 });
            this.Auswahlliste.push({ Index: 8, FirstColumn: '80%', SecoundColumn: '', Data: 80 });
            this.Auswahlliste.push({ Index: 9, FirstColumn: '90%', SecoundColumn: '', Data: 90 });
            this.Auswahlliste.push({ Index: 10, FirstColumn: '100%', SecoundColumn: '', Data: 100 });
            /*
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.DB.Leistungsphasenvarianten.LPH1, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH1 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.DB.Leistungsphasenvarianten.LPH2, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH2 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.DB.Leistungsphasenvarianten.LPH3, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH3 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.DB.Leistungsphasenvarianten.LPH4, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH4 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: this.DB.Leistungsphasenvarianten.LPH5, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH5 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: this.DB.Leistungsphasenvarianten.LPH6, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH6 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: this.DB.Leistungsphasenvarianten.LPH7, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH7 });
            this.Auswahlliste.push({ Index: 8, FirstColumn: this.DB.Leistungsphasenvarianten.LPH8, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH8 });
             */
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: projektpunkt.Fortschritt });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LOP Liste', 'FortschrittClickedHandler', this.Debug.Typen.Page);
        }
    }
    AddAufgabeClickedHandler(projektindex, ursprung) {
        try {
            let Anzahl = this.Pool.Projektpunkteliste[this.DBProjekte.CurrentProjekt.Projektkey].length + 1;
            let Projektpunkt = this.DBProjektpunkte.GetNewProjektpunkt(this.DBProjekte.CurrentProjekt, Anzahl);
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            /*
            if(ursprung === this.Datenursprungsvarianten.MeinTag) {
      
              Projektpunkt.Meintag       = true;
              Projektpunkt.Meintagstatus = 'ON';
            }
             */
            this.ShowProjektpunktEditor = true;
            this.DBProjektpunkte.CurrentProjektpunkt = Projektpunkt;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'AddAufgabeClickedHandler', this.Debug.Typen.Page);
        }
    }
    EditorStatusClickedHandler() {
        try {
            this.Auswahltitel = 'Stataus festlegen';
            this.Auswahlliste = [];
            this.Auswahlhoehe = 200;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Status;
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Projektpunktstatustypen.Offen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Offen.Name });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Projektpunktstatustypen.Bearbeitung.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Bearbeitung.Name });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Projektpunktstatustypen.Geschlossen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Geschlossen.Name });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.Const.Projektpunktstatustypen.Ruecklauf.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Ruecklauf.Name });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.Const.Projektpunktstatustypen.Festlegung.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Festlegung.Name });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: this.DBProjektpunkte.CurrentProjektpunkt.Status });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'EditorStatusClickedHandler', this.Debug.Typen.Page);
        }
    }
    FachbereichClickedHandler() {
        this.Auswahltitel = 'Stataus festlegen';
        this.Auswahlliste = [];
        this.Auswahlhoehe = 200;
        this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Fachbereich;
        this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Fachbereiche.unbekannt, SecoundColumn: '', Data: this.Const.Fachbereiche.unbekannt });
        this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.Elektrotechnik, SecoundColumn: '', Data: this.Const.Fachbereiche.Elektrotechnik });
        this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.HLS, SecoundColumn: '', Data: this.Const.Fachbereiche.HLS });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Heizung, SecoundColumn: '', Data: this.Const.Fachbereiche.Heizung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Lueftung, SecoundColumn: '', Data: this.Const.Fachbereiche.Lueftung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Sanitaer, SecoundColumn: '', Data: this.Const.Fachbereiche.Sanitaer });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Klimatisierung, SecoundColumn: '', Data: this.Const.Fachbereiche.Klimatisierung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.MSR, SecoundColumn: '', Data: this.Const.Fachbereiche.MSR });
        this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: this.DBProjektpunkte.CurrentProjektpunkt.Fachbereich });
        this.ShowAuswahl = true;
    }
    catch(error) {
        this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'FachbereichClickedHandler', this.Debug.Typen.Page);
    }
    KostengruppeClickedHandler() {
        try {
            this.ShowKostengruppenauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, '', 'KostengruppeClickedHandler', this.Debug.Typen.Page);
        }
    }
    GebaeudeteilClickedHandler() {
        try {
            this.ShowRaumauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GebaeudeteilClickedHandler', this.Debug.Typen.Page);
        }
    }
    ZeitspanneFilterClickedHandler() {
        try {
            this.ShowZeitspannefilter = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ZeitspanneFilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetDatum() {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            let Text = Heute.format('dddd, DD.MM.YYYY') + ' / KW ' + Heute.isoWeek();
            return Text;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'GetDatum', 'function', this.Debug.Typen.Page);
        }
    }
    EditorZustaendigInternHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeInternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_ZustaendigIntern;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'EditorZustaendigInternHandler', this.Debug.Typen.Page);
        }
    }
    ListeZustaendigInternHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projektpunkt);
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeInternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_ZustaendigIntern;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ListeZustaendigInternHandler', this.Debug.Typen.Page);
        }
    }
    GetBeteiligtenauswahlTitel() {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_ZustaendigExtern:
                    return 'ZustÃ¤ndigkeit extern festlegen';
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_ZustaendigExtern:
                    return 'ZustÃ¤ndigkeit extern festlegen';
                    break;
                default:
                    return 'unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'GetBeteiligtenauswahlTitel', this.Debug.Typen.Page);
        }
    }
    EditorZustaendigExternHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeExternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_ZustaendigExtern;
            this.ShowBeteiligteauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'EditorZustaendigExternHandler', this.Debug.Typen.Page);
        }
    }
    UpdateDaten() {
        try {
            let Index;
            let Anzahl;
            switch (this.Datenursprung) {
                case this.Datenursprungsvarianten.Meilensteine:
                    Index = lodash.findIndex(this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex], { _id: this.DBProjektpunkte.CurrentProjektpunkt._id });
                    if (Index !== -1) {
                        console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" updated.');
                        this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex][Index] = this.DBProjektpunkte.CurrentProjektpunkt;
                    }
                    else {
                        /*
                        if(this.DBProjektpunkte.CurrentProjektpunkt.Meintag === true) {
            
                          this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex].push(this.DBProjektpunkte.CurrentProjektpunkt);
            
                          console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" hinzugefÃ¼gt.');
                        }
                         */
                    }
                    if (this.DBProjektpunkte.CurrentProjektpunkt.Deleted === true) {
                        this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex] = lodash.filter(this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex], (currentpunkt) => {
                            return currentpunkt.Deleted === false;
                        });
                    }
                    Anzahl = this.DBProjektpunkte.CountProjektpunkte(this.Meilensteineprojektpunkteliste[this.MeilensteineProjektindex], true);
                    this.DBProjekte.SetProjektpunkteanzahl(Anzahl, this.MeilensteineProjektliste[this.MeilensteineProjektindex].Projektkey);
                    break;
                case this.Datenursprungsvarianten.MeinTag:
                    Index = lodash.findIndex(this.Meintagprojektpunkteliste[this.MeinTagProjektindex], { _id: this.DBProjektpunkte.CurrentProjektpunkt._id });
                    if (Index !== -1) {
                        console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" updated.');
                        this.Meintagprojektpunkteliste[this.MeinTagProjektindex][Index] = this.DBProjektpunkte.CurrentProjektpunkt;
                    }
                    else {
                        /*
                        if(this.DBProjektpunkte.CurrentProjektpunkt.Meintag === true) {
            
                          this.Meintagprojektpunkteliste[this.MeinTagProjektindex].push(this.DBProjektpunkte.CurrentProjektpunkt);
            
                          console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" hinzugefÃ¼gt.');
                        }
            
                         */
                    }
                    if (this.DBProjektpunkte.CurrentProjektpunkt.Deleted === true) {
                        this.Meintagprojektpunkteliste[this.MeinTagProjektindex] = lodash.filter(this.Meintagprojektpunkteliste[this.MeinTagProjektindex], (currentpunkt) => {
                            return currentpunkt.Deleted === false;
                        });
                    }
                    Anzahl = this.DBProjektpunkte.CountProjektpunkte(this.Meintagprojektpunkteliste[this.MeinTagProjektindex], true);
                    this.DBProjekte.SetProjektpunkteanzahl(Anzahl, this.MeinTagProjektliste[this.MeinTagProjektindex].Projektkey);
                    break;
                case this.Datenursprungsvarianten.MeineWoche:
                    this.DBProjektpunkte.PrepareWochenpunkteliste();
                    break;
                case this.Datenursprungsvarianten.Favoritenprojekt:
                    Index = lodash.findIndex(this.FavoritenProjektpunkteliste, { _id: this.DBProjektpunkte.CurrentProjektpunkt._id });
                    if (Index !== -1) {
                        console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" updated.');
                        this.FavoritenProjektpunkteliste[Index] = this.DBProjektpunkte.CurrentProjektpunkt;
                    }
                    else {
                        this.FavoritenProjektpunkteliste.push(this.DBProjektpunkte.CurrentProjektpunkt);
                        console.log('Aufgabenliste: "' + this.DBProjektpunkte.CurrentProjektpunkt.Aufgabe + '" hinzugefÃ¼gt.');
                    }
                    if (this.DBProjektpunkte.CurrentProjektpunkt.Deleted === true) {
                        this.FavoritenProjektpunkteliste = lodash.filter(this.FavoritenProjektpunkteliste, (currentpunkt) => {
                            return currentpunkt.Deleted === false;
                        });
                    }
                    Anzahl = this.DBProjektpunkte.CountProjektpunkte(this.FavoritenProjektpunkteliste, false);
                    this.DBProjekte.SetProjektpunkteanzahl(Anzahl, this.DBProjekte.CurrentProjekt.Projektkey);
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'UpdateDaten', this.Debug.Typen.Page);
        }
    }
    SortPunkteliste(liste) {
        try {
            let Settings = this.Pool.Mitarbeitersettings;
            if (Settings !== null) {
                switch (Settings.AufgabenSortiermodus) {
                    case this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend:
                        liste.sort((punktA, punktB) => {
                            if (punktA.Endezeitstempel < punktB.Endezeitstempel)
                                return -1;
                            if (punktA.Endezeitstempel > punktB.Endezeitstempel)
                                return 1;
                            return 0;
                        });
                        break;
                    case this.Const.AufgabenSortiermodusvarianten.TermineAbsteigend:
                        liste.sort((punktA, punktB) => {
                            if (punktA.Endezeitstempel < punktB.Endezeitstempel)
                                return 1;
                            if (punktA.Endezeitstempel > punktB.Endezeitstempel)
                                return -1;
                            return 0;
                        });
                        break;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'SortPunkteliste', this.Debug.Typen.Page);
        }
    }
    PrepareDaten() {
        try {
            let Projektpunkteliste;
            let AllProjektpunkteliste;
            let Index;
            let Add;
            let Meintaganzahl = 0;
            let Meilensteineanzahl = 0;
            let Anzahl = 0;
            let MeineWocheListe;
            let MeineWocheEintrag;
            let Tag = this.Heute.format('dddd');
            let NewWeek;
            let Wochenliste;
            let Projektpunkt;
            let UpdateMitarbeiter;
            this.MeinTagProjektliste = [];
            this.FavoritenProjektpunkteliste = [];
            this.Meintagprojektpunkteliste = [];
            this.MeilensteineProjektliste = [];
            this.Meilensteineprojektpunkteliste = [];
            // Meilensteine Projektdaten bestimmen
            Index = 0;
            if (this.Pool.Mitarbeiterdaten !== null) {
                for (let Projekt of this.DBProjekte.Projektliste) {
                    Projektpunkteliste = lodash.filter(this.Pool.Projektpunkteliste[Projekt.Projektkey], (projektpunkt) => {
                        return this.DBProjektpunkte.CheckFilterMeilenstein(projektpunkt);
                    });
                    if (Projektpunkteliste.length > 0) {
                        this.SortPunkteliste(Projektpunkteliste);
                        this.MeilensteineProjektliste.push(Projekt);
                        this.Meilensteineprojektpunkteliste[Index] = Projektpunkteliste;
                        Meilensteineanzahl += Projektpunkteliste.length;
                        Index++;
                    }
                }
                if (!lodash.isUndefined(this.DBProjekte.Projektauswahlsettings[0])) {
                    this.DBProjekte.Projektauswahlsettings[0][3].Projektpunkteanzahl = Meilensteineanzahl;
                }
                // Meine Woche Projektdaten bestimmen
                // Meine Wochenliste auf KW filtern
                if (this.Pool.Mitarbeiterdaten.Meinewocheliste.length > 0) {
                    NewWeek = false;
                    this.Pool.Mitarbeiterdaten.Meinewocheliste.forEach((Eintrag) => {
                        if (Eintrag.Kalenderwoche !== (0, moment_1.default)().isoWeek()) {
                            NewWeek = true;
                        }
                    });
                    if (NewWeek) {
                        Wochenliste = [];
                        UpdateMitarbeiter = false;
                        this.Pool.Mitarbeiterdaten.Meinewocheliste.forEach((Wocheneintrag) => {
                            if (!lodash.isUndefined(this.Pool.Projektpunkteliste[Wocheneintrag.Projektkey])) {
                                Projektpunkt = lodash.find(this.Pool.Projektpunkteliste[Wocheneintrag.Projektkey], (Punkt) => {
                                    return Punkt._id === Wocheneintrag.ProjektpunktID && Punkt.Status !== this.Const.Projektpunktstatustypen.Geschlossen.Name;
                                });
                                if (!lodash.isUndefined(Projektpunkt)) {
                                    Wocheneintrag.Kalenderwoche = (0, moment_1.default)().isoWeek();
                                    Wochenliste.push(Wocheneintrag);
                                    UpdateMitarbeiter = true;
                                }
                            }
                        });
                        if (UpdateMitarbeiter) {
                            this.Pool.Mitarbeiterdaten.Meinewocheliste = Wochenliste;
                            // this.DBMitarbeiter.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten)
                        }
                    }
                }
                Index = 0;
                for (let Projekt of this.DBProjekte.Projektliste) {
                    AllProjektpunkteliste = lodash.filter(this.Pool.Projektpunkteliste[Projekt.Projektkey], (projektpunkt) => {
                        return this.DBProjektpunkte.CheckFilter(projektpunkt, true);
                    });
                    MeineWocheListe = lodash.filter(this.Pool.Mitarbeiterdaten.Meinewocheliste, (meinewocheeintrag) => {
                        return meinewocheeintrag.Projektkey === Projekt.Projektkey;
                    });
                    Projektpunkteliste = [];
                    for (let Punkt of AllProjektpunkteliste) {
                        Add = false;
                        MeineWocheEintrag = lodash.find(MeineWocheListe, { ProjektpunktID: Punkt._id });
                        if (!lodash.isUndefined(MeineWocheEintrag)) {
                            switch (Tag) {
                                case 'Montag':
                                    Add = MeineWocheEintrag.Montagseinsatz;
                                    break;
                                case 'Dienstag':
                                    Add = MeineWocheEintrag.Dienstagseinsatz;
                                    break;
                                case 'Mittwoch':
                                    Add = MeineWocheEintrag.Mittwochseinsatz;
                                    break;
                                case 'Donnerstag':
                                    Add = MeineWocheEintrag.Donnerstagseinsatz;
                                    break;
                                case 'Freitag':
                                    Add = MeineWocheEintrag.Freitagseinsatz;
                                    break;
                            }
                            if (Add)
                                Projektpunkteliste.push(Punkt);
                        }
                    }
                    if (Projektpunkteliste.length > 0) {
                        this.SortPunkteliste(Projektpunkteliste);
                        this.MeinTagProjektliste.push(Projekt);
                        this.Meintagprojektpunkteliste[Index] = Projektpunkteliste;
                        Meintaganzahl += Projektpunkteliste.length;
                        Index++;
                    }
                }
                if (!lodash.isUndefined(this.DBProjekte.Projektauswahlsettings[0])) {
                    this.DBProjekte.Projektauswahlsettings[0][1].Projektpunkteanzahl = Meintaganzahl;
                }
                // Projektfavoriten Daten
                if (this.DBProjekte.CurrentProjekt !== null && this.Pool.Projektpunkteliste[this.DBProjekte.CurrentProjekt.Projektkey]) {
                    for (Projektpunkt of this.Pool.Projektpunkteliste[this.DBProjekte.CurrentProjekt.Projektkey]) {
                        if (this.DBProjektpunkte.CheckFilter(Projektpunkt, false))
                            this.FavoritenProjektpunkteliste.push(Projektpunkt);
                    }
                }
                this.SortPunkteliste(this.FavoritenProjektpunkteliste);
                // Projektpunkteanzahlen bestimmen
                for (let Projekt of this.DBProjekte.Projektliste) {
                    Anzahl = this.DBProjektpunkte.CountProjektpunkte(this.Pool.Projektpunkteliste[Projekt.Projektkey], false);
                    this.DBProjekte.SetProjektpunkteanzahl(Anzahl, Projekt.Projektkey);
                }
                this.DBProjektpunkte.PrepareWochenpunkteliste();
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'PrepareDaten', this.Debug.Typen.Page);
        }
    }
    AufgabeClickedHandler(Projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(Projektpunkt);
            this.DBProjekte.CurrentProjekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: Projektpunkt.ProjektID });
            this.ShowProjektpunktEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'AufgabeClickedHandler', this.Debug.Typen.Page);
        }
    }
    FavoritenClickedHandler(favoritenindex) {
        try {
            switch (favoritenindex) {
                case 1000:
                    this.Auswahlhoehe = 800;
                    this.ShowFavoritenauswahl = true; // Zeige FAvoritenauswahl
                    break;
                case 3000:
                    // Meine Woche
                    break;
                default:
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'FavoritenClickedHandler', this.Debug.Typen.Page);
        }
    }
    EndedatumClickedHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.Datum = (0, moment_1.default)(projektpunkt.Endezeitstempel).locale('de');
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projektpunkt);
            this.ShowDateStatusPicker = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'EndedatumClickedHandler', this.Debug.Typen.Page);
        }
    }
    StatusClickedHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.Datum = (0, moment_1.default)(projektpunkt.Endezeitstempel).locale('de');
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projektpunkt);
            this.ShowDateStatusPicker = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'StatusClickedHandler', this.Debug.Typen.Page);
        }
    }
    ListeZustaendigExternHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projektpunkt);
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeExternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_ZustaendigExtern;
            this.ShowBeteiligteauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ListeZustaendigExternHandler', this.Debug.Typen.Page);
        }
    }
    FilterChangedHandler(statusname) {
        try {
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'FilterChangedHandler', this.Debug.Typen.Page);
        }
    }
    TerminFiltermodusClickedHandler(modus) {
        try {
            this.PrepareDaten();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'TerminFiltermodusClickedHandler', this.Debug.Typen.Page);
        }
    }
    MeinewocheZuweisenClickedHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBMitarbeiter.CurrentMeinewoche = this.DBMitarbeiter.GetEmptyMeinewocheeintrag();
            this.DBProjektpunkte.CurrentProjektpunkt = projektpunkt;
            this.DBMitarbeiter.CurrentMeinewoche.ProjektID = projektpunkt.ProjektID;
            this.DBMitarbeiter.CurrentMeinewoche.Projektkey = this.DBProjekte.CurrentProjekt.Projektkey;
            this.DBMitarbeiter.CurrentMeinewoche.ProjektpunktID = projektpunkt._id;
            this.Pool.Mitarbeiterdaten.Meinewocheliste.push(this.DBMitarbeiter.CurrentMeinewoche);
            this.ShowMeinewocheEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeinewocheZuweisenClickedHandler', this.Debug.Typen.Page);
        }
    }
    MeineWocheBearbeitenClickedHandler(projektpunkt, projektindex, ursprung) {
        try {
            this.SetProjektindexAndUrsprung(projektindex, ursprung);
            this.DBProjektpunkte.CurrentProjektpunkt = projektpunkt;
            this.ShowMeinewocheEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeineWocheBearbeitenClickedHandler', this.Debug.Typen.Page);
        }
    }
    MeineWocheEintragTagClicked(event, punkt, tag) {
        try {
            event.preventDefault();
            event.stopPropagation();
            this.DBProjektpunkte.CurrentProjektpunkt = punkt;
            this.ShowMeinewocheEditor = true;
            this.DBProjekte.CurrentProjekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: punkt.ProjektID });
            this.DBMitarbeiter.CurrentMeinewoche = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                return eintrag.ProjektID === punkt.ProjektID && eintrag.ProjektpunktID === punkt._id;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeineWocheEintragTagClicked', this.Debug.Typen.Page);
        }
    }
    MeineWocheEintragEditClicked(event, punkt, tag) {
        try {
            event.preventDefault();
            event.stopPropagation();
            debugger;
            this.Datenursprung = this.Datenursprungsvarianten.MeineWoche;
            this.ShowProjektpunktEditor = true;
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(punkt);
            this.DBProjekte.CurrentProjekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: punkt.ProjektID });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeineWocheEintragEditClicked', this.Debug.Typen.Page);
        }
    }
    MeineWocheStatusClicked(event, punkt) {
        try {
            event.preventDefault();
            event.stopPropagation();
            this.Auswahltitel = 'Stataus festlegen';
            this.Auswahlliste = [];
            this.Auswahlhoehe = 200;
            this.DBProjektpunkte.CurrentProjektpunkt = punkt;
            this.DBProjekte.CurrentProjekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: punkt.ProjektID });
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Meintageintrag_Status;
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Projektpunktstatustypen.Offen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Offen.Name });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Projektpunktstatustypen.Bearbeitung.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Bearbeitung.Name });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Projektpunktstatustypen.Geschlossen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Geschlossen.Name });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.Const.Projektpunktstatustypen.Ruecklauf.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Ruecklauf.Name });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: this.DBProjektpunkte.CurrentProjektpunkt.Status });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeineWocheStatusClicked', this.Debug.Typen.Page);
        }
    }
    MeineWocheDeleteClicked(event, sollpunkt, tag) {
        try {
            let Wocheneintrag;
            event.preventDefault();
            event.stopPropagation();
            Wocheneintrag = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, { ProjektpunktID: sollpunkt._id });
            if (!lodash.isUndefined(Wocheneintrag)) {
                switch (tag) {
                    case 'Montag':
                        Wocheneintrag.Montagseinsatz = false;
                        break;
                    case 'Dienstag':
                        Wocheneintrag.Dienstagseinsatz = false;
                        break;
                    case 'Mittwoch':
                        Wocheneintrag.Mittwochseinsatz = false;
                        break;
                    case 'Donnerstag':
                        Wocheneintrag.Donnerstagseinsatz = false;
                        break;
                    case 'Freitag':
                        Wocheneintrag.Freitagseinsatz = false;
                        break;
                }
            }
            this.Pool.Mitarbeiterdaten.Meinewocheliste = lodash.filter(this.Pool.Mitarbeiterdaten.Meinewocheliste, (Eintrag) => {
                return Eintrag.Montagseinsatz !== false ||
                    Eintrag.Dienstagseinsatz !== false ||
                    Eintrag.Mittwochseinsatz !== false ||
                    Eintrag.Donnerstagseinsatz !== false ||
                    Eintrag.Freitagseinsatz !== false;
            });
            this.DBMitarbeiter.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'MeineWocheDeleteClicked', this.Debug.Typen.Page);
        }
    }
    LeistungsphaseClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Editor_Leistungsphase;
            this.Auswahltitel = 'Leistungsphase festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH1, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH1 });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH2, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH2 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH3, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH3 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH4, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH4 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH5, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH5 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH6, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH6 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH7, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH7 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: this.DBProtokolle.Leistungsphasenvarianten.LPH8, SecoundColumn: '', Data: this.DBProtokolle.Leistungsphasenvarianten.LPH8 });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { FirstColumn: this.DBProtokolle.CurrentProtokoll.Leistungsphase });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'LeistungsphaseClickedHandler', this.Debug.Typen.Page);
        }
    }
    BeteiligteteilnehmerClickedHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProtokolle.CurrentProtokoll.BeteiligExternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Beteilgtenteilnehmer;
            this.ShowBeteiligteauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'BeteiligteteilnehmerClickedHandler', this.Debug.Typen.Page);
        }
    }
    TeamteilnehmerClickedHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DBProtokolle.CurrentProtokoll.BeteiligtInternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Teamteilnehmer;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'TeamteilnehmerClickedHandler', this.Debug.Typen.Page);
        }
    }
    AddProtokollpunktClickedHandler() {
        try {
            if (this.DBProtokolle.CurrentProtokoll._id === null) {
                this.DBProtokolle.SaveProtokoll().then(() => {
                    this.DBProjektpunkte.CurrentProjektpunkt = this.DBProjektpunkte.GetNewProtokollpunkt(this.DBProtokolle.CurrentProtokoll);
                    this.ShowProjektpunktEditor = true;
                });
            }
            else {
                this.DBProjektpunkte.CurrentProjektpunkt = this.DBProjektpunkte.GetNewProtokollpunkt(this.DBProtokolle.CurrentProtokoll);
                this.ShowProjektpunktEditor = true;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'AddProtokollpunktClickedHandler', this.Debug.Typen.Page);
        }
    }
    ProtokollpunktClickedHandler(projetpunkt) {
        try {
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projetpunkt);
            this.ShowProjektpunktEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ProtokollpunktClickedHandler', this.Debug.Typen.Page);
        }
    }
    ProtokollmarkeClickedHandler() {
        try {
            this.ShowProtokollEditor = true;
            this.Dialogbreite = 950;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Aufgaben Liste', 'ProtokollmarkeClickedHandler', this.Debug.Typen.Page);
        }
    }
};
PjAufgabenListePage.ctorParameters = () => [
    { type: display_service_1.DisplayService },
    { type: basics_1.BasicsProvider },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: const_1.ConstProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: debug_1.DebugProvider }
];
PjAufgabenListePage.propDecorators = {
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
PjAufgabenListePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-aufgaben-liste-page',
        template: __webpack_require__(/*! ./pj-aufgaben-liste.page.html?ngResource */ 54300),
        styles: [__webpack_require__(/*! ./pj-aufgaben-liste.page.scss?ngResource */ 84665)]
    })
], PjAufgabenListePage);
exports.PjAufgabenListePage = PjAufgabenListePage;


/***/ }),

/***/ 18538:
/*!***********************************************************************!*\
  !*** ./src/app/pages/pj-favoriten-liste/pj-favoriten-liste.module.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjFavoritenListePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const forms_1 = __webpack_require__(/*! @angular/forms */ 2508);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const pj_favoriten_liste_page_1 = __webpack_require__(/*! ./pj-favoriten-liste.page */ 87017);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const pj_favoriten_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-favoriten-editor/pj-favoriten-editor.module */ 17086);
const pj_projekte_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-projekte-auswahl/pj-projekte-auswahl.module */ 76943);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const routes = [
    {
        path: '',
        component: pj_favoriten_liste_page_1.PjFavoritenListePage
    }
];
let PjFavoritenListePageModule = class PjFavoritenListePageModule {
};
PjFavoritenListePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            router_1.RouterModule.forChild(routes),
            common_1.CommonModule,
            forms_1.FormsModule,
            angular_1.IonicModule,
            page_header_menu_module_1.PageHeaderMenuModule,
            page_header_module_1.PageHeaderModule,
            page_footer_module_1.PageFooterModule,
            pj_favoriten_editor_module_1.PjFavoritenEditorModule,
            pj_projekte_auswahl_module_1.PjProjekteAuswahlModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
        ],
        declarations: [pj_favoriten_liste_page_1.PjFavoritenListePage],
        exports: [
            pj_favoriten_liste_page_1.PjFavoritenListePage
        ]
    })
], PjFavoritenListePageModule);
exports.PjFavoritenListePageModule = PjFavoritenListePageModule;


/***/ }),

/***/ 87017:
/*!*********************************************************************!*\
  !*** ./src/app/pages/pj-favoriten-liste/pj-favoriten-liste.page.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjFavoritenListePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 92792);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let PjFavoritenListePage = class PjFavoritenListePage {
    constructor(Debug, DBMitarbeiter, DBStandort, Basics, Auswahlservice, Const, DBProjekt, Pool) {
        this.Debug = Debug;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBStandort = DBStandort;
        this.Basics = Basics;
        this.Auswahlservice = Auswahlservice;
        this.Const = Const;
        this.DBProjekt = DBProjekt;
        this.Pool = Pool;
        try {
            this.ShowEditor = false;
            this.Dialoghoehe = 400;
            this.Dialogbreite = 600;
            this.DialogPosY = 100;
            this.ShowProjekteauswahl = false;
            this.AuswahlIDliste = [];
            this.Auswahldialogorigin = this.Const.NONE;
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.Auswahltitel = '';
            this.AuswahlIDliste = [];
            this.ProjekteauswahlTitel = 'Projekte festlegen';
            this.Datenliste = [];
            this.DataSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            this.DataSubscription.unsubscribe();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    PrepareData() {
        try {
            let Favoritenindex = 0;
            let Projektindex = 0;
            let Projekt;
            this.Datenliste = [];
            if (this.Pool.Mitarbeiterdaten !== null) {
                for (let Favorit of this.Pool.Mitarbeiterdaten.Favoritenliste) {
                    this.Datenliste[Favoritenindex] = [];
                    Projektindex = 0;
                    for (let ProjektID of this.Pool.Mitarbeiterdaten.Favoritenliste[Favoritenindex].Projekteliste) {
                        Projekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: this.Pool.Mitarbeiterdaten.Favoritenliste[Favoritenindex].Projekteliste[Projektindex] });
                        if (!lodash.isUndefined(Projekt))
                            this.Datenliste[Favoritenindex].push(Projekt);
                        Projektindex++;
                    }
                    this.Datenliste[Favoritenindex].sort((a, b) => {
                        if (a.Projektnummer < b.Projektnummer)
                            return -1;
                        if (a.Projektnummer > b.Projektnummer)
                            return 1;
                        return 0;
                    });
                    Favoritenindex++;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'PrepareData', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.Dialoghoehe = this.Basics.Contenthoehe - this.DialogPosY - 100 - 100;
            this.Dialogbreite = this.Basics.Contentbreite - 100 - 100;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.DataSubscription = this.Pool.LoadingAllDataFinished.subscribe(() => {
                this.PrepareData();
            });
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'ngOnInit', this.Debug.Typen.Page);
        }
    }
    AddFavoritenButtonClicked() {
        try {
            this.DBProjekt.CurrentFavorit = lodash.cloneDeep(this.DBProjekt.GetEmptyProjektfavoriten());
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'AddFavoritenButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetFavoritenTitel() {
        try {
            if (this.DBProjekt.CurrentFavorit !== null) {
                return this.DBProjekt.CurrentFavorit.FavoritenID === null ? 'Neue Favoriten anlegen' : 'Favoriten bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'GetFavoritenTitel', this.Debug.Typen.Page);
        }
    }
    FavoritButtonClicked(favorit) {
        try {
            this.DBProjekt.CurrentFavorit = lodash.cloneDeep(favorit);
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'FavoritButtonClicked', this.Debug.Typen.Page);
        }
    }
    ProjekteauswahlOkButtonClicked(idliste) {
        try {
            this.ShowProjekteauswahl = false;
            this.DBProjekt.CurrentFavorit.Projekteliste = idliste;
            this.DBProjekt.CurrentFavoritenChanged.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'ProjekteauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    ProjekteStandortfilterClickedHandler() {
        try {
            let Index = 0;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Favoriten_Editor_Projekteauswahl_Standortfilter;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standortfilter festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: Index, FirstColumn: 'kein Filter', SecoundColumn: '', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Standort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.ProjekteauswahlStandortfilter === null) {
                this.Auswahlindex = 0;
            }
            else {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.ProjekteauswahlStandortfilter._id });
                this.Auswahlindex++;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'StandortfilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            switch (this.Auswahltitel) {
                case 'Standortfilter festlegen':
                    return 'location-outline';
                    break;
                default:
                    return 'help-outline';
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Favoriten_Editor_Projekteauswahl_Standortfilter:
                    this.DBStandort.ProjekteauswahlStandortfilter = (0, lodash_es_1.cloneDeep)(data);
                    this.DBStandort.StandortfilterChanged.emit();
                    break;
                default:
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetFavoritenanzahl() {
        try {
            let Anzahl = 0;
            if (this.Pool.Mitarbeiterdaten !== null) {
                Anzahl = this.Pool.Mitarbeiterdaten.Favoritenliste.length;
            }
            return Anzahl;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'GetFavoritenanzahl', this.Debug.Typen.Page);
        }
    }
    EditProjektlisteEventHandler() {
        try {
            this.ShowProjekteauswahl = true;
            this.AuswahlIDliste = this.DBProjekt.CurrentFavorit.Projekteliste;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'EditProjektlisteEventHandler', this.Debug.Typen.Page);
        }
    }
    GetStandortname(StandortID) {
        try {
            let Standort = lodash.find(this.Pool.Standorteliste, { _id: StandortID });
            if (!lodash.isUndefined(Standort))
                return Standort.Ort;
            else
                return 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Favoriten', 'GetStandortname', this.Debug.Typen.Page);
        }
    }
};
PjFavoritenListePage.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: basics_1.BasicsProvider },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: const_1.ConstProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_pool_service_1.DatabasePoolService }
];
PjFavoritenListePage.propDecorators = {
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
PjFavoritenListePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-favoriten-liste-page',
        template: __webpack_require__(/*! ./pj-favoriten-liste.page.html?ngResource */ 89768),
        styles: [__webpack_require__(/*! ./pj-favoriten-liste.page.scss?ngResource */ 40325)]
    })
], PjFavoritenListePage);
exports.PjFavoritenListePage = PjFavoritenListePage;


/***/ }),

/***/ 98271:
/*!*******************************************************************!*\
  !*** ./src/app/pages/pj-projekt-liste/pj-projekt-liste.module.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektListePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const alphabet_module_1 = __webpack_require__(/*! ../../components/alphabet/alphabet.module */ 21718);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const pj_projekt_liste_1 = __webpack_require__(/*! ./pj-projekt-liste */ 83516);
const abstand_element_fixed_module_1 = __webpack_require__(/*! ../../components/abstand-element-fixed/abstand-element-fixed.module */ 10047);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_modal_keeper_module_1 = __webpack_require__(/*! ../../components/page-modal-keeper/page-modal-keeper.module */ 85267);
const input_clone_module_1 = __webpack_require__(/*! ../../components/input-clone/input-clone.module */ 65480);
const checkbox_clon_module_1 = __webpack_require__(/*! ../../components/checkbox-clon/checkbox-clon.module */ 60034);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 45601);
const pj_projekt_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-projekt-editor/pj-projekt-editor.module */ 99050);
const pj_beteiligten_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-beteiligten-editor/pj-beteiligten-editor.module */ 9506);
const pj_gebaeude_bauteileditor_module_1 = __webpack_require__(/*! ../../components-page/pj-gebaeude-bauteileditor/pj-gebaeude-bauteileditor.module */ 92921);
const pj_gebaeude_geschosseditor_module_1 = __webpack_require__(/*! ../../components-page/pj-gebaeude-geschosseditor/pj-gebaeude-geschosseditor.module */ 949);
const pj_gebaeude_raumeditor_module_1 = __webpack_require__(/*! ../../components-page/pj-gebaeude-raumeditor/pj-gebaeude-raumeditor.module */ 57406);
const pj_protokoll_listefilter_module_1 = __webpack_require__(/*! ../../components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.module */ 66754);
const routes = [
    {
        path: '',
        component: pj_projekt_liste_1.PjProjektListePage
    }
];
let PjProjektListePageModule = class PjProjektListePageModule {
};
PjProjektListePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            pj_projekt_liste_1.PjProjektListePage,
        ],
        imports: [
            router_1.RouterModule.forChild(routes),
            angular_1.IonicModule,
            common_1.CommonModule,
            page_header_module_1.PageHeaderModule,
            alphabet_module_1.AlphabetModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            page_footer_module_1.PageFooterModule,
            abstand_element_fixed_module_1.AbstandElementFixedModule,
            page_header_menu_module_1.PageHeaderMenuModule,
            page_modal_keeper_module_1.PageModalKeepermodule,
            input_clone_module_1.InputCloneModule,
            checkbox_clon_module_1.CheckboxClonModule,
            fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule,
            pj_projekt_editor_module_1.PjProjektEditorModule,
            pj_beteiligten_editor_module_1.PjBeteiligtenEditorModule,
            pj_gebaeude_bauteileditor_module_1.PjGebaeudeBauteileditorModule,
            pj_gebaeude_geschosseditor_module_1.PjGebaeudeGeschosseditorModule,
            pj_gebaeude_raumeditor_module_1.PjGebaeudeRaumeditorModule,
            pj_protokoll_listefilter_module_1.PjProtokollListefilterModule,
        ],
        exports: [
            pj_projekt_liste_1.PjProjektListePage
        ]
    })
], PjProjektListePageModule);
exports.PjProjektListePageModule = PjProjektListePageModule;


/***/ }),

/***/ 83516:
/*!************************************************************!*\
  !*** ./src/app/pages/pj-projekt-liste/pj-projekt-liste.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProjektListePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const tools_1 = __webpack_require__(/*! ../../services/tools/tools */ 9983);
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../../services/database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 92792);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projektbeteiligte_service_1 = __webpack_require__(/*! ../../services/database-projektbeteiligte/database-projektbeteiligte.service */ 89524);
const database_gebaeudestruktur_1 = __webpack_require__(/*! ../../services/database-gebaeudestruktur/database-gebaeudestruktur */ 40809);
let PjProjektListePage = class PjProjektListePage {
    constructor(Basics, Debug, Tools, DB, DBMitarbeiter, DBStandort, DBBeteiligte, Const, Auswahlservice, Displayservice, DBGebaeude, Pool) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Tools = Tools;
        this.DB = DB;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBStandort = DBStandort;
        this.DBBeteiligte = DBBeteiligte;
        this.Const = Const;
        this.Auswahlservice = Auswahlservice;
        this.Displayservice = Displayservice;
        this.DBGebaeude = DBGebaeude;
        this.Pool = Pool;
        try {
            this.Alphapetbreite = 44;
            this.Standardalphabet = ['Alle', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            this.Kontaktephabet = [];
            this.Alphabetauswahl = 'Alle';
            this.Liste = [];
            this.Dialoghoehe = 400;
            this.Dialogbreite = 600;
            this.DialogPosY = 100;
            this.StrukturDialogbreite = 1260;
            this.StrukturDialoghoehe = 800;
            this.Filter = '';
            this.Kontaktephabet = this.Standardalphabet;
            this.Firmenliste = [];
            this.ShowEditor = false;
            this.EditorValid = false;
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.Auswahltitel = '';
            this.AuswahlIDliste = [];
            this.Auswahldialogorigin = this.Const.NONE;
            this.MitarbeiterauswahlTitel = this.Const.NONE;
            this.ShowBeteiligteneditor = false;
            this.ShowBauteilEditor = false;
            this.ShowGeschossEditor = false;
            this.ShowRaumEditor = false;
            this.ShowAuswahl = false;
            this.ShowMitarbeiterauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            this.ListeSubscription.unsubscribe();
            this.ListeSubscription = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.Displayservice.ResetDialogliste();
            this.ListeSubscription = this.Pool.GesamtprojektelisteChanged.subscribe(() => {
                this.PrepareData();
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'ngOnInit', this.Debug.Typen.Page);
        }
    }
    SucheChanged(text) {
        try {
            this.Filtertext = text;
            this.Filter = this.Filtertext;
            this.PrepareData();
            /*
            if(this.Inputtimer !== null) {
      
              window.clearTimeout(this.Inputtimer);
      
              this.Inputtimer = null;
            }
      
            if(this.Filtertext.length >= 2 || this.Filtertext.length === 0) {
      
              this.Inputtimer = window.setTimeout(()  => {
      
      
              }, 600);
            }
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'SucheTextChanged', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.DialogPosY = 60;
            this.Dialoghoehe = this.Basics.Contenthoehe - this.DialogPosY - 150;
            this.Dialogbreite = 710;
            this.StrukturDialoghoehe = this.Dialoghoehe;
            this.PrepareData();
            // this.ProjektButtonClicked(0);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    PrepareData() {
        try {
            let Liste = this.Pool.Gesamtprojektliste;
            let Merker;
            let Buchstabe;
            let Laenge;
            let TeilA;
            let TeilB;
            let TeilC;
            let Teillaenge;
            let PosA;
            let Solltext;
            let Suchtext;
            this.Lastletter = '';
            Liste.sort((a, b) => {
                if (a.Projektname < b.Projektname)
                    return -1;
                if (a.Projektname > b.Projektname)
                    return 1;
                return 0;
            });
            // Standortfilter anwenden
            if (this.DBStandort.CurrentStandortfilter !== null) {
                Merker = lodash.cloneDeep(Liste);
                Liste = lodash.filter(Merker, { StandortID: this.DBStandort.CurrentStandortfilter._id }); // eintrag.StandortID === this.DBStandort.CurrentStandortfilter._id;
                // });
                /*
                for(let Eintrag of Merker) {
        
                  if(Eintrag.StandortID === this.DBStandort.CurrentStandortfilter._id) Liste.push(Eintrag);
                }
                */
            }
            // Alphabetfilter anwenden
            if (this.Alphabetauswahl !== 'Alle') {
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    Buchstabe = Eintrag.Projektname.substring(0, 1).toUpperCase();
                    if (this.Alphabetauswahl === Buchstabe)
                        Liste.push(Eintrag);
                }
            }
            // Suche Filter anwenden
            if (this.Filter !== '') {
                Merker = lodash.cloneDeep(Liste);
                Liste = [];
                for (let Eintrag of Merker) {
                    Solltext = this.Filter.toLowerCase();
                    Suchtext = Eintrag.Projektname.toLowerCase();
                    PosA = Suchtext.indexOf(Solltext);
                    if (PosA !== -1) {
                        Laenge = Eintrag.Projektname.length;
                        Teillaenge = Solltext.length;
                        TeilA = Eintrag.Projektname.substr(0, PosA);
                        TeilB = Eintrag.Projektname.substr(PosA, Teillaenge);
                        Teillaenge = Laenge - Teillaenge - PosA;
                        TeilC = Eintrag.Projektname.substr(Laenge - Teillaenge, Teillaenge);
                        Eintrag.Filtered = true;
                        Eintrag.Text_A = TeilA;
                        Eintrag.Text_B = TeilB;
                        Eintrag.Text_C = TeilC;
                        Liste.push(Eintrag);
                    }
                }
            }
            // Buchstabenliste festlegen
            this.Buchstabenliste = [];
            for (let Eintrag of Liste) {
                this.Buchstabenliste.push(this.GetAlphabetbuchstabe(Eintrag));
            }
            this.Liste = lodash.cloneDeep(Liste);
            // this.ProjektButtonClicked(0);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'PrepareData', this.Debug.Typen.Page);
        }
    }
    GetAlphabetbuchstabe(value) {
        let Buchstabe;
        Buchstabe = value.Projektname.substring(0, 1).toUpperCase();
        if (Buchstabe !== this.Lastletter) {
            this.Lastletter = Buchstabe;
            return Buchstabe;
        }
        else {
            return '';
        }
    }
    AlphabetClicked(buchstabe) {
        try {
            this.Filtertext = '';
            this.Filter = '';
            this.Alphabetauswahl = buchstabe;
            this.PrepareData();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AlphabetClicked', this.Debug.Typen.Page);
        }
    }
    ProjektButtonClicked(index) {
        try {
            this.DB.CurrentProjekt = lodash.cloneDeep(this.Liste[index]);
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'ProjektButtonClicked', this.Debug.Typen.Page);
        }
    }
    AddProjektButtonClicked() {
        try {
            this.DB.CurrentProjekt = this.DB.GetEmptyProjekt();
            this.ShowEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AddProjektButtonClicked', this.Debug.Typen.Page);
        }
    }
    AddProjektbeteiligteButtonClickedHandler() {
        try {
            this.DBBeteiligte.CurrentBeteiligte = this.DBBeteiligte.GetEmptyProjektbeteiligte();
            this.ShowBeteiligteneditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AddProjektbeteiligteButtonClickedHandler', this.Debug.Typen.Page);
        }
    }
    CancelButtonClicked() {
        try {
            this.Tools.PopPage();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'CancelButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetProjekteditorTitel() {
        try {
            if (this.DB.CurrentProjekt !== null) {
                return this.DB.CurrentProjekt._id === null ? 'Neues Projekt anlegen' : 'Projekt bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetProjekteditorTitel', this.Debug.Typen.Page);
        }
    }
    EditorValidChanged(event) {
        try {
            this.EditorValid = event;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'EditorValidChanged', this.Debug.Typen.Page);
        }
    }
    StatusClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Projektstatus;
            this.Auswahltitel = 'Status festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Projektstatusvarianten.Abgeschlossen, SecoundColumn: '', Data: this.Const.Projektstatusvarianten.Abgeschlossen });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Projektstatusvarianten.Bearbeitung, SecoundColumn: '', Data: this.Const.Projektstatusvarianten.Bearbeitung });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Projektstatusvarianten.Ruht, SecoundColumn: '', Data: this.Const.Projektstatusvarianten.Ruht });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { FirstColumn: this.DB.CurrentProjekt.Status });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'function', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            switch (this.Auswahltitel) {
                case 'Status festlegen':
                    return 'stats-chart-outline';
                    break;
                case 'Standort festlegen':
                    return 'location-outline';
                    break;
                case 'Standortfilter festlegen':
                    return 'location-outline';
                    break;
                case 'Fachbereich festlegen':
                    return 'hammer-outline';
                    break;
                default:
                    return 'help-outline';
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    StandortfilterClickedHandler() {
        try {
            let Index = 0;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekteliste_Standortfiler;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standortfilter festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: Index, FirstColumn: 'kein Filter', SecoundColumn: '', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Ort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.CurrentStandortfilter === null) {
                this.Auswahlindex = 0;
            }
            else {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.CurrentStandortfilter._id });
                this.Auswahlindex++;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'StandortfilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    StandortClickedHandler() {
        try {
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Standort;
            this.Auswahlliste = [];
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Ort, Data: Eintrag });
                Index++;
            }
            this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DB.CurrentProjekt.StandortID });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'StandortClickedHandler', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Projekteliste_Standortfiler:
                    this.DBStandort.CurrentStandortfilter = (0, lodash_es_1.cloneDeep)(data);
                    this.Pool.Mitarbeitersettings.StandortFilter = data !== null ? data._id : this.Const.NONE;
                    this.DBMitarbeiter.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
                        this.DBStandort.StandortfilterChanged.emit();
                    }).catch((error) => {
                        this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
                    });
                    this.PrepareData();
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Projektstatus:
                    this.DB.CurrentProjekt.Status = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Standort:
                    this.DB.CurrentProjekt.StandortID = data._id;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Beteiligteneditor:
                    this.DBBeteiligte.CurrentBeteiligte.Beteiligtentyp = data.Typnummer;
                    break;
                default:
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    ProjektleiterClickedHandler() {
        try {
            if (this.DB.CurrentProjekt.ProjektleiterID !== this.Const.NONE)
                this.AuswahlIDliste = [this.DB.CurrentProjekt.ProjektleiterID];
            else
                this.AuswahlIDliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Mitarbeiterauswahl_Projektleiter;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'ProjektleiterClickedHandler', this.Debug.Typen.Page);
        }
    }
    StellvertreterClickedHandler() {
        try {
            if (this.DB.CurrentProjekt.StellvertreterID !== this.Const.NONE)
                this.AuswahlIDliste = [this.DB.CurrentProjekt.StellvertreterID];
            else
                this.AuswahlIDliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Mitarbeiterauswahl_Stellvertreter;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'StellvertreterClickedHandler', this.Debug.Typen.Page);
        }
    }
    MitarebiterStandortfilterClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Mitarbeiterauswahl_Standortfilter;
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: Index, FirstColumn: 'kein Filter', SecoundColumn: '', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Standort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.MitarbeiterauswahlStandortfilter !== null) {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.MitarbeiterauswahlStandortfilter._id });
            }
            else
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetOpacity() {
        try {
            return !this.ShowAuswahl && !this.ShowMitarbeiterauswahl && !this.ShowEditor;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetOpacity', this.Debug.Typen.Page);
        }
    }
    MitarbeiterauswahlOkButtonClicked(idliste) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Mitarbeiterauswahl_Projektleiter:
                    if (idliste.length > 0)
                        this.DB.CurrentProjekt.ProjektleiterID = idliste[0];
                    else
                        this.DB.CurrentProjekt.ProjektleiterID = this.Const.NONE;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Mitarbeiterauswahl_Stellvertreter:
                    if (idliste.length > 0)
                        this.DB.CurrentProjekt.StellvertreterID = idliste[0];
                    else
                        this.DB.CurrentProjekt.StellvertreterID = this.Const.NONE;
                    break;
            }
            this.ShowMitarbeiterauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetBerteiligteeditorTitel() {
        try {
            if (this.DBBeteiligte.CurrentBeteiligte !== null) {
                return this.DBBeteiligte.CurrentBeteiligte.BeteiligtenID === null ? 'Neue/n Projektbeteiligte/n anlegen' : 'Projektbeteiligte/n bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetBerteiligteeditorTitel', this.Debug.Typen.Page);
        }
    }
    BeteiligteClickedEventHandler(beteiligt) {
        try {
            this.DBBeteiligte.CurrentBeteiligte = lodash.cloneDeep(beteiligt);
            this.ShowBeteiligteneditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'BeteiligteClickedEventHandler', this.Debug.Typen.Page);
        }
    }
    BeteiligteFachbereichClickedEventHandler() {
        try {
            let Index = 0;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Beteiligteneditor;
            this.Auswahltitel = 'Fachbereich festlegen';
            this.Auswahlliste = [];
            this.Auswahlindex = -1;
            for (let Eintrag of this.DBBeteiligte.Beteiligtentypenliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Name, SecoundColumn: '', Data: Eintrag });
                Index++;
            }
            this.Auswahlindex = lodash.findIndex(this.DBBeteiligte.Beteiligtentypenliste, { Typnummer: this.DBBeteiligte.CurrentBeteiligte.Beteiligtentyp });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'BeteiligteFachbereichClickedEventHandler', this.Debug.Typen.Page);
        }
    }
    AddBauteilClickedHandler() {
        try {
            this.DBGebaeude.CurrentBauteil = this.DBGebaeude.GetEmptyBauteil();
            this.ShowBauteilEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AddBauteilClickedHandler', this.Debug.Typen.Page);
        }
    }
    EditBauteilClickedHandler(bauteil) {
        try {
            this.DBGebaeude.CurrentBauteil = lodash.cloneDeep(bauteil);
            this.ShowBauteilEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'EditBauteilClickedHandler', this.Debug.Typen.Page);
        }
    }
    EditGeschossClickedHandler(geschoss) {
        try {
            this.DBGebaeude.CurrentGeschoss = lodash.cloneDeep(geschoss);
            this.ShowGeschossEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'EditGeschossClickedHandler', this.Debug.Typen.Page);
        }
    }
    EditRaumClickedHandler(raum) {
        try {
            this.DBGebaeude.CurrentRaum = lodash.cloneDeep(raum);
            this.ShowRaumEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'EditRaumClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetBauteileditorTitel() {
        try {
            if (this.DBGebaeude.CurrentBauteil !== null) {
                return this.DBGebaeude.CurrentBauteil.BauteilID === null ? 'Neues Bauteil erstellen' : 'Bauteil bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetBauteileditorTitel', this.Debug.Typen.Page);
        }
    }
    GetGeschosseditorTitel() {
        try {
            if (this.DBGebaeude.CurrentGeschoss !== null) {
                return this.DBGebaeude.CurrentGeschoss.GeschossID === null ? 'Neues Geschoss erstellen' : 'Geschoss bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetGeschosseditorTitel', this.Debug.Typen.Page);
        }
    }
    GetRaumeditorTitel() {
        try {
            if (this.DBGebaeude.CurrentRaum !== null) {
                return this.DBGebaeude.CurrentRaum.RaumID === null ? 'Neuen Raum erstellen' : 'Raum bearbeiten';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'GetRaumeditorTitel', this.Debug.Typen.Page);
        }
    }
    AddGeschossClickedHandler() {
        try {
            this.DBGebaeude.CurrentGeschoss = this.DBGebaeude.GetEmptyGeschoss();
            this.ShowGeschossEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AddGeschossClickedHandler', this.Debug.Typen.Page);
        }
    }
    AddRaumClickedHandler() {
        try {
            this.DBGebaeude.CurrentRaum = this.DBGebaeude.GetEmptyRaum();
            this.ShowRaumEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'AddRaumClickedHandler', this.Debug.Typen.Page);
        }
    }
};
PjProjektListePage.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projektbeteiligte_service_1.DatabaseProjektbeteiligteService },
    { type: const_1.ConstProvider },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: display_service_1.DisplayService },
    { type: database_gebaeudestruktur_1.DatabaseGebaeudestrukturService },
    { type: database_pool_service_1.DatabasePoolService }
];
PjProjektListePage.propDecorators = {
    Alphabetcomponent: [{ type: core_1.ViewChild, args: ['Alphabet', { static: false },] }],
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
PjProjektListePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-projekt-liste-page',
        template: __webpack_require__(/*! ./pj-projekt-liste.html?ngResource */ 9497),
        styles: [__webpack_require__(/*! ./pj-projekt-liste.scss?ngResource */ 52821)]
    })
], PjProjektListePage);
exports.PjProjektListePage = PjProjektListePage;


/***/ }),

/***/ 33576:
/*!*************************************************************************!*\
  !*** ./src/app/pages/pj-protokolle-liste/pj-protokolle-liste.module.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokolleListePageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const common_1 = __webpack_require__(/*! @angular/common */ 94666);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const page_header_module_1 = __webpack_require__(/*! ../../components/page-header/page-header.module */ 54810);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
const page_header_menu_module_1 = __webpack_require__(/*! ../../components/page-header-menu/page-header-menu.module */ 77044);
const page_footer_module_1 = __webpack_require__(/*! ../../components/page-footer/page-footer.module */ 61353);
const auswahl_dialog_module_1 = __webpack_require__(/*! ../../components/auswahl-dialog/auswahl-dialog.module */ 91052);
const fi_mitarbeiter_auswahl_module_1 = __webpack_require__(/*! ../../components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.module */ 45601);
const pj_beteiligten_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.module */ 15438);
const pj_protokolle_liste_page_1 = __webpack_require__(/*! ./pj-protokolle-liste.page */ 40019);
const pj_protokoll_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-protokoll-editor/pj-protokoll-editor.module */ 83722);
const pj_projektpunkt_editor_module_1 = __webpack_require__(/*! ../../components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.module */ 38266);
const pj_kostengruppen_auswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.module */ 11214);
const pj_gebaeude_raumauswahl_module_1 = __webpack_require__(/*! ../../components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.module */ 1579);
const pj_protokoll_listefilter_module_1 = __webpack_require__(/*! ../../components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.module */ 66754);
const pj_projektpunkt_date_kw_picker_module_1 = __webpack_require__(/*! ../../components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.module */ 47121);
const routes = [
    {
        path: '',
        component: pj_protokolle_liste_page_1.PjProtokolleListePage
    }
];
let PjProtokolleListePageModule = class PjProtokolleListePageModule {
};
PjProtokolleListePageModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        imports: [
            common_1.CommonModule,
            angular_1.IonicModule,
            page_header_module_1.PageHeaderModule,
            router_1.RouterModule.forChild(routes),
            page_header_menu_module_1.PageHeaderMenuModule,
            page_footer_module_1.PageFooterModule,
            auswahl_dialog_module_1.AuswahlDialogModule,
            fi_mitarbeiter_auswahl_module_1.FiMitarbeiterAuswahlModule,
            pj_beteiligten_auswahl_module_1.PjBeteiligtenAuswahlModule,
            pj_protokoll_editor_module_1.PjProtokollEditorModule,
            pj_projektpunkt_editor_module_1.PjProjektpunktEditorModule,
            pj_kostengruppen_auswahl_module_1.PjKostengruppenAuswahlModule,
            pj_gebaeude_raumauswahl_module_1.PjGebaeudeRaumauswahlModule,
            pj_protokoll_listefilter_module_1.PjProtokollListefilterModule,
            pj_projektpunkt_date_kw_picker_module_1.PjProjektpunktDateKwPickerModule,
        ],
        declarations: [pj_protokolle_liste_page_1.PjProtokolleListePage],
        exports: [
            pj_protokolle_liste_page_1.PjProtokolleListePage
        ]
    })
], PjProtokolleListePageModule);
exports.PjProtokolleListePageModule = PjProtokolleListePageModule;


/***/ }),

/***/ 40019:
/*!***********************************************************************!*\
  !*** ./src/app/pages/pj-protokolle-liste/pj-protokolle-liste.page.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PjProtokolleListePage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../../services/debug/debug */ 83817);
const database_projektpunkte_service_1 = __webpack_require__(/*! ../../services/database-projektpunkte/database-projektpunkte.service */ 38048);
const auswahl_dialog_service_1 = __webpack_require__(/*! ../../services/auswahl-dialog/auswahl-dialog.service */ 47059);
const const_1 = __webpack_require__(/*! ../../services/const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const basics_1 = __webpack_require__(/*! ../../services/basics/basics */ 7183);
const database_pool_service_1 = __webpack_require__(/*! ../../services/database-pool/database-pool.service */ 73004);
const database_standorte_service_1 = __webpack_require__(/*! ../../services/database-standorte/database-standorte.service */ 60955);
const database_protokolle_service_1 = __webpack_require__(/*! ../../services/database-protokolle/database-protokolle.service */ 61705);
const display_service_1 = __webpack_require__(/*! ../../services/diplay/display.service */ 38215);
const database_projekte_service_1 = __webpack_require__(/*! ../../services/database-projekte/database-projekte.service */ 31222);
let PjProtokolleListePage = class PjProtokolleListePage {
    constructor(Displayservice, Basics, Auswahlservice, DB, DBProjektpunkte, DBStandort, DBProjekte, Const, Pool, Debug) {
        this.Displayservice = Displayservice;
        this.Basics = Basics;
        this.Auswahlservice = Auswahlservice;
        this.DB = DB;
        this.DBProjektpunkte = DBProjektpunkte;
        this.DBStandort = DBStandort;
        this.DBProjekte = DBProjekte;
        this.Const = Const;
        this.Pool = Pool;
        this.Debug = Debug;
        try {
            this.ShowProtokollEditor = false;
            this.Auswahlliste = [{ Index: 0, FirstColumn: '', SecoundColumn: '', Data: null }];
            this.Auswahlindex = 0;
            this.Auswahltitel = '';
            this.ShowAuswahl = false;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Projekte_Editor_Standort;
            this.ShowMitarbeiterauswahl = false;
            this.ShowBeteiligteauswahl = false;
            this.ShowProjektpunktEditor = false;
            this.ShowKostengruppenauswahl = false;
            this.ShowRaumauswahl = false;
            this.ShowZeitspannefilter = false;
            this.Dialoghoehe = 400;
            this.Dialogbreite = 850;
            this.KostenDialogbreite = 1200;
            this.KostenDialoghoehe = 500;
            this.DialogPosY = 60;
            this.AuswahlIDliste = [];
            this.StrukturDialogbreite = 1260;
            this.StrukturDialoghoehe = 800;
            this.ProtokollSubscription = null;
            this.Protokollliste = [];
            this.ShowDateKkPicker = false;
            this.Headerhoehe = 0;
            this.Listenhoehe = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'constructor', this.Debug.Typen.Page);
        }
    }
    ngOnInit() {
        try {
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.ProtokollSubscription = this.Pool.ProtokolllisteChanged.subscribe(() => {
                this.PrepareData();
            });
            this.Displayservice.ResetDialogliste();
            this.PrepareData();
            this.Headerhoehe = 38;
            this.Listenhoehe = this.Basics.InnerContenthoehe - this.Headerhoehe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'OnInit', this.Debug.Typen.Page);
        }
    }
    ngOnDestroy() {
        try {
            this.ProtokollSubscription.unsubscribe();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'OnDestroy', this.Debug.Typen.Page);
        }
    }
    ionViewDidEnter() {
        try {
            this.Basics.MeassureInnercontent(this.PageHeader, this.PageFooter);
            this.DialogPosY = 60;
            this.Dialoghoehe = this.Basics.Contenthoehe - this.DialogPosY - 80 - 80;
            this.Dialogbreite = 850;
            this.StrukturDialoghoehe = this.Dialoghoehe;
            // this.AddProtokollButtonClicked();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ionViewDidEnter', this.Debug.Typen.Page);
        }
    }
    ionViewDidLeave() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ionViewDidLeave', this.Debug.Typen.Page);
        }
    }
    AddProtokollButtonClicked() {
        try {
            this.DB.CurrentProtokoll = this.DB.GetEmptyProtokoll();
            this.ShowProtokollEditor = true;
            this.Dialogbreite = 950;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'AddProtokollButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetProtokollTitel() {
        try {
            if (this.DB.CurrentProtokoll !== null) {
                return this.DB.CurrentProtokoll._id !== null ? 'Protokoll bearbeiten' : 'Neues Protokoll erstellen';
            }
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'GetProtokollTitel', this.Debug.Typen.Page);
        }
    }
    AuswahlOkButtonClicked(data) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Editor_Leistungsphase:
                    this.DB.CurrentProtokoll.Leistungsphase = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Status:
                    this.DBProjektpunkte.CurrentProjektpunkt.Status = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Fachbereich:
                    this.DBProjektpunkte.CurrentProjektpunkt.Fachbereich = data;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Filter_Leistungsphase:
                    this.DB.Leistungsphasenfilter = data;
                    break;
                default:
                    break;
            }
            this.ShowAuswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'AuswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    GetDialogTitelicon() {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Editor_Leistungsphase:
                    return 'stats-chart-outline';
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Filter_Leistungsphase:
                    return 'filter-circle-outline';
                    break;
                default:
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'GetDialogTitelicon', this.Debug.Typen.Page);
        }
    }
    MitarebiterStandortfilterClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Editor_Standortfilter;
            let Index = 0;
            this.ShowAuswahl = true;
            this.Auswahltitel = 'Standort festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: Index, FirstColumn: 'kein Filter', SecoundColumn: '', Data: null });
            Index++;
            for (let Eintrag of this.Pool.Standorteliste) {
                this.Auswahlliste.push({ Index: Index, FirstColumn: Eintrag.Kuerzel, SecoundColumn: Eintrag.Standort, Data: Eintrag });
                Index++;
            }
            if (this.DBStandort.MitarbeiterauswahlStandortfilter !== null) {
                this.Auswahlindex = lodash.findIndex(this.Pool.Standorteliste, { _id: this.DBStandort.MitarbeiterauswahlStandortfilter._id });
            }
            else
                this.Auswahlindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projekt Liste', 'MitarebiterStandortfilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    MitarbeiterauswahlOkButtonClicked(idliste) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Teamteilnehmer:
                    this.DB.CurrentProtokoll.BeteiligtInternIDListe = idliste;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Teamteilnehmer:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeInternIDListe = idliste;
                    break;
            }
            this.ShowMitarbeiterauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'MitarbeiterauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    BeteiligteauswahlOkButtonClicked(idliste) {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Beteilgtenteilnehmer:
                    this.DB.CurrentProtokoll.BeteiligExternIDListe = idliste;
                    break;
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer:
                    this.DBProjektpunkte.CurrentProjektpunkt.ZustaendigeExternIDListe = idliste;
                    break;
            }
            this.ShowBeteiligteauswahl = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'BeteiligteauswahlOkButtonClicked', this.Debug.Typen.Page);
        }
    }
    LeistungsphaseClickedHandler() {
        try {
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Editor_Leistungsphase;
            this.Auswahltitel = 'Leistungsphase festlegen';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.DB.Leistungsphasenvarianten.LPH1, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH1 });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.DB.Leistungsphasenvarianten.LPH2, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH2 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.DB.Leistungsphasenvarianten.LPH3, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH3 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.DB.Leistungsphasenvarianten.LPH4, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH4 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.DB.Leistungsphasenvarianten.LPH5, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH5 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: this.DB.Leistungsphasenvarianten.LPH6, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH6 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: this.DB.Leistungsphasenvarianten.LPH7, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH7 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: this.DB.Leistungsphasenvarianten.LPH8, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH8 });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { FirstColumn: this.DB.CurrentProtokoll.Leistungsphase });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'LeistungsphaseClickedHandler', this.Debug.Typen.Page);
        }
    }
    TeamteilnehmerClickedHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DB.CurrentProtokoll.BeteiligtInternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Teamteilnehmer;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'TeamteilnehmerClickedHandler', this.Debug.Typen.Page);
        }
    }
    BeteiligteteilnehmerClickedHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DB.CurrentProtokoll.BeteiligExternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Beteilgtenteilnehmer;
            this.ShowBeteiligteauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'BeteiligteteilnehmerClickedHandler', this.Debug.Typen.Page);
        }
    }
    GetBeteiligtenauswahlTitel() {
        try {
            switch (this.Auswahldialogorigin) {
                case this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Protokolleditor_Beteilgtenteilnehmer:
                    return 'Projektbeteiligtenteilnehmer festlegen';
                    break;
                default:
                    return 'unbekannt';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'GetBeteiligtenauswahlTitel', this.Debug.Typen.Page);
        }
    }
    GetProjektpunkteditorTitel() {
        try {
            return this.DBProjektpunkte.CurrentProjektpunkt._id !== null ? 'Protokollpunkt bearbeiten' : 'Neuen Protokollpunkt erstellen';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'GetProjektpunkteditorTitel', this.Debug.Typen.Page);
        }
    }
    AddProtokollpunktClickedHandler() {
        try {
            if (this.DB.CurrentProtokoll._id === null) {
                this.DB.SaveProtokoll().then(() => {
                    this.DBProjektpunkte.CurrentProjektpunkt = this.DBProjektpunkte.GetNewProtokollpunkt(this.DB.CurrentProtokoll);
                    this.ShowProjektpunktEditor = true;
                });
            }
            else {
                this.DBProjektpunkte.CurrentProjektpunkt = this.DBProjektpunkte.GetNewProtokollpunkt(this.DB.CurrentProtokoll);
                this.ShowProjektpunktEditor = true;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'AddProtokollpunktClickedHandler', this.Debug.Typen.Page);
        }
    }
    StatusClickedHandler() {
        try {
            this.Auswahltitel = 'Stataus festlegen';
            this.Auswahlliste = [];
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Status;
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Projektpunktstatustypen.Protokollpunkt.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Protokollpunkt.Name });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Projektpunktstatustypen.Offen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Offen.Name });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Projektpunktstatustypen.Bearbeitung.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Bearbeitung.Name });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.Const.Projektpunktstatustypen.Geschlossen.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Geschlossen.Name });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.Const.Projektpunktstatustypen.Ruecklauf.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Ruecklauf.Name });
            this.Auswahlliste.push({ Index: 5, FirstColumn: this.Const.Projektpunktstatustypen.Festlegung.Displayname, SecoundColumn: '', Data: this.Const.Projektpunktstatustypen.Festlegung.Name });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: this.DBProjektpunkte.CurrentProjektpunkt.Status });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'StatusClickedHandler', this.Debug.Typen.Page);
        }
    }
    FachbereichClickedHandler() {
        this.Auswahltitel = 'Stataus festlegen';
        this.Auswahlliste = [];
        this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Fachbereich;
        this.Auswahlliste.push({ Index: 0, FirstColumn: this.Const.Fachbereiche.unbekannt, SecoundColumn: '', Data: this.Const.Fachbereiche.unbekannt });
        this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.Elektrotechnik, SecoundColumn: '', Data: this.Const.Fachbereiche.Elektrotechnik });
        this.Auswahlliste.push({ Index: 1, FirstColumn: this.Const.Fachbereiche.HLS, SecoundColumn: '', Data: this.Const.Fachbereiche.HLS });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Heizung, SecoundColumn: '', Data: this.Const.Fachbereiche.Heizung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Lueftung, SecoundColumn: '', Data: this.Const.Fachbereiche.Lueftung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Sanitaer, SecoundColumn: '', Data: this.Const.Fachbereiche.Sanitaer });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.Klimatisierung, SecoundColumn: '', Data: this.Const.Fachbereiche.Klimatisierung });
        this.Auswahlliste.push({ Index: 2, FirstColumn: this.Const.Fachbereiche.MSR, SecoundColumn: '', Data: this.Const.Fachbereiche.MSR });
        this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: this.DBProjektpunkte.CurrentProjektpunkt.Fachbereich });
        this.ShowAuswahl = true;
    }
    catch(error) {
        this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'FachbereichClickedHandler', this.Debug.Typen.Page);
    }
    ZustaendigInternHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DB.CurrentProtokoll.BeteiligtInternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Teamteilnehmer;
            this.ShowMitarbeiterauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ZustaendigInternHandler', this.Debug.Typen.Page);
        }
    }
    ZustaendigExternHandler() {
        try {
            this.AuswahlIDliste = lodash.cloneDeep(this.DB.CurrentProtokoll.BeteiligExternIDListe);
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer;
            this.ShowBeteiligteauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ZustaendigExternHandler', this.Debug.Typen.Page);
        }
    }
    KostengruppeClickedHandler() {
        try {
            this.ShowKostengruppenauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, '', 'KostengruppeClickedHandler', this.Debug.Typen.Page);
        }
    }
    GebaeudeteilClickedHandler() {
        try {
            this.ShowRaumauswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'GebaeudeteilClickedHandler', this.Debug.Typen.Page);
        }
    }
    LeistungsphaseFilterClickedHanlder() {
        try {
            let Data = this.DB.Leistungsphasenfilter !== null ? this.DB.Leistungsphasenfilter : this.Const.NONE;
            this.Auswahldialogorigin = this.Auswahlservice.Auswahloriginvarianten.Protokollliste_Filter_Leistungsphase;
            this.Auswahltitel = 'Leistungsphase filtern';
            this.Auswahlliste = [];
            this.Auswahlliste.push({ Index: 0, FirstColumn: 'kein Filter', SecoundColumn: '', Data: this.Const.NONE });
            this.Auswahlliste.push({ Index: 1, FirstColumn: this.DB.Leistungsphasenvarianten.LPH1, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH1 });
            this.Auswahlliste.push({ Index: 2, FirstColumn: this.DB.Leistungsphasenvarianten.LPH2, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH2 });
            this.Auswahlliste.push({ Index: 3, FirstColumn: this.DB.Leistungsphasenvarianten.LPH3, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH3 });
            this.Auswahlliste.push({ Index: 4, FirstColumn: this.DB.Leistungsphasenvarianten.LPH4, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH4 });
            this.Auswahlliste.push({ Index: 5, FirstColumn: this.DB.Leistungsphasenvarianten.LPH5, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH5 });
            this.Auswahlliste.push({ Index: 6, FirstColumn: this.DB.Leistungsphasenvarianten.LPH6, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH6 });
            this.Auswahlliste.push({ Index: 7, FirstColumn: this.DB.Leistungsphasenvarianten.LPH7, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH7 });
            this.Auswahlliste.push({ Index: 8, FirstColumn: this.DB.Leistungsphasenvarianten.LPH8, SecoundColumn: '', Data: this.DB.Leistungsphasenvarianten.LPH8 });
            this.Auswahlindex = lodash.findIndex(this.Auswahlliste, { Data: Data });
            this.ShowAuswahl = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'LeistungsphaseFilterClickedHanlder', this.Debug.Typen.Page);
        }
    }
    ZeitspanneFilterClickedHandler() {
        try {
            this.ShowZeitspannefilter = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ZeitspanneFilterClickedHandler', this.Debug.Typen.Page);
        }
    }
    PrepareData() {
        try {
            let Anzahl;
            let Projektpunkt;
            if (this.DBProjekte.CurrentProjekt !== null) {
                if (!lodash.isUndefined(this.Pool.Protokollliste[this.DBProjekte.CurrentProjekt.Projektkey])) {
                    this.Protokollliste = lodash.cloneDeep(this.Pool.Protokollliste[this.DBProjekte.CurrentProjekt.Projektkey]);
                }
                else {
                    this.Protokollliste = [];
                }
            }
            else {
                this.Protokollliste = [];
            }
            this.Protokollliste.forEach((Protokoll) => {
                Anzahl = 0;
                Protokoll.ProjektpunkteIDListe.forEach((ProjektpunktID) => {
                    Projektpunkt = lodash.find(this.Pool.Projektpunkteliste[Protokoll.Projektkey], { _id: ProjektpunktID });
                    if (!lodash.isUndefined(Projektpunkt)) {
                        if (Projektpunkt.Status === this.Const.Projektpunktstatustypen.Offen.Name)
                            Anzahl++;
                    }
                });
                Protokoll.Punkteanzahl = Anzahl;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'PrepareData', this.Debug.Typen.Page);
        }
    }
    ProtokollClicked(Protokoll) {
        try {
            this.DB.CurrentProtokoll = lodash.cloneDeep(Protokoll);
            this.ShowProtokollEditor = true;
            this.Dialogbreite = 950;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ProtokollClicked', this.Debug.Typen.Page);
        }
    }
    ProtokollpunktClickedHandler(projetpunkt) {
        try {
            this.DBProjektpunkte.CurrentProjektpunkt = lodash.cloneDeep(projetpunkt);
            this.ShowProjektpunktEditor = true;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Protokoll Liste', 'ProtokollpunktClickedHandler', this.Debug.Typen.Page);
        }
    }
};
PjProtokolleListePage.ctorParameters = () => [
    { type: display_service_1.DisplayService },
    { type: basics_1.BasicsProvider },
    { type: auswahl_dialog_service_1.AuswahlDialogService },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: database_projektpunkte_service_1.DatabaseProjektpunkteService },
    { type: database_standorte_service_1.DatabaseStandorteService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: const_1.ConstProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: debug_1.DebugProvider }
];
PjProtokolleListePage.propDecorators = {
    PageHeader: [{ type: core_1.ViewChild, args: ['PageHeader', { static: false },] }],
    PageFooter: [{ type: core_1.ViewChild, args: ['PageFooter', { static: false },] }]
};
PjProtokolleListePage = tslib_1.__decorate([
    (0, core_1.Component)({
        selector: 'pj-protokolle-liste-page',
        template: __webpack_require__(/*! ./pj-protokolle-liste.page.html?ngResource */ 34576),
        styles: [__webpack_require__(/*! ./pj-protokolle-liste.page.scss?ngResource */ 97461)]
    })
], PjProtokolleListePage);
exports.PjProtokolleListePage = PjProtokolleListePage;


/***/ }),

/***/ 45561:
/*!********************************************!*\
  !*** ./src/app/pipes/prettyjson.module.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrettyjsonModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const prettyjson_pipe_1 = __webpack_require__(/*! ./prettyjson.pipe */ 14488);
let PrettyjsonModule = class PrettyjsonModule {
};
PrettyjsonModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            prettyjson_pipe_1.PrettyjsonPipe
        ],
        exports: [
            prettyjson_pipe_1.PrettyjsonPipe
        ],
        imports: [],
        providers: []
    })
], PrettyjsonModule);
exports.PrettyjsonModule = PrettyjsonModule;


/***/ }),

/***/ 14488:
/*!******************************************!*\
  !*** ./src/app/pipes/prettyjson.pipe.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrettyjsonPipe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
let PrettyjsonPipe = class PrettyjsonPipe {
    transform(value, ...args) {
        return JSON.stringify(value, null, 2)
            .replace(/ /g, '&nbsp;') // note the usage of `/ /g` instead of `' '` in order to replace all occurences
            .replace(/\n/g, '<br/>'); // same here
    }
};
PrettyjsonPipe = tslib_1.__decorate([
    (0, core_1.Pipe)({
        name: 'prettyjson'
    })
], PrettyjsonPipe);
exports.PrettyjsonPipe = PrettyjsonPipe;


/***/ }),

/***/ 97154:
/*!*******************************************!*\
  !*** ./src/app/pipes/safe.pipe.module.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SafePipeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const safe_pipe_1 = __webpack_require__(/*! ./safe.pipe */ 25436);
let SafePipeModule = class SafePipeModule {
};
SafePipeModule = tslib_1.__decorate([
    (0, core_1.NgModule)({
        declarations: [
            safe_pipe_1.SafePipe
        ],
        exports: [
            safe_pipe_1.SafePipe
        ],
        imports: [],
        providers: []
    })
], SafePipeModule);
exports.SafePipeModule = SafePipeModule;


/***/ }),

/***/ 25436:
/*!************************************!*\
  !*** ./src/app/pipes/safe.pipe.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SafePipe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ 34497);
let SafePipe = class SafePipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type) {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`Invalid safe type specified: ${type}`);
        }
    }
};
SafePipe.ctorParameters = () => [
    { type: platform_browser_1.DomSanitizer }
];
SafePipe = tslib_1.__decorate([
    (0, core_1.Pipe)({
        name: 'safe'
    })
], SafePipe);
exports.SafePipe = SafePipe;


/***/ }),

/***/ 47059:
/*!*******************************************************************!*\
  !*** ./src/app/services/auswahl-dialog/auswahl-dialog.service.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuswahlDialogService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
let AuswahlDialogService = class AuswahlDialogService {
    constructor(Debug) {
        this.Debug = Debug;
        this.Auswahloriginvarianten = {
            Projekteliste_Standortfiler: 'Projekteliste_Standortfiler',
            Projekte_Editor_Standort: 'Projekte_Editor_Standortfilter',
            Projekte_Editor_Mitarbeiterauswahl_Projektleiter: 'Projekte_Editor_Mitarbeiterauswahl_Projektleiter',
            Projekte_Editor_Mitarbeiterauswahl_Stellvertreter: 'Projekte_Editor_Mitarbeiterauswahl_Stellvertreter',
            Projekte_Editor_Mitarbeiterauswahl_Standortfilter: 'Projekte_Editor_Mitarbeiterauswahl_Standortfilter',
            Projekte_Editor_Projektstatus: 'Projekte_Editor_Projektstatus',
            Projekte_Editor_Beteiligteneditor: 'Projekte_Editor_Beteiligteneditor',
            Favoriten_Editor_Projekteauswahl_Standortfilter: 'Favoriten_Editor_Projekteauswahl_Standortfilter',
            Mitarbeiter_Editor_Standort: 'Mitarbeiter_Editor_Standort',
            Mitarbeiter_Editor_Fachbereich: 'Mitarbeiter_Editor_Fachbereich',
            Mitarbeiter_Liste_Standortfilter: 'Mitarbeiter_Liste_Standortfilter',
            Aufgabenliste_ZustaendigExtern: 'Aufgabenliste_ZustaendigExtern',
            Aufgabenliste_ZustaendigIntern: 'Aufgabenliste_ZustaendigIntern',
            Aufgabenliste_Fortschritt: 'Aufgabenliste_Fortschritt',
            Aufgabenliste_Zeitfilter: 'Aufgabenliste_Zeitfilter',
            Aufgabenliste_Filter_Zeitspanne: 'Aufgabenliste_Filter_Zeitspanne',
            Aufgabenliste_Editor_Fachbereich: 'Aufgabenliste_Editor_Fachbereich',
            Aufgabenliste_Editor_Status: 'Aufgabenliste_Editor_Status',
            Aufgabenliste_Editor_Standortfilter: 'Aufgabenliste_Editor_Standortfilter',
            Aufgabenliste_Editor_ZustaendigExtern: 'Aufgabenliste_Editor_ZustaendigExtern',
            Aufgabenliste_Editor_ZustaendigIntern: 'Aufgabenliste_Editor_ZustaendigIntern',
            Aufgabenliste_Meintageintrag_Status: 'Aufgabenliste_Meintageintrag_Status',
            Protokollliste_Editor_Leistungsphase: 'Protokollliste_Editor_Leistungsphase',
            Protokollliste_Protokolleditor_Teamteilnehmer: 'Protokollliste_Protokolleditor_Teamteilnehmer',
            Protokollliste_Projektpunkteditor_Teamteilnehmer: 'Protokollliste_Projektpunkteditor_Teamteilnehmer',
            Protokollliste_Protokolleditor_Beteilgtenteilnehmer: 'Protokollliste_Protokolleditor_Beteilgtenteilnehmer',
            Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer: 'Protokollliste_Projektpunkteditor_Beteilgtenteilnehmer',
            Protokollliste_Projektpunkteditor_Status: 'Protokollliste_Projektpunkteditor_Status',
            Protokollliste_Projektpunkteditor_Fachbereich: 'Protokollliste_Projektpunkteditor_Fachbereich',
            Protokollliste_Filter_Leistungsphase: 'Protokollliste_Filter_Leistungsphase',
            Protokollliste_Filter_Zeitspanne: 'Protokollliste_Filter_Zeitspanne',
        };
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Dialog Auswahl', 'constructor', this.Debug.Typen.Service);
        }
    }
};
AuswahlDialogService.ctorParameters = () => [
    { type: debug_1.DebugProvider }
];
AuswahlDialogService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], AuswahlDialogService);
exports.AuswahlDialogService = AuswahlDialogService;


/***/ }),

/***/ 7183:
/*!*******************************************!*\
  !*** ./src/app/services/basics/basics.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasicsProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
let BasicsProvider = class BasicsProvider {
    constructor(platform, Const) {
        this.platform = platform;
        this.Const = Const;
        this.Pagebreite = 0;
        this.Pagehoehe = 0;
        this.Headerhoehe = 0;
        this.Footerhoehe = 0;
        this.Contenthoehe = 0;
        this.Contentbreite = 0;
        this.InnerContenthoehe = 0;
        this.Waittime = 300;
        this.ClickTime = 130;
        this.Svgpath = 'assets/svgs/';
        this.AppVersionName = '0.01';
        this.AppVersionDatum = '16.12.2022';
        this.DeveloperEmail = 'p.hornburger@gmil.com';
        this.DeveloperName = 'Hornburger';
        this.DeveloperVorname = 'Peter';
        this.Farben = {
            Gruen: '#006400',
            Burnicklgruen: '#c7d304',
            Buttoncolor: '#444444',
            Blau: '#00008B',
            Orange: '#FF8C00',
            Bordercolor: '#3880ff',
            Burnicklbraun: '#7b6a58',
            Burnicklgrau: '#354547',
            ButtongrauDisabled: '#444444'
        };
        this.Ionicfarben = {
            BurnicklGruen: 'burnicklgruen',
            BurnicklGrau: 'burnicklgrau',
            BurnicklBraun: 'burnicklbraun',
            Gruen: 'gruen',
            Orange: 'orange',
            Grau: 'grau',
            Silber: 'silber',
            Schwarz: 'schwarz',
            Weiss: 'weiss',
            Rot: 'rot',
            Blau: 'blau',
            Dunkelblau: 'dunkelblau',
            Braun: 'braun',
            Teal: 'teal',
            Gelb: 'gelb'
        };
        // public Firmendaten: Firmendatenstruktur = null;
        // public Mitarbeiterdaten: Mitarbeiterstruktur = null;
        // public Firmenadresse: Adressbuchstruktur;
        this._Audioprofilindex = 1;
        this.ShowFehlerbericht = true;
        // private _AppName: string = this.AppNameShort;
        this.IsAdmin = false;
        /*
    
        this._StoreAppID = [];
        this._StoreAppID.android_pro  = 'de.kabelbuecherei.pro';
        this._StoreAppID.android_edu  = 'de.kabelbuecherei.edu';
        this._StoreAppID.android_lite = 'de.kabelbuecherei.application';
        this._StoreAppID.ios_pro      = 'id1124298404';
        this._StoreAppID.ios_lite     = 'id1184167292';
        this._StoreAppID.ios_edu      = 'id1217097549';
    
        this._Zeitjahresuebersichtsetup = {
    
          Abkuerzungen: false,
          Abwesenheit: false,
          Arbeitszeit: true,
          Krankenstand: false,
          Pause: false,
          Regiestunden: true,
          Stunden: true,
          Ueberstunden: true,
          Urlaub: false
        };
    
        this.DebugMessage = [];
         */
    }
    /*
  set Synchzeitraumindex(value: number) { this._Synchzeitraumindex = value; }
  set Audioprofilindex  (value: number) { this._Audioprofilindex   = value; }
  set Startseitesetup   (value: Startseitestruktur) { this._Startseitesetup          = value; }
  set Zeiterfassungsetup   (value: Zeiterfassungsetupstruktur) { this._Zeiterfassungsetup         = value; }
  set Zeitjahresuebersichtsetup   (value: Jahresuebersichtsetupstruktur) { this._Zeitjahresuebersichtsetup          = value; }
  set ZeitMonatsuebersichtsetup   (value: Jahresuebersichtsetupstruktur) { this._ZeitMonatsuebersichtsetup          = value; }

  get Datapath          ():any { return this._Datapath; }
  get Zeitjahresuebersichtsetup   ():Jahresuebersichtsetupstruktur { return this._Zeitjahresuebersichtsetup; }
  get ZeitMonatsuebersichtsetup   ():Jahresuebersichtsetupstruktur { return this._ZeitMonatsuebersichtsetup; }
  get Startseitesetup   ():Startseitestruktur { return this._Startseitesetup; }
  get Zeiterfassungsetup   ():Zeiterfassungsetupstruktur { return this._Zeiterfassungsetup; }
  get Audioprofilindex  ():number { return this._Audioprofilindex  ; }
  get AppVersionDatum    ():string { return this._AppVersionDatum            ; }
  get Urlaubsanspruch(): number { return this._Urlaubsanspruch           ; }
  get AppName(): string { return this._AppName; }
  get Developeremail(): string      { return this._Developeremail;     }
  get AppVersionName(): string      { return this._AppVersionName;     }
  get AppVersion(): number      { return this._AppVersion;     }
  get ConsolenOutput(): boolean { return this._ConsolenOutput; }
  get Sprache():string          { return this._Sprache; }
  get Waittime():number         { return this._Waittime; }

  get Imagepath(): string { return this._Imagepath; }
  get Iconpath(): string { return this._Iconpath; }
  get Svgpath(): string { return this._Svgpath; }
  get Buttoniconpath(): string { return this._Buttoniconpath; }

  get Backgroundcolor(): string { return this._Backgroundcolor; }

  get NoSpacingClass(): string { return this._NoSpacingClass; }
  get InfoTableClass(): string { return this._InfoTableClass; }
  get TableSpacingClass(): string { return this._TableSpacingClass; }
  get TablePaddingClass(): string { return this._TablePaddingClass; }
  get MathWhiteClass(): string { return this._MathWhiteClass; }
  get MathBlueClass(): string { return this._MathBlueClass; }
  get Pagehoehe(): number        { return this._Pagehoehe;   }
  get Contenthoehe(): number     { return this._Contenthoehe; }
  get Contentbreite(): number     { return this._Contentbreite; }
  get InnerContenthoehe(): number     { return this._InnerContenthoehe; }
  get Buttonbreite(): number { return this._Buttonbreite; }
  get Buttonhoehe(): number { return this._Buttonhoehe; }
  get Buttonabstand(): number { return this._Buttonabstand; }
  get Buttoncolor(): string { return this._Buttoncolor; }
  get Buttonclickedcolor(): string { return this._Buttonclickedcolor; }
  get Buttonaktivcolor(): string { return this._Buttonaktivcolor; }
  get Menubuttonhoehe(): number { return this._Menubuttonhoehe; }
  get Einheitenbreite(): number { return this._Einheitenbreite; }
  get Headerhoehe(): number { return this._Headerhoehe; }
  get PageBorderbreite(): number { return this._PageBorderbreite; }
  get Titelcolor(): string { return this._Titelcolor; }
  get Bordercolor(): string { return this._Bordercolor; }
  get Contentcolor(): string { return this._Contentcolor; }
  get Titelschriftgroesse(): number { return this._Titelschriftgroesse; }
  get TabletMenufaktor(): number { return this._TabletMenufaktor; }
  get CanPlaySound(): boolean { return this._CanPlaySound; }
  get ClickTime(): number { return this._ClickTime; }
  get Timeout(): number { return this._Timeout; }
  get Infobreite(): number { return this._Infobreite; }
  get ValueButtonabstand(): number { return this._ValueButtonabstand; }


  */
    /*
  
    public GetNewMitarbeitersettings(): Mitarbeitersettingsstruktur {
  
      try {
  
        return {
  
          _id:                     null,
          MitarbeiterID:           null,
          FavoritenID:             null,
          ProjektID:               null,
          StandortFilter:          null,
          AufgabenShowBearbeitung: true,
          AufgabenShowGeschlossen: false,
          AufgabenShowOffen:       true,
          AufgabenShowRuecklauf:   true,
          Deleted:                 false
  
          /*
          StandortFilter:         this.Const.NONE,
          ProjektID:              this.Const.NONE,
          Faelligkeitsspanne:     this.Const.NONE,
          Listenmodus:            this.Const.NONE,
          FilterShowBearbeitung:  true,
          FilterShowGeschlossen:  true,
          FilterShowMeilensteine: true,
          FilterShowOffen:        true,
          FilterShowRuecklauf:    true,
          FilterShowFaelligOnly:  false,
          LOPShowEmptyProjekte:   false,
          LOPFullscreen:          false,
          HeadermenueMaxProjekte: 6,
  
          Zeitfilter:             this.Const.NONE,
          Einfachlistefeldersettings:  this.GetLOPListefelderEinfachSetting(),
          Zweifachlistefeldersettings: this.GetLOPListefelderZweifachSetting(),
          Dreifachlistefeldersettings: this.GetLOPListefelderDreifachSetting()
  
           */
    /*
        };
  
      } catch (error) {
  
        console.log(error.message);
      }
  
    }
     */
    GetLOPListefelderEinfachSetting() {
        try {
            return {
                ShowAufgabe: true,
                ShowBemerkung: true,
                ShowNummer: true,
                ShowStartdatum: true,
                ShowStatus: true,
                ShowTage: true,
                ShowTermin: true,
                ShowFortschritt: true,
                ShowZustaendig: true,
                ShowMeintag: true,
                ShowZeitansatz: true
            };
        }
        catch (error) {
        }
    }
    GetLOPListefelderZweifachSetting() {
        try {
            return {
                ShowAufgabe: true,
                ShowBemerkung: true,
                ShowNummer: true,
                ShowStartdatum: true,
                ShowTermin: true,
                ShowTage: false,
                ShowStatus: true,
                ShowFortschritt: false,
                ShowZustaendig: false,
                ShowMeintag: true,
                ShowZeitansatz: false,
            };
        }
        catch (error) {
        }
    }
    GetLOPListefelderDreifachSetting() {
        try {
            return {
                ShowNummer: false,
                ShowStartdatum: false,
                ShowAufgabe: true,
                ShowBemerkung: false,
                ShowTermin: true,
                ShowTage: false,
                ShowStatus: true,
                ShowFortschritt: false,
                ShowZustaendig: false,
                ShowMeintag: true,
                ShowZeitansatz: false
            };
        }
        catch (error) {
        }
    }
    MeassureInnercontent(header, footer) {
        try {
            if (typeof header !== 'undefined' && header !== null) {
                this.Headerhoehe = header.PageHeaderDiv.nativeElement.clientHeight;
            }
            else
                this.Headerhoehe = 56;
            if (typeof footer !== 'undefined' && footer !== null) {
                this.Footerhoehe = footer.PageFooterFrameDiv.nativeElement.clientHeight;
            }
            else
                this.Footerhoehe = 55;
            this.InnerContenthoehe = this.Contenthoehe - this.Headerhoehe - this.Footerhoehe;
            console.log('Basics MeassureScreen -> Screenbreite: ' + this.platform.width() + ' / Screenhoehe: ' + this.platform.height());
            console.log('Basics MeassureScreen -> Headerhoehe: ' + this.Headerhoehe + ' / Footerhoehe: ' + this.Footerhoehe);
            console.log('Basics MeassureScreen -> InnerContenthoehe: ' + this.InnerContenthoehe);
        }
        catch (error) {
            window.console.log(error + ' / Basics ' + ' / MeassureInnercontent ');
        }
    }
};
BasicsProvider.ctorParameters = () => [
    { type: angular_1.Platform },
    { type: const_1.ConstProvider }
];
BasicsProvider = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], BasicsProvider);
exports.BasicsProvider = BasicsProvider;


/***/ }),

/***/ 55005:
/*!*****************************************!*\
  !*** ./src/app/services/const/const.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConstProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const _MitarbeiterdatenKeys = {
    MitarbeiterID: 'MitarbeiterID',
    Typ: 'Typ',
    Name: 'Name',
    Vorname: 'Vorname',
    Strasse: 'Strasse',
    PLZ: 'PLZ',
    Ort: 'Ort',
    Telefon: 'Telefon',
    Mobil: 'Mobil',
    Email: 'Email',
    Possition: 'Possition',
    Zeit: 'Zeit',
    Zeitstempel: 'Zeitstempel',
    Aktiviert: 'Aktiviert',
    Verified: 'Verified',
    OS: 'OS',
    Passwort: 'Passwort',
    UserID: 'UserID',
    Rechte: 'Rechte',
    Working: 'Working',
    KolonnenfuehrerID: 'KolonnenfuehrerID',
    Settings: 'Settings',
    Startseitensetup: 'Startseitensetup',
    Zeitmonatsuebersichtsetup: 'Zeitmonatsuebersichtsetup',
    Zeitjahresuebersichtsetup: 'Zeitjahresuebersichtsetup',
    KolonnenmitgliederIDListe: 'KolonnenmitgliederIDListe',
    Regelarbeitszeit: 'Regelarbeitszeit',
    Datastatus: 'Datastatus',
    Formelsammlung: 'Formelsammlung',
    Schaltplaene: 'Schaltplaene',
    Steckerbelegungen: 'Steckerbelegungen',
    Shortcuts: 'Shortcuts',
    Baustelle: 'Baustelle',
    Aufgaben: 'Aufgaben',
    Material: 'Material',
    Notizen: 'Notizen',
    Arbeitstag: 'Arbeitstag',
    Tagebuch: 'Tagebuch',
    News: 'News',
    Zeiterfassung: 'Zeiterfassung',
    Zeituebersicht: 'Zeituebersicht',
    Zeiterfassungsetup: 'Zeiterfassungsetup',
    Kamerasettings: 'Kamerasettings',
    LastDokumentID: 'LastDokumentID',
    Tagebuchsetup: 'Tagebuchsetup'
};
const _Loginstatusvarianten = {
    ok: 'ok',
    out: 'out'
};
const _Playermodus = {
    Stopped: 'Stopped',
    Running: 'Running',
    Paused: 'Paused',
};
const _Dialogmessages = {
    ok: 'ok',
    no: 'no',
    cancel: 'cancel',
    delete: 'delete',
    wahla: 'wahla',
    wahlb: 'wahlb'
};
const _Mitarbeiterpossitionen = {
    Administrator: 'Administrator',
    Mitarbeiter: 'Mitarbeiter',
    Teamleiter: 'Teamleiter',
    Keine: 'Keine',
};
const _Nachrichtentypen = {
    Text: 'Text',
    Aufgabe: 'Aufgabe',
    AufgabeFinished: 'AufgabeFinished',
    Material: 'Material',
    MaterialFinished: 'MaterialFinished',
    Notiz: 'Notiz',
    Zeitmarke: 'Zeitmarke',
    Teambeitritt: 'Teambeitritt',
    Teamaustritt: 'Teamaustritt',
    Zeitdaten: 'Zeitdaten',
    Tagebuchbildrequest: 'Tagebuchbildrequest',
    TagebuchbildrequestFinished: 'TagebuchbildrequestFinished',
};
const _Nachrichtendirections = {
    OUT: 'OUT',
    IN: 'IN',
    NONE: 'NONE'
};
const _Adressbuchtypen = {
    Firma: 'Firma',
    Mitarbeiter: 'Mitarbeiter',
    Solo: 'Solo'
};
const _Mitarbeitertypen = {
    Firmengruender: 'Firmengruender',
    Mitarbeiter: 'Mitarbeiter',
    Solo: 'Solo'
};
const _Projektpunktdetailtyp = {
    Statusmeldung: 'Statusmeldung',
    Nextstep: 'Nextstep',
};
const _Platformliste = {
    WEB: 'web',
    ANDROID: 'android',
    IOS: 'ios'
};
const _Startseitensetupvarianten = {
    Shortcuts: 'Shortcuts',
    Baustelle: 'Baustelle',
    Aufgaben: 'Aufgaben',
    Material: 'Material',
    Notizen: 'Notizen',
    Tagebuch: 'Tagebuch',
    News: 'News',
    Arbeitstag: 'Arbeitstag'
};
const _Orientationvarianten = {
    Landscape: 'Landscape',
    Portrait: 'Portrait'
};
const _Virtualitemvarianten = {
    Eintrag: 'Eintrag',
    Alphabet: 'Alphabet',
    Abstand: 'Abstand',
    Button: 'Button'
};
const _Kartenadressentyp = {
    Kontakte: 'Kontakt',
    Firma: 'Firma',
    Mitarbeiter_Arbeit: 'Mitarbeiter_Arbeit',
    Mitarbeiter_Privat: 'Mitarbeiter_Privat'
};
const _Pages = {
    // Allgemein
    LoginPage: 'LoginPage',
    HomePage: 'HomePage',
    RegistrierungPage: 'RegistrierungPage',
    EinstellungenPage: 'EinstellungenPage',
    StartseitePage: 'StartseitePage',
    IntroPage: 'IntroPage',
    ShortcutsEditorPage: 'ShortcutsEditorPage',
    EmailzentralePage: 'EmailzentralePage',
    PasswortVergessenPage: 'PasswortVergessenPage',
    TestPage: 'TestPage',
    ErrorPage: 'ErrorPage',
    DebugPage: 'DebugPage',
    // Firma
    FiMitarbeiterlistePage: 'FiMitarbeiterlistePage',
    FiMitarbeiterauswahlPage: 'FiMitarbeiterauswahlPage',
    FiMitarbeiterSettingsPage: 'FiMitarbeiterSettingsPage',
    FiStandortelistePage: 'FiStandortelistePage',
    // Projekt
    PjListePage: 'PjListePage',
    PjLOPListePage: 'PjLOPListePage',
    PjGebaeudestrukturBearbeitenPage: 'PjGebaeudestrukturBearbeitenPage',
    PjGebaeudestrukturBauteilBearbeitenPage: 'PjGebaeudestrukturBauteilBearbeitenPage',
    PjGebaeudestrukturGeschossBearbeitenPage: 'PjGebaeudestrukturGeschossBearbeitenPage',
    PjGebaeudestrukturRaumBearbeitenPage: 'PjGebaeudestrukturRaumBearbeitenPage',
    PjGebaeudestrukturRaumMarkierenPage: 'PjGebaeudestrukturRaumMarkierenPage',
    PjFavoritenlistePage: 'PjFavoritenlistePage',
    PJProjektbeteiligtelistePage: 'PJProjektbeteiligtelistePage',
    PjEmailzentralePage: 'PjEmailzentralePage',
    PjProtokollSendeberichtPage: 'PjProtokollSendeberichtPage',
    PjFestlegungListePage: 'PjFestlegungListePage',
    PjFestlegungkategorieeditorPage: 'PjFestlegungkategorieeditorPage',
    PjNotizenlistePage: 'PjNotizenlistePage',
    PjAufgabenlistePage: 'PjAufgabenlistePage',
    PjProtokolleListePage: 'PjProtokolleListePage'
};
const _Treeitemtypvarianten = {
    Strukturknoten: 'Strukturknoten',
    Struktureintrag: 'Struktureintrag',
    Strukturchild: 'Strukturchild',
    Dateneintrag: 'Dateneintrag',
    Datenchild: 'Datenchild',
    Datenknoten: 'Datenknoten'
};
const _Planlistentyp = {
    Gesamtgebaeude: 'Gesamtgebaeude',
    Bauteil: 'Bauteil',
    Geschoss: 'Geschoss'
};
const _Dokumentelementtypen = {
    Betriebsmittel: 'Betriebsmittel',
    Anmerkung: 'Anmerkung',
    Markierung: 'Markierung'
};
const _Planmodusvarianten = {
    RaumMarkieren: 'RaumMarkieren',
    RaumMarkierenZoomen: 'RaumMarkierenZoomen',
    SkalierePlan: 'SkalierePlan',
    ViewPlan: 'ViewPlan',
    PlanMessen: 'PlanMessen',
    RaumbuchUebersicht: 'RaumbuchUebersicht',
    RaumbuchEditorZoom: 'RaumbuchEditorZoom',
    RaumbuchEditorPlaceBetriebsmittel: 'RaumbuchEditorPlaceBetriebsmittel',
    RaumbuchEditorReplaceBetriebsmittel: 'RaumbuchEditorReplaceBetriebsmittel',
    RaumbuchEditorBearbeiteBetriebsmittel: 'RaumbuchEditorBearbeiteBetriebsmittel',
    RaumbuchEditorResizeAnmerkung: 'RaumbuchEditorResizeAnmerkung',
    RaumbuchEditorPlaceAnmerkung: 'RaumbuchEditorPlaceAnmerkung',
    RaumbuchEditorReplaceAnmerkung: 'RaumbuchEditorReplaceAnmerkung',
    RaumbuchEditorSetAnmerkungLocation: 'RaumbuchEditorSetAnmerkungLocation',
};
const _Zeiteintraegetypen = {
    Platzhalter: 'Platzhalter',
    Externtag: 'Externtag',
    Freizeit: 'Freizeit',
    Abwesenheit: 'Abwesenheit',
    Arbeitszeit: 'Arbeitszeit',
    Regiearbeitszeit: 'Regiearbeitszeit',
    Urlaub: 'Urlaub',
    Feiertag: 'Feiertag',
    Krankenstand: 'Krankenstand',
    Ueberstunden: 'Ueberstunden',
    Zeitrahmendaten: 'Zeitrahmendaten',
    Leerzeit: 'Leerzeit',
    Zusatzzeit: 'Zusatzzeit',
    Leer: 'Leeer',
    Titel: 'Titel',
    Ungenutzt: 'Ungenutzt',
    Kalenderwoche: 'Kalenderwoche',
    Summe: 'Summe'
};
const _Tagtypen = {
    Arbeitstag: 'Arbeitstag',
    Urlaubstag: 'Urlaub',
    Feiertag: 'Feiertag',
    Krankenstandtag: 'Krankenstandtag',
    Keintag: 'Keintag'
};
const _Tageseditormodus = {
    Eintrag: 'Eintrag',
    Tag: 'Tag',
    Urlaub: 'Urlaub',
    Krankenstand: 'Krankenstand',
    Feiertag: 'Feiertag'
};
const _Devicenamen = {
    iPhone: 'iPhone',
    iPhone_XsMax_Xr: 'iPhone_XsMax_Xr',
    iPhone_X_Xs: 'iPhone_X_Xs',
    iPhone_6p_6sp_7p_8p: 'iPhone_6p_6sp_7p_8p',
    iPhone_6_6s_7_8: 'iPhone_6_6s_7_8',
    iPhone_5_5s_5c_SE: 'iPhone_5_5s_5c_SE',
    iPad: 'iPad',
    iPad_9_Zoll: 'iPad_9_Zoll',
    iPad_10_Zoll: 'iPad_10_Zoll',
    iPad_12_Zoll: 'iPad_12_Zoll',
    Unbekannt: 'Unbekannt'
};
const _Beteiligteneintragtypen = {
    Person: 'Person',
    Firma: 'Firma'
};
const _Beteiligtentypen = {
    Unbekannt: {
        Typnummer: 0,
        Name: 'Unbekannt',
        Color: '#ff6600'
    },
    Architekt: {
        Typnummer: 1,
        Name: 'Architekt',
        Color: '#ff6600'
    },
    Elektroplaner: {
        Typnummer: 2,
        Name: 'ELT Planer',
        Color: '#3771c8'
    },
    HLSplaner: {
        Typnummer: 3,
        Name: 'HLS Planer',
        Color: '#3771c8'
    },
    Fachplaner: {
        Typnummer: 4,
        Name: 'Fachplaner',
        Color: '#3771c8'
    },
    Tragwerksplaner: {
        Typnummer: 5,
        Name: 'Tragwerksplaner',
        Color: '#3771c8'
    },
    Aussenanlagenarchitekt: {
        Typnummer: 6,
        Name: 'AuÃenanlagenarchitekt',
        Color: '#3771c8'
    },
    Bauherr: {
        Typnummer: 7,
        Name: 'Bauherr',
        Color: '#008000',
    },
    Nutzer: {
        Typnummer: 8,
        Name: 'Nutzer',
        Color: '#008000',
    },
    Pruefsachverstaendiger: {
        Typnummer: 9,
        Name: 'PrÃ¼fsachverstÃ¤ndiger',
        Color: '#008000',
    },
    Projektsteurer: {
        Typnummer: 10,
        Name: 'Projektsteurer',
        Color: '#008000',
    },
    Ausfuehrungsfirma: {
        Typnummer: 11,
        Name: 'AusfÃ¼hrende Firma',
        Color: '#008000',
    },
    Objektueberwacher: {
        Typnummer: 12,
        Name: 'ObjektÃ¼berwacher',
        Color: '#008000',
    },
    ITAbteilung: {
        Typnummer: 13,
        Name: 'IT - Abteilung',
        Color: '#008000',
    },
};
const _Editormodusvarianten = {
    Neu: 'Neu',
    Bearbeiten: 'Bearbeiten',
    Liste: 'Liste',
    Anzeigen: 'Anzaeigen',
    Blocked: 'Blocked',
    Auswahl: 'Auswahl',
    Filter: 'Filter'
};
const _Fachbereiche = {
    unbekannt: 'unbekannt',
    Elektrotechnik: 'Elektrotechnik',
    HLS: 'HLS',
    Heizung: 'Heizung',
    Lueftung: 'LÃ¼ftung',
    Sanitaer: 'SanitÃ¤r',
    Klimatisierung: 'Klimatisierung',
    MSR: 'MSR',
    Geschaeftsfuehrung: 'GeschÃ¤ftsfuehrung',
    Assistenz: 'Assistenz',
};
const _Eventvarianten = {
    Kontaktauswahl: 'Kontaktauswahl',
    Mitarbeiterauswahl: 'Mitarbeiterauswahl',
    Kontakteliste: 'Kontakteliste',
    Kontaktaenderung: 'Kontaktaenderung',
    Zeitdatenfavoriten: 'Zeitdatenfavoriten',
    ClearThumbnailmessage: 'ClearThumbnailmessage',
    BaustellenbereichWahl: 'BaustellenbereichWahl',
    BackButtonClicked: 'BackButtonClicked',
    TeamChanged: 'TeamChanged',
    AuthenticationReady: 'AuthenticationReady',
    BesprechungsteilnehmerExtern: 'BesprechungsteilnehmerExtern',
    BesprechungsteilnehmerIntern: 'BesprechungsteilnehmerIntern',
    ZustaendigkeitExtern: 'ZustaendigkeitExtern',
    ZustaendigkeitIntern: 'ZustaendigkeitIntern',
    Emailempfaenger: 'Emailempfaenger',
    Emailkopieempfaenger: 'Emailkopieempfaenger',
};
const _ZeiterfassungBerichttypen = {
    Jahresbericht: 'Jahresbericht',
    Monatsbericht: 'Monatsbericht',
    Wochenbericht: 'Wochenbericht',
    Tagesbericht: 'Tagesbericht',
};
const _Fehlermeldungtypen = {
    Script: 'Script',
    Sql: 'Sql',
    Transaction: 'Transaction',
    Firebase: 'Firebase'
};
const _Syncstatusvarianten = {
    Init: 'Init',
    Running: 'Running',
    Stopped: 'Stopped',
    Finished: 'Finished',
    Deviceeerror: 'Deviceerror',
    Interneterror: 'Interneterror',
    Datenerrror: 'Datenerrror',
    Synchron: 'Synchron',
    Asynchron: 'Asynchron',
    Uptodate: 'Uptodate',
    Servererror: 'Servererror',
    Databaseerror: 'Databaseerror',
    Unvollstaendig: 'Unvollstaendig'
};
const _Leistungsverzeichniskeys = {
    BoQBody: 'BoQBody',
    Award: 'Award',
    AwardInfo: 'AwardInfo',
    Remark: 'Remark',
    BoQCtgy: 'BoQCtgy',
    BoQInfo: 'BoQInfo',
    LblTx: 'LblTx',
    Itemlist: 'Itemlist',
    Item: 'Item',
    Description: 'Description',
    CtlgAssign: 'CtlgAssign' // Katalogzuordnung
};
const _Screensizekategorien = {
    XS_0: 'XS',
    SM_1: 'SM',
    MD_2: 'MD',
    LG_3: 'LG',
    XL_4: 'XL',
};
const _Leistungsverzeichnisitemtypen = {
    Titel: 'Titel',
    Position: 'Position',
    Hinweistext: 'Hinweistext',
};
const _Dokumentersteller = {
    Unbekannt: 'Unbekannt',
    Intern: 'Intern',
    Architekt: 'Architekt',
    Hersteller: 'Hersteller',
    Bauherr: 'Bauherr',
    Planungsbuero: 'PlanungsbÃ¼ro'
};
const _Projektstatusvarianten = {
    Bearbeitung: 'Bearbeitung',
    Abgeschlossen: 'Abgeschlossen',
    Ruht: 'Ruht'
};
const _Faelligkeitsstatus = {
    Faellig: 'Faellig',
    Ueberfaellig: 'Uberfaellig',
    Nicht_faellig: 'nicht faellig'
};
const _Zeitfilter = {
    Alle: 'Alle',
    Heute: 'Heute',
    Morgen: 'Morgen',
    Zweitage: '2 Tage',
    Woche: 'Woche',
    Naechstewoche: 'NÃ¤chste Woche',
    Zweiwochen: '2 Wochen',
    Vierwochen: '4 Wochen',
    Monat: 'Monat',
    Gestern: 'Gestern',
    Vorgestern: 'Vorgestern',
    ZweitageVorher: 'Letzten 2 Tage',
    WocheVorher: 'Letzte Woche',
    ZweiwochenVorher: 'Letzten 2 Wochen',
    MonatVorher: 'Letzter Monat',
};
const _Dokumententyp = {
    Unbekannt: 'Unbekannt',
    Grundriss: 'Grundriss',
    Verteilerbereiche: 'Verteilerbereiche',
    Elektroinstallation: 'Elektroinstallation',
    Erdung_Blitzschutz: 'Erdung- und Blitzschutzanlage',
    Schema: 'Schema',
    Leerrohrplanung: 'Leerrohrplanung',
    HLS: 'HLS',
    S_und_D: 'Schlitz- und Durchbruchsplanung'
};
const _Faelligkeitsspannen = {
    Diese_Woche: 'Diese Woche',
    Naechste_Woche: 'NÃ¤chste Woche',
    Fuenf_Arbeitstage: '5 Arbeitstage',
    Zehn_Arbeitstage: '10 Arbeitstage',
    Fuenfzehn_Arbeitstage: '15 Arbeitstage'
};
const _Anredevariante = {
    'Herr': 'Herr',
    'Frau': 'Frau',
    'Unbekannt': 'Unbekannt'
};
const _Zeitansatzeinheitvarianten = {
    'Minuten': 'Minuten',
    'Stunden': 'Stunden',
    'Tage': 'Tage'
};
const _Projektpunktstatustypen = {
    Offen: {
        Statusnummer: 0,
        Name: 'Offen',
        Displayname: 'Offen',
        Color: '#008080'
    },
    Protokollpunkt: {
        Statusnummer: 0,
        Name: 'Protokollpunkt',
        Displayname: 'Info',
        Color: '#34495E'
    },
    Geschlossen: {
        Statusnummer: 1,
        Name: 'Geschlossen',
        Displayname: 'Geschlossen',
        Color: '#008000'
    },
    Bearbeitung: {
        Statusnummer: 2,
        Name: 'Bearbeitung',
        Displayname: 'Bearbeitung',
        Color: '#616A6B'
    },
    Ruecklauf: {
        Statusnummer: 3,
        Name: 'Ruecklauf',
        Displayname: 'RÃ¼cklauf',
        Color: '#0020C2'
    },
    Festlegung: {
        Statusnummer: 4,
        Name: 'Festlegung',
        Displayname: 'Festlegung',
        Color: '#FF9333'
    },
};
const _Startterminfiltervarianten = {
    Nur_diese_Woche: 'Nur diese Woche',
    Nur_diesen_Monat: 'Nur diesen Monat',
    Seit_dem_Zeitpunkt: 'Seit dem Zeitpunkt',
    Bis_zum_Zeitpunkt: 'Bis zum Zeitpunkt',
    Zeitspanne: 'Zeitspanne',
};
const _Faelligkeitsterminfiltervarianten = {
    Nur_diese_Woche: 'Nur diese Woche',
    Nur_diesen_Monat: 'Nur diesen Monat',
    Seit_dem_Zeitpunkt: 'Seit dem Zeitpunkt',
    Bis_zum_Zeitpunkt: 'Bis zum Zeitpunkt',
    Zeitspanne: 'Zeitspanne',
};
const _AufgabenSortiermodusvarianten = {
    TermineAbsteigend: 'TermineAbsteigend',
    TermineAufsteigend: 'TermineAufsteigend',
};
let ConstProvider = class ConstProvider {
    constructor() {
        /*
        public readonly Editormodusvarianten      = _Editormodusvarianten;
        public readonly Eventvarianten            = _Eventvarianten;
        public readonly Zeiteintraegetypen        = _Zeiteintraegetypen;
        public readonly Tageseditormodus          = _Tageseditormodus;
        public readonly Startseitensetupvarianten = _Startseitensetupvarianten;
        public readonly Syncstatusvarianten       = _Syncstatusvarianten;
        public readonly Devicenamen               = _Devicenamen;
        public readonly Virtualitemvarianten      = _Virtualitemvarianten;
        public readonly Orientationvarianten      = _Orientationvarianten;
        public readonly Screensizekategorien      = _Screensizekategorien;
        public readonly Tagtypen                  = _Tagtypen;
        public readonly Platformliste             = _Platformliste;
        public Mitarbeiterpossitionen             = _Mitarbeiterpossitionen;
        public readonly Adressbuchtypen           = _Adressbuchtypen;
        public readonly Mitarbeitertypen          = _Mitarbeitertypen;
      
      
      
        public readonly DATABASE                  = 'Database';
        public readonly Nachrichtentypen          = _Nachrichtentypen;
        public readonly Nachrichtendirections     = _Nachrichtendirections;
        public readonly Playermodus               = _Playermodus;
      
        public readonly MitarbeiterdatenKeys      = _MitarbeiterdatenKeys;
        public readonly Loginstatusvarianten      = _Loginstatusvarianten;
        public readonly ZeiterfassungBerichttypen     = _ZeiterfassungBerichttypen;
        public readonly Kartenadressentyp             = _Kartenadressentyp;
        public readonly Treeitemtypvarianten          = _Treeitemtypvarianten;
        public readonly Planmodusvarianten        = _Planmodusvarianten;
        public readonly Leistungsverzeichniskeys      = _Leistungsverzeichniskeys;
        public readonly Leistungsverzeichnisitemtypen = _Leistungsverzeichnisitemtypen;
        public readonly Dokumentersteller             = _Dokumentersteller;
        public readonly Dokumententyp                 = _Dokumententyp;
        public readonly Dokumentelementtypen          = _Dokumentelementtypen;
        public readonly Planlistentyp                 = _Planlistentyp;
      
        public readonly Projektpunktdetailtyp         = _Projektpunktdetailtyp;
        public readonly Faelligkeitsspannen           = _Faelligkeitsspannen;
      
      
         */
        this.NONE = 'none';
        this.Pages = _Pages;
        this.Fehlermeldungtypen = _Fehlermeldungtypen;
        this.Dialogmessages = _Dialogmessages;
        this.Projektpunktstatustypen = _Projektpunktstatustypen;
        this.Zeitfilter = _Zeitfilter;
        this.Projektstatusvarianten = _Projektstatusvarianten;
        this.Faelligkeitsstatus = _Faelligkeitsstatus;
        this.Beteiligtentypen = _Beteiligtentypen;
        this.Beteiligteneintragtypen = _Beteiligteneintragtypen;
        this.Anredevariante = _Anredevariante;
        this.Zeitansatzeinheitvarianten = _Zeitansatzeinheitvarianten;
        this.Fachbereiche = _Fachbereiche;
        this.Faelligkeitsterminfiltervarianten = _Faelligkeitsterminfiltervarianten;
        this.AufgabenSortiermodusvarianten = _AufgabenSortiermodusvarianten;
    }
};
ConstProvider.ctorParameters = () => [];
ConstProvider = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], ConstProvider);
exports.ConstProvider = ConstProvider;


/***/ }),

/***/ 67334:
/*!*************************************************************************************!*\
  !*** ./src/app/services/database-authentication/database-authentication.service.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseAuthenticationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const localstorage_1 = __webpack_require__(/*! ../localstorage/localstorage */ 42117);
const environment_1 = __webpack_require__(/*! ../../../environments/environment */ 92340);
let DatabaseAuthenticationService = class DatabaseAuthenticationService {
    constructor(Debug, Const, StorgeService) {
        this.Debug = Debug;
        this.Const = Const;
        this.StorgeService = StorgeService;
        this.AuthenticationChanged = new core_1.EventEmitter();
        try {
            this.SecurityToken = this.Const.NONE;
            this.IsAuthenticated = true; // Unbedingt auf false setzen
            this.ActiveUser = {
                environment: "",
                homeAccountId: "",
                localAccountId: "",
                tenantId: "",
                username: "p.hornburger@burnickl.com",
                name: "Peter Hornburger"
            };
            // Test
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Authentication', 'cosntructor', this.Debug.Typen.Service);
        }
    }
    GetAuthenticationToken() {
        try {
            if (this.SecurityToken !== this.Const.NONE)
                return this.SecurityToken;
            else {
                return environment_1.environment.SecurityToken; // Einen Hilfstoken zur VerfÃ¼gung stellen in Configfile.gespeichert.
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Authentication', 'GetAuthenticationToken', this.Debug.Typen.Service);
        }
    }
    SetAuthenticationStatus() {
        try {
            // debugger;
            /*
            let activeAccount: AccountInfo = this.MSALService.instance.getActiveAccount();
      
            if(activeAccount === null && this.MSALService.instance.getAllAccounts().length > 0) {
      
              activeAccount = this.MSALService.instance.getAllAccounts()[0];
      
              this.MSALService.instance.setActiveAccount(activeAccount);
            }
      
             */
            this.IsAuthenticated = true; // activeAccount !== null ? true : false; // Im Construktor auf false setzren
            this.ActiveUsername = this.ActiveUser.username; //  activeAccount !== null ? activeAccount.username : this.Const.NONE;
            // this.ActiveUser      = null; // activeAccount;
            this.AuthenticationChanged.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Authentication', 'SetAuthenticationStatus', this.Debug.Typen.Service);
        }
    }
    Login() {
        try {
            /*
            this.MSALService.instance.loginRedirect({
      
              scopes: ["User.Read"]
            });
      
             */
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Authentication', 'Login', this.Debug.Typen.Service);
        }
    }
    Logout() {
        try {
            return new Promise((resolve, reject) => {
                this.StorgeService.RemoveSecurityToken().then(() => {
                    resolve(true);
                    /*
          
                    this.MSALService.instance.logoutRedirect().then(() => {
          
                      resolve(true);
          
                    }).catch((error: any) => {
          
                      reject(error);
          
                    });
          
                     */
                }).catch((error) => {
                    reject(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Authentication', 'Logout', this.Debug.Typen.Service);
        }
    }
};
DatabaseAuthenticationService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider },
    { type: localstorage_1.LocalstorageService }
];
DatabaseAuthenticationService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseAuthenticationService);
exports.DatabaseAuthenticationService = DatabaseAuthenticationService;


/***/ }),

/***/ 40809:
/*!*********************************************************************************!*\
  !*** ./src/app/services/database-gebaeudestruktur/database-gebaeudestruktur.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseGebaeudestrukturService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_projekte_service_1 = __webpack_require__(/*! ../database-projekte/database-projekte.service */ 31222);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../database-mitarbeiter/database-mitarbeiter.service */ 26229);
const uuid_1 = __webpack_require__(/*! uuid */ 70291);
let DatabaseGebaeudestrukturService = class DatabaseGebaeudestrukturService {
    constructor(Debug, Basics, Pool, DB, DBMitarbeiter, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Pool = Pool;
        this.DB = DB;
        this.DBMitarbeiter = DBMitarbeiter;
        this.Const = Const;
        this.Modusvarianten = {
            NONE: 'NONE',
            Bauteil_Neu: 'Bauteil_Neu',
            Bauteil_Bearbeiten: 'Bauteil_Bearbeiten',
            Geschoss_Neu: 'Geschoss_Neu',
            Geschoss_Bearbeiten: 'Geschoss_Bearebiten',
            Raum_Neu: 'Raum_Neu',
            Raum_Bearbeiten: 'Raum_Bearebiten'
        };
        try {
            this.Modus = this.Const.NONE;
            this.CurrentBauteil = null;
            this.CurrentGeschoss = null;
            this.CurrentRaum = null;
            this.CurrentGeschossindex = 0;
            this.CurrentBauteilindex = 0;
            this.CurrentRaumindex = 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'constructor', this.Debug.Typen.Service);
        }
    }
    Init() {
        try {
            if (this.DB.CurrentProjekt !== null) {
                if (!lodash.isUndefined(this.DB.CurrentProjekt.Bauteilliste[0])) {
                    this.CurrentBauteilindex = 0;
                    this.CurrentBauteil = this.DB.CurrentProjekt.Bauteilliste[0];
                    if (!lodash.isUndefined(this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[0])) {
                        this.CurrentGeschossindex = 0;
                        this.CurrentGeschoss = this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex];
                    }
                    else {
                        this.CurrentGeschoss = null;
                        this.CurrentGeschossindex = null;
                    }
                }
                else {
                    this.CurrentBauteilindex = null;
                    this.CurrentBauteil = null;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'Init', this.Debug.Typen.Service);
        }
    }
    GetEmptyRaum() {
        let Listenposition;
        if (this.DB.CurrentProjekt !== null) {
            Listenposition = this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste.length * 10 + 10;
            return {
                RaumID: null,
                DokumentID: this.Const.NONE,
                Raumname: '',
                Raumnummer: '',
                Listenposition: Listenposition,
            };
        }
    }
    SaveBauteil() {
        try {
            let Index;
            return new Promise((resolve, reject) => {
                if (this.CurrentBauteil.BauteilID === null) {
                    this.CurrentBauteil.BauteilID = (0, uuid_1.v4)();
                    this.DB.CurrentProjekt.Bauteilliste.push(this.CurrentBauteil);
                }
                else {
                    Index = lodash.findIndex(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: this.CurrentBauteil.BauteilID });
                    if (Index !== -1) {
                        this.DB.CurrentProjekt.Bauteilliste[Index] = this.CurrentBauteil;
                    }
                }
                this.DB.CurrentProjekt.Bauteilliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'SaveBauteil', this.Debug.Typen.Service);
        }
    }
    SaveGeschoss() {
        try {
            let Index;
            return new Promise((resolve, reject) => {
                if (this.CurrentGeschoss.GeschossID === null) {
                    this.CurrentGeschoss.GeschossID = (0, uuid_1.v4)();
                    this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste.push(this.CurrentGeschoss);
                }
                else {
                    Index = lodash.findIndex(this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste, { GeschossID: this.CurrentGeschoss.GeschossID });
                    if (Index !== -1) {
                        this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[Index] = this.CurrentGeschoss;
                    }
                }
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'SaveGeschoss', this.Debug.Typen.Service);
        }
    }
    SaveRaum() {
        try {
            let Index;
            return new Promise((resolve, reject) => {
                if (this.CurrentRaum.RaumID === null) {
                    this.CurrentRaum.RaumID = (0, uuid_1.v4)();
                    this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste.push(this.CurrentRaum);
                }
                else {
                    Index = lodash.findIndex(this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste, { RaumID: this.CurrentRaum.RaumID });
                    if (Index !== -1) {
                        this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste[Index] = this.CurrentRaum;
                    }
                }
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'SaveRaum', this.Debug.Typen.Service);
        }
    }
    DeleteRaum() {
        try {
            let Liste = this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste;
            return new Promise((resolve) => {
                Liste = lodash.filter(Liste, (raum) => {
                    return raum.RaumID !== this.CurrentRaum.RaumID;
                });
                this.CurrentRaum = null;
                this.CurrentRaumindex = null;
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste = Liste;
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'DeleteRaum', this.Debug.Typen.Service);
        }
    }
    DeleteGeschoss() {
        try {
            let Index;
            let Liste = this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste;
            return new Promise((resolve) => {
                Liste = lodash.filter(Liste, (geschoss) => {
                    return geschoss.GeschossID !== this.CurrentGeschoss.GeschossID;
                });
                if (this.CurrentGeschossindex > Liste.length - 1 && this.CurrentGeschossindex > 0) {
                    this.CurrentGeschossindex--;
                }
                if (!lodash.isUndefined(Liste[this.CurrentGeschossindex])) {
                    this.CurrentGeschoss = Liste[this.CurrentGeschossindex];
                }
                else {
                    this.CurrentGeschossindex = null;
                    this.CurrentRaumindex = null;
                    this.CurrentGeschoss = null;
                    this.CurrentRaum = null;
                }
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste = Liste;
                this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste.sort((a, b) => {
                    if (a.Listenposition < b.Listenposition)
                        return -1;
                    if (a.Listenposition > b.Listenposition)
                        return 1;
                    return 0;
                });
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'DeleteGeschoss', this.Debug.Typen.Service);
        }
    }
    GetBauteilnamen(projektpunkt) {
        try {
            let Bauteil;
            Bauteil = lodash.find(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
            if (lodash.isUndefined(Bauteil) === false)
                return Bauteil.Bauteilname;
            else
                return '-unbekannt-';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'GetBauteilnamen', this.Debug.Typen.Service);
        }
    }
    GetEmptyGeschoss() {
        let Listenposition = this.DB.CurrentProjekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste.length * 10 + 10;
        return {
            GeschossID: null,
            Geschossname: '',
            Kurzbezeichnung: '',
            Raumliste: [],
            Listenposition: Listenposition,
        };
    }
    CheckGeschossHasRaumliste() {
        try {
            let result = true;
            let Projekt = this.DB.CurrentProjekt;
            if (lodash.isUndefined(Projekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste) ||
                Projekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste.length === 0) {
                result = false;
            }
            else {
                if (lodash.isUndefined(Projekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex]) ||
                    Projekt.Bauteilliste[this.CurrentBauteilindex].Geschossliste[this.CurrentGeschossindex].Raumliste.length === 0) {
                    result = false;
                }
            }
            return result;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'CheckGeschossHasRaumliste', this.Debug.Typen.Service);
        }
    }
    GetEmptyBauteil() {
        try {
            let Listenposition = this.DB.CurrentProjekt.Bauteilliste.length * 10 + 10;
            return {
                BauteilID: null,
                Bauteilname: '',
                Geschossliste: [],
                Listenposition: Listenposition,
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Gebauedestruktur', 'GetEmptyGeschoss', this.Debug.Typen.Service);
        }
    }
    GetGeschossnamen(projektpunkt) {
        try {
            let Bauteil;
            let Geschossliste;
            let Geschoss;
            if (projektpunkt !== null && projektpunkt.GeschossID !== this.Const.NONE) {
                Bauteil = lodash.find(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
                if (lodash.isUndefined(Bauteil) === false) {
                    Geschossliste = Bauteil.Geschossliste;
                    if (Geschossliste.length > 0) {
                        Geschoss = lodash.find(Geschossliste, { GeschossID: projektpunkt.GeschossID });
                        if (lodash.isUndefined(Geschoss) === false) {
                            return Geschoss.Geschossname;
                        }
                    }
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'function', this.Debug.Typen.Service);
        }
    }
    GetRaumliste(projektpunkt) {
        try {
            let Bauteil;
            let Geschossliste;
            let Geschoss;
            if (projektpunkt !== null) {
                Bauteil = lodash.find(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
                if (lodash.isUndefined(Bauteil) === false) {
                    Geschossliste = Bauteil.Geschossliste;
                    if (Geschossliste.length > 0) {
                        Geschoss = lodash.find(Geschossliste, { GeschossID: projektpunkt.GeschossID });
                        if (lodash.isUndefined(Geschoss) === false) {
                            return Geschoss.Raumliste;
                        }
                        else {
                            return [];
                        }
                    }
                    else {
                        return [];
                    }
                }
                else {
                    return [];
                }
            }
            else {
                return [];
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'GetRaumliste', this.Debug.Typen.Service);
        }
    }
    GetRaumnamen(projektpunkt) {
        try {
            let Raumliste = this.GetRaumliste(projektpunkt);
            let Raum;
            if (lodash.isUndefined(Raumliste) === false) {
                Raum = lodash.find(Raumliste, { RaumID: projektpunkt.RaumID });
                if (lodash.isUndefined(Raum) === false) {
                    if (Raum.Raumnummer !== '')
                        return Raum.Raumnummer + ' ' + Raum.Raumname;
                    else
                        return Raum.Raumname;
                }
                else {
                    return '-Unbekannt-';
                }
            }
            else {
                return '-Unbekannt-';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'GetRaumnamen', this.Debug.Typen.Service);
        }
    }
    GetGeschossliste(projektpunkt) {
        try {
            let Bauteil;
            if (projektpunkt !== null) {
                Bauteil = lodash.find(this.DB.CurrentProjekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
                if (lodash.isUndefined(Bauteil) === false) {
                    return Bauteil.Geschossliste;
                }
                else {
                    return [];
                }
            }
            else {
                return [];
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Bauteile', 'GetGeschossliste', this.Debug.Typen.Service);
        }
    }
    GetGebaeudeteilname(projekt, projektpunkt) {
        try {
            let Bauteil;
            let Raum;
            let Geschoss;
            let Bauteilindex;
            let Geschossindex;
            let Text = 'Gesamtes GebÃ¤ude';
            if (projektpunkt.BauteilID !== null) {
                Bauteil = lodash.find(projekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
                if (!lodash.isUndefined(Bauteil)) {
                    Bauteilindex = lodash.findIndex(projekt.Bauteilliste, { BauteilID: projektpunkt.BauteilID });
                    Text = Bauteil.Bauteilname;
                    if (projektpunkt.GeschossID !== null) {
                        Geschoss = lodash.find(Bauteil.Geschossliste, { GeschossID: projektpunkt.GeschossID });
                        if (!lodash.isUndefined(Geschoss)) {
                            Geschossindex = lodash.findIndex(Bauteil.Geschossliste, { GeschossID: projektpunkt.GeschossID });
                            Text = Geschoss.Geschossname + ' (' + Geschoss.Kurzbezeichnung + ')';
                            if (projektpunkt.RaumID !== null) {
                                Raum = lodash.find(Geschoss.Raumliste, { RaumID: projektpunkt.RaumID });
                                if (!lodash.isUndefined(Raum)) {
                                    Text = Raum.Raumnummer + ' ' + Raum.Raumname;
                                }
                                else
                                    Text = 'Raum nicht gefunden';
                            }
                        }
                        else
                            Text = 'Geschoss nicht gefunden';
                    }
                }
                else
                    Text = 'Bauteil nicht gefunden';
            }
            return Text;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkt Editor', 'GetGebaeudeteilname', this.Debug.Typen.Component);
        }
    }
};
DatabaseGebaeudestrukturService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: const_1.ConstProvider }
];
DatabaseGebaeudestrukturService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseGebaeudestrukturService);
exports.DatabaseGebaeudestrukturService = DatabaseGebaeudestrukturService;


/***/ }),

/***/ 26229:
/*!*******************************************************************************!*\
  !*** ./src/app/services/database-mitarbeiter/database-mitarbeiter.service.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseMitarbeiterService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const database_authentication_service_1 = __webpack_require__(/*! ../database-authentication/database-authentication.service */ 67334);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
let DatabaseMitarbeiterService = class DatabaseMitarbeiterService {
    constructor(Debug, http, Const, AuthService, Pool) {
        this.Debug = Debug;
        this.http = http;
        this.Const = Const;
        this.AuthService = AuthService;
        this.Pool = Pool;
        try {
            this.ServerMitarbeiterUrl = this.Pool.CockpitserverURL + '/mitarbeiter';
            this.ServerSettingsUrl = this.Pool.CockpitserverURL + '/settings';
            this.ServerRegistrierungUrl = this.Pool.CockpitserverURL + '/registrierung';
            this.CurrentMeinewoche = this.GetEmptyMeinewocheeintrag();
            // Test
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'constructor', this.Debug.Typen.Service);
        }
    }
    GetMeinewocheStunden(tag) {
        try {
            let Stunden = 0;
            let Minuten = 0;
            for (let Eintrag of this.Pool.Mitarbeiterdaten.Meinewocheliste) {
                switch (tag) {
                    case 'Montag':
                        if (Eintrag.Montagseinsatz) {
                            Stunden += Eintrag.Montagsstunden;
                            Minuten += Eintrag.Montagsminuten;
                        }
                        break;
                    case 'Dienstag':
                        if (Eintrag.Dienstagseinsatz) {
                            Stunden += Eintrag.Dienstagsstunden;
                            Minuten += Eintrag.Dienstagsminuten;
                        }
                        break;
                    case 'Mittwoch':
                        if (Eintrag.Mittwochseinsatz) {
                            Stunden += Eintrag.Mittwochsstunden;
                            Minuten += Eintrag.Mittwochsminuten;
                        }
                        break;
                    case 'Donnerstag':
                        if (Eintrag.Donnerstagseinsatz) {
                            Stunden += Eintrag.Donnerstagsstunden;
                            Minuten += Eintrag.Donnerstagsminuten;
                        }
                        break;
                    case 'Freitag':
                        if (Eintrag.Freitagseinsatz) {
                            Stunden += Eintrag.Freitagsstunden;
                            Minuten += Eintrag.Freitagsminuten;
                        }
                        break;
                }
            }
            Minuten = Minuten + 60 * Stunden;
            if (Minuten === 0)
                return '';
            else
                return '[' + (Minuten / 60).toFixed(2) + ' Std]';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetMeinewocheStunden', this.Debug.Typen.Service);
        }
    }
    GetEmptyMeinewocheeintrag() {
        try {
            return {
                ProjektID: "",
                Projektkey: "",
                ProjektpunktID: "",
                Kalenderwoche: (0, moment_1.default)().isoWeek(),
                Montagsstunden: 0,
                Dienstagsstunden: 0,
                Mittwochsstunden: 0,
                Donnerstagsstunden: 0,
                Freitagsstunden: 0,
                Samstagsstunden: 0,
                Montagsminuten: 30,
                Dienstagsminuten: 30,
                Mittwochsminuten: 30,
                Donnerstagsminuten: 30,
                Freitagsminuten: 30,
                Samstagsminuten: 30,
                Dienstagseinsatz: false,
                Donnerstagseinsatz: false,
                Freitagseinsatz: false,
                Mittwochseinsatz: false,
                Montagseinsatz: false,
                Samstagseinsatz: false,
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetEmptyMeinewoche', this.Debug.Typen.Service);
        }
    }
    GetEmptyMitarbeiter() {
        try {
            let Zeit = (0, moment_1.default)();
            return {
                _id: null,
                Vorname: "",
                Name: "",
                Kuerzel: "",
                Fachbereich: "Unbekannt",
                StandortID: "",
                // MitarbeiterID: "",
                Email: "",
                Mobil: "",
                SettingsID: null,
                Telefon: "",
                Zeitstring: Zeit.format('HH:mm DD.MM.YYYY'),
                Zeitstempel: Zeit.valueOf(),
                Deleted: false,
                Favoritenliste: [],
                Meintagliste: [],
                Meinewocheliste: []
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetEmptyMitarbeiter', this.Debug.Typen.Service);
        }
    }
    GetMitarbeitername(id) {
        try {
            let Mitarbeiter = lodash.find(this.Pool.Mitarbeiterliste, { _id: id });
            if (lodash.isUndefined(Mitarbeiter))
                return 'Unbekannt';
            else {
                return Mitarbeiter.Vorname + ' ' + Mitarbeiter.Name;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'GetMitarbeitername', this.Debug.Typen.Service);
        }
    }
    InitService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'InitService', this.Debug.Typen.Service);
        }
    }
    FinishService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'FinishService', this.Debug.Typen.Service);
        }
    }
    UpdateMitarbeiter(mitarbeiter) {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            let Merker;
            delete mitarbeiter.__v;
            Params.set('id', mitarbeiter._id);
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerMitarbeiterUrl, mitarbeiter);
                Observer.subscribe({
                    next: (ne) => {
                        Merker = ne.Mitarbeiter;
                    },
                    complete: () => {
                        if (Merker !== null) {
                            this.CurrentMitarbeiter = Merker;
                            this.Pool.MitarbeiterdatenChanged.emit();
                            this.UpdateMitarbeiterliste(this.CurrentMitarbeiter);
                            this.Pool.MitarbeiterlisteChanged.emit();
                        }
                        else {
                            reject(new Error('Mitarbeiter auf Server nicht gefunden.'));
                        }
                        resove(true);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'UpdateMitarbeiter', this.Debug.Typen.Page);
        }
    }
    UpdateMitarbeiterliste(mitarbeiter) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Mitarbeiterliste, { _id: this.CurrentMitarbeiter._id });
            if (Index !== -1) {
                this.Pool.Mitarbeiterliste[Index] = mitarbeiter; // aktualisieren
                console.log('Mitarbeiterliste updated: ' + mitarbeiter.Name);
            }
            else {
                console.log('Mitarbeiter nicht gefunden -> neuen Mitarbeiter hinzufÃ¼gen');
                this.Pool.Mitarbeiterliste.push(mitarbeiter); // neuen
            }
            // GelÃ¶scht markiert EintrÃ¤ge entfernen
            this.Pool.Mitarbeiterliste = lodash.filter(this.Pool.Mitarbeiterliste, (currentmitarbeiter) => {
                return currentmitarbeiter.Deleted === false;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'UpdateMitarbeiterliste', this.Debug.Typen.Service);
        }
    }
    AddMitarbeiter(mitarbeiter) {
        try {
            let Observer;
            let Mitarbeiter;
            return new Promise((resolve, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerMitarbeiterUrl, mitarbeiter);
                Observer.subscribe({
                    next: (result) => {
                        debugger;
                        Mitarbeiter = result.Mitarbeiter;
                    },
                    complete: () => {
                        this.UpdateMitarbeiterliste(Mitarbeiter);
                        this.Pool.MitarbeiterlisteChanged.emit();
                        resolve(Mitarbeiter);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'AddMitarbeiter', this.Debug.Typen.Service);
        }
    }
    RegisterMitarbeiter() {
        try {
            let Observer;
            let Daten;
            let headers = new http_1.HttpHeaders({
                'content-type': 'application/json',
                'authorization': this.AuthService.GetAuthenticationToken()
            });
            return new Promise((resolve, reject) => {
                // POST fÃ¼r neue Registrierung
                Observer = this.http.post(this.ServerRegistrierungUrl, this.CurrentMitarbeiter, { headers: headers });
                Observer.subscribe({
                    next: (result) => {
                        Daten = result;
                    },
                    complete: () => {
                        resolve(Daten);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeiter', 'RegisterMitarbeiter', this.Debug.Typen.Page);
        }
    }
    GetMitarbeiterRegistrierung(email) {
        try {
            let Observer;
            let Params = new http_1.HttpParams({ fromObject: { email: email } });
            let Daten;
            let Token = this.AuthService.GetAuthenticationToken();
            let headers = new http_1.HttpHeaders({
                'content-type': 'application/json',
                'authorization': Token
            });
            return new Promise((resolve, reject) => {
                Observer = this.http.get(this.ServerRegistrierungUrl, { params: Params, headers: headers });
                Observer.subscribe({
                    next: (result) => {
                        debugger;
                        Daten = result;
                    },
                    complete: () => {
                        debugger;
                        resolve(Daten);
                    },
                    error: (error) => {
                        debugger;
                        resolve(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'GetMitarbeiterRegistrierung', this.Debug.Typen.Service);
        }
    }
    GetMitarbeiter(email) {
        try {
            let Observer;
            let Params = new http_1.HttpParams({ fromObject: { email: email } });
            let Daten;
            return new Promise((resove, reject) => {
                Observer = this.http.get(this.ServerMitarbeiterUrl, { params: Params });
                Observer.subscribe({
                    next: (result) => {
                        Daten = result;
                    },
                    complete: () => {
                        resove(Daten);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'SaveMitarbeiter', this.Debug.Typen.Service);
        }
    }
    DeleteMitarbeiter(mitarbeiter) {
        try {
            mitarbeiter.Deleted = true;
            return this.UpdateMitarbeiter(mitarbeiter);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'DeleteMitarbeiter', this.Debug.Typen.Service);
        }
    }
};
DatabaseMitarbeiterService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: http_1.HttpClient },
    { type: const_1.ConstProvider },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: database_pool_service_1.DatabasePoolService }
];
DatabaseMitarbeiterService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseMitarbeiterService);
exports.DatabaseMitarbeiterService = DatabaseMitarbeiterService;


/***/ }),

/***/ 68083:
/*!***********************************************************************************************!*\
  !*** ./src/app/services/database-mitarbeitersettings/database-mitarbeitersettings.service.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseMitarbeitersettingsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const database_authentication_service_1 = __webpack_require__(/*! ../database-authentication/database-authentication.service */ 67334);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
let DatabaseMitarbeitersettingsService = class DatabaseMitarbeitersettingsService {
    constructor(Debug, http, Const, AuthService, Pool) {
        this.Debug = Debug;
        this.http = http;
        this.Const = Const;
        this.AuthService = AuthService;
        this.Pool = Pool;
        try {
            this.ServerSettingsUrl = this.Pool.CockpitserverURL + '/settings/';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'constructor', this.Debug.Typen.Service);
        }
    }
    InitService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'InitService', this.Debug.Typen.Service);
        }
    }
    FinishService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'FinishService', this.Debug.Typen.Service);
        }
    }
    SaveMitarbeitersettings() {
        let Observer;
        return new Promise((resolve, reject) => {
            if (this.Pool.Mitarbeitersettings._id === null) {
                // POST fÃ¼r neue Settings
                Observer = this.http.post(this.ServerSettingsUrl, this.Pool.Mitarbeitersettings);
                Observer.subscribe({
                    next: (result) => {
                        this.Pool.Mitarbeitersettings = result.Settings;
                    },
                    complete: () => {
                        this.Pool.MitarbeitersettingslisteChanged.emit();
                        resolve(this.Pool.Mitarbeitersettings);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            }
            else {
                // PUT fÃ¼r update Settings
                Observer = this.http.put(this.ServerSettingsUrl, this.Pool.Mitarbeitersettings);
                Observer.subscribe({
                    next: (ne) => {
                        this.Pool.Mitarbeitersettings = ne.Settings;
                    },
                    complete: () => {
                        this.Pool.MitarbeitersettingslisteChanged.emit();
                        resolve(this.Pool.Mitarbeitersettings);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            }
        });
    }
    catch(error) {
        this.Debug.ShowErrorMessage(error, 'Database Standorte', 'SaveMitarbeitersettings', this.Debug.Typen.Service);
    }
    UpdateMitarbeitersettings(settings) {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            Params.set('id', settings._id);
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerSettingsUrl, settings);
                Observer.subscribe({
                    next: (ne) => {
                        this.Pool.Mitarbeitersettings = ne.Settings;
                    },
                    complete: () => {
                        this.Pool.MitarbeitersettingsChanged.emit();
                        this.UpdateMitarbeitersettingsliste(settings);
                        resove(true);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'UpdateMitarbeiter', this.Debug.Typen.Page);
        }
    }
    UpdateMitarbeitersettingsliste(settings) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Mitarbeitersettingsliste, { _id: settings._id });
            if (Index !== -1) {
                this.Pool.Mitarbeitersettingsliste[Index] = settings; // aktualisieren
                console.log('Mitarbeitersettingsliste updated: ' + settings.MitarbeiterID);
            }
            else {
                console.log('Mitarbeitersetting nicht gefunden -> neuen Mitarbeiter hinzufÃ¼gen');
                this.Pool.Mitarbeitersettingsliste.push(settings); // neuen
            }
            // GelÃ¶scht markiert EintrÃ¤ge entfernen
            this.Pool.Mitarbeitersettingsliste = lodash.filter(this.Pool.Mitarbeitersettingsliste, (currentsetting) => {
                return currentsetting.Deleted === false;
            });
            this.Pool.MitarbeitersettingslisteChanged.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'UpdateMitarbeiterliste', this.Debug.Typen.Service);
        }
    }
    AddMitarbeitersetting(setting) {
        try {
            let Observer;
            let Mitarbeiter;
            return new Promise((resolve, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerSettingsUrl, setting);
                Observer.subscribe({
                    next: (result) => {
                        debugger;
                        setting = result.Setting;
                    },
                    complete: () => {
                        this.UpdateMitarbeitersettingsliste(setting);
                        this.Pool.MitarbeitersettingslisteChanged.emit();
                        resolve(Mitarbeiter);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'AddMitarbeiter', this.Debug.Typen.Page);
        }
    }
    DeleteMitarbeitersetting(setting) {
        try {
            setting.Deleted = true;
            return this.UpdateMitarbeitersettings(setting);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Mitarbeitersettings', 'DeleteMitarbeiter', this.Debug.Typen.Service);
        }
    }
};
DatabaseMitarbeitersettingsService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: http_1.HttpClient },
    { type: const_1.ConstProvider },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: database_pool_service_1.DatabasePoolService }
];
DatabaseMitarbeitersettingsService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseMitarbeitersettingsService);
exports.DatabaseMitarbeitersettingsService = DatabaseMitarbeitersettingsService;


/***/ }),

/***/ 73004:
/*!*****************************************************************!*\
  !*** ./src/app/services/database-pool/database-pool.service.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 21778)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DatabasePoolService = void 0;

const tslib_1 = __webpack_require__(/*! tslib */ 34929);

const core_1 = __webpack_require__(/*! @angular/core */ 22560);

const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);

const const_1 = __webpack_require__(/*! ../const/const */ 55005);

const tools_1 = __webpack_require__(/*! ../tools/tools */ 9983);

const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);

const uuid_1 = __webpack_require__(/*! uuid */ 70291);

const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));

const database_authentication_service_1 = __webpack_require__(/*! ../database-authentication/database-authentication.service */ 67334);

const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);

let DatabasePoolService = class DatabasePoolService {
  constructor(Debug, Const, Http, Basics, AuthService, Tools) {
    this.Debug = Debug;
    this.Const = Const;
    this.Http = Http;
    this.Basics = Basics;
    this.AuthService = AuthService;
    this.Tools = Tools;
    this.StandortelisteChanged = new core_1.EventEmitter();
    this.MitarbeiterlisteChanged = new core_1.EventEmitter();
    this.GesamtprojektelisteChanged = new core_1.EventEmitter();
    this.MitarbeiterdatenChanged = new core_1.EventEmitter();
    this.MitarbeitersettingslisteChanged = new core_1.EventEmitter();
    this.MitarbeitersettingsChanged = new core_1.EventEmitter();
    this.LoadingAllDataFinished = new core_1.EventEmitter();
    this.ProjektpunktelisteChanged = new core_1.EventEmitter();
    this.ProtokolllisteChanged = new core_1.EventEmitter();
    this.ProtokollprojektpunktChanged = new core_1.EventEmitter();
    this.ProjektpunktChanged = new core_1.EventEmitter();

    try {
      this.Mitarbeiterdaten = null;
      this.Mitarbeitersettings = null;
      this.ShowProgress = false;
      this.Mitarbeitersettingsliste = [];
      this.MaxProgressValue = 10;
      this.CurrentProgressValue = 5;
      this.Standorteliste = [];
      this.Mitarbeiterliste = [];
      this.Gesamtprojektliste = [];
      this.Projektpunkteliste = [];
      this.Projektpunkteliste = [];
      this.Protokollliste = [];
      this.CockpitserverURL = 'http://localhost:5000'; // Test
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'constructor', this.Debug.Typen.Service);
    }
  }

  ReadProjektpunkteliste(projekt) {
    try {
      let Params;
      let Headers;
      let ProjektpunkteObservable;
      this.Projektpunkteliste[projekt.Projektkey] = [];
      return new Promise((resolve, reject) => {
        Params = new http_1.HttpParams({
          fromObject: {
            projektkey: projekt.Projektkey
          }
        });
        Headers = new http_1.HttpHeaders({
          'content-type': 'application/json',
          'authorization': this.AuthService.GetAuthenticationToken()
        });
        ProjektpunkteObservable = this.Http.get(this.CockpitserverURL + '/projektpunkte', {
          headers: Headers,
          params: Params
        });
        ProjektpunkteObservable.subscribe({
          next: data => {
            this.Projektpunkteliste[projekt.Projektkey] = data; // debugger;
          },
          complete: () => {
            console.log('Read Projektpunkte liste von ' + projekt.Projektkurzname + ' fertig.');
            this.Projektpunkteliste[projekt.Projektkey].forEach(Projektpunkt => {
              if (lodash.isUndefined(Projektpunkt.Zeitansatz)) Projektpunkt.Zeitansatz = 30;
              if (lodash.isUndefined(Projektpunkt.Zeitansatz)) Projektpunkt.Zeitansatz = 30;
              if (lodash.isUndefined(Projektpunkt.Zeitansatzeinheit)) Projektpunkt.Zeitansatzeinheit = this.Const.Zeitansatzeinheitvarianten.Minuten;
              if (lodash.isUndefined(Projektpunkt.Geschlossenzeitstempel)) Projektpunkt.Geschlossenzeitstempel = null;
              if (lodash.isUndefined(Projektpunkt.Geschlossenzeitstring)) Projektpunkt.Geschlossenzeitstring = null;
              if (lodash.isUndefined(Projektpunkt.EndeKalenderwoche)) Projektpunkt.EndeKalenderwoche = null;
              Projektpunkt.Anmerkungenliste.forEach(Anmerkung => {
                Anmerkung.LiveEditor = false;
              });
            });
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadProjektpunkteliste', this.Debug.Typen.Service);
    }
  }

  ReadProtokollliste(projekt) {
    try {
      let Params;
      let Headers;
      let ProtokollObservable;
      this.Protokollliste[projekt.Projektkey] = [];
      return new Promise((resolve, reject) => {
        Params = new http_1.HttpParams({
          fromObject: {
            projektkey: projekt.Projektkey
          }
        });
        Headers = new http_1.HttpHeaders({
          'content-type': 'application/json',
          'authorization': this.AuthService.GetAuthenticationToken()
        });
        ProtokollObservable = this.Http.get(this.CockpitserverURL + '/protokolle', {
          headers: Headers,
          params: Params
        });
        ProtokollObservable.subscribe({
          next: data => {
            // debugger;
            this.Protokollliste[projekt.Projektkey] = data;
          },
          complete: () => {
            // debugger;
            console.log('Read Protokollliste von ' + projekt.Projektkurzname + ' fertig.');
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadProtokollliste', this.Debug.Typen.Service);
    }
  }

  ReadMitarbeiterliste() {
    try {
      this.Mitarbeiterliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json',
        'authorization': this.AuthService.GetAuthenticationToken()
      });
      return new Promise((resolve, reject) => {
        let MitarbeiterObservable = this.Http.get(this.CockpitserverURL + '/mitarbeiter', {
          headers: headers
        });
        MitarbeiterObservable.subscribe({
          next: data => {
            this.Mitarbeiterliste = data;
          },
          complete: () => {
            for (let Mitarbeiter of this.Mitarbeiterliste) {
              Mitarbeiter = this.InitMitarbeiter(Mitarbeiter);
            }

            this.MitarbeiterlisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadMitarbeiterliste', this.Debug.Typen.Service);
    }
  }

  ReadStandorteliste() {
    try {
      this.Standorteliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json',
        'authorization': this.AuthService.GetAuthenticationToken()
      });
      return new Promise((resolve, reject) => {
        let StandortObservable = this.Http.get(this.CockpitserverURL + '/standorte', {
          headers: headers
        });
        StandortObservable.subscribe({
          next: data => {
            this.Standorteliste = data;
          },
          complete: () => {
            this.StandortelisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadStandorteliste', this.Debug.Typen.Service);
    }
  }

  ReadSettingsliste() {
    try {
      this.Mitarbeitersettingsliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json',
        'authorization': this.AuthService.GetAuthenticationToken()
      });
      return new Promise((resolve, reject) => {
        let SettingsObservable = this.Http.get(this.CockpitserverURL + '/settings', {
          headers: headers
        });
        SettingsObservable.subscribe({
          next: data => {
            this.Mitarbeitersettingsliste = data;
          },
          complete: () => {
            this.MitarbeitersettingslisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadStandorteliste', this.Debug.Typen.Service);
    }
  }

  ReadGesamtprojektliste() {
    try {
      this.Gesamtprojektliste = [];
      let headers = new http_1.HttpHeaders({
        'content-type': 'application/json',
        'authorization': this.AuthService.GetAuthenticationToken()
      });
      return new Promise((resolve, reject) => {
        let StandortObservable = this.Http.get(this.CockpitserverURL + '/projekte', {
          headers: headers
        });
        StandortObservable.subscribe({
          next: data => {
            this.Gesamtprojektliste = data;
          },
          complete: () => {
            for (let Projekt of this.Gesamtprojektliste) {
              if (lodash.isUndefined(Projekt.Projektfarbe)) Projekt.Projektfarbe = 'Burnicklgruen';
            }

            this.GesamtprojektelisteChanged.emit();
            resolve(true);
          },
          error: error => {
            debugger;
            reject(error);
          }
        });
      });
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadGesamtprojektliste', this.Debug.Typen.Service);
    }
  }

  InitMitarbeiter(mitarbeiter) {
    try {
      if (lodash.isUndefined(mitarbeiter.SettingsID)) {
        mitarbeiter.SettingsID = null;
      }

      if (lodash.isUndefined(mitarbeiter.Meintagliste)) {
        mitarbeiter.Meintagliste = [];
      }

      if (lodash.isUndefined(mitarbeiter.Meinewocheliste)) {
        mitarbeiter.Meinewocheliste = [];
      }

      for (let Eintrag of mitarbeiter.Meinewocheliste) {
        if (lodash.isUndefined(Eintrag.Kalenderwoche)) Eintrag.Kalenderwoche = 0;
      }

      return mitarbeiter;
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'InitMitarbeiter', this.Debug.Typen.Service);
    }
  }

  ReadProjektdaten(projektliste) {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        _this.ShowProgress = true;
        _this.MaxProgressValue = projektliste.length;
        _this.CurrentProgressValue = 0;
        _this.Projektpunkteliste = [];
        _this.Protokollliste = [];

        try {
          for (let Projekt of projektliste) {
            _this.ProgressMessage = 'Projektpunkte ' + Projekt.Projektkurzname;
            yield _this.ReadProjektpunkteliste(Projekt);
            _this.CurrentProgressValue++;
          }

          for (let Projekt of projektliste) {
            _this.ProgressMessage = 'Protokolle ' + Projekt.Projektkurzname;
            yield _this.ReadProtokollliste(Projekt);
            _this.CurrentProgressValue++;
          }
        } catch (error) {
          _this.ShowProgress = false;
          return Promise.reject(error);
        }

        _this.ProjektpunktelisteChanged.emit();

        _this.ProtokolllisteChanged.emit();

        _this.ShowProgress = false;
      } catch (error) {
        _this.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadProjektdaten', _this.Debug.Typen.Service);
      }
    })();
  }

  Init() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        try {
          yield _this2.ReadStandorteliste();
          yield _this2.ReadMitarbeiterliste();
          yield _this2.ReadSettingsliste();
          yield _this2.ReadGesamtprojektliste();
        } catch (error) {
          return Promise.reject(error);
        }
      } catch (error) {
        _this2.Debug.ShowErrorMessage(error, 'Database Pool', 'Init', _this2.Debug.Typen.Service);
      }
    })();
  }

  GetNewUniqueID() {
    try {
      return (0, uuid_1.v4)();
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'GetNewUniqueID', this.Debug.Typen.Service);
    }
  }

  GetNewMitarbeitersettings() {
    try {
      return {
        _id: null,
        MitarbeiterID: null,
        FavoritenID: null,
        ProjektID: null,
        Favoritprojektindex: null,
        StandortFilter: null,
        AufgabenShowBearbeitung: true,
        AufgabenShowGeschlossen: false,
        AufgabenShowOffen: true,
        AufgabenShowRuecklauf: true,
        AufgabenShowMeilensteinOnly: false,
        Deleted: false,
        HeadermenueMaxFavoriten: 6,
        AufgabenSortiermodus: this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend,
        AufgabenMeilensteineNachlauf: 2,
        AufgabenShowMeilensteine: true,
        AufgabenShowNummer: false,
        AufgabenShowStartdatum: false,
        AufgabenShowAufgabe: true,
        AufgabenShowBemerkung: true,
        AufgabenShowTage: true,
        AufgabenShowTermin: true,
        AufgabenShowStatus: true,
        AufgabenShowFortschritt: false,
        AufgabenShowZustaendig: true,
        AufgabenShowMeintag: true,
        AufgabenShowZeitansatz: false,
        AufgabenShowMeinewoche: true,
        AufgabenTerminfiltervariante: null,
        AufgabenTerminfilterStartwert: null,
        AufgabenTerminfilterEndewert: null
      };
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'GetNewMitarbeitersettings', this.Debug.Typen.Service);
    }
  }

  InitMitarbeitersettings() {
    try {
      let Settings;

      if (this.Mitarbeiterdaten.SettingsID === null) {
        return this.GetNewMitarbeitersettings();
      } else {
        Settings = lodash.find(this.Mitarbeitersettingsliste, {
          _id: this.Mitarbeiterdaten.SettingsID
        });

        if (lodash.isUndefined(Settings)) {
          return this.GetNewMitarbeitersettings();
        } else {
          if (lodash.isUndefined(Settings.Favoritprojektindex)) Settings.Favoritprojektindex = 3000;
          if (lodash.isUndefined(Settings.HeadermenueMaxFavoriten)) Settings.HeadermenueMaxFavoriten = 6;
          if (lodash.isUndefined(Settings.Deleted)) Settings.Deleted = false;
          if (lodash.isUndefined(Settings.AufgabenShowNummer)) Settings.AufgabenShowNummer = true;
          if (lodash.isUndefined(Settings.AufgabenShowStartdatum)) Settings.AufgabenShowStartdatum = true;
          if (lodash.isUndefined(Settings.AufgabenShowAufgabe)) Settings.AufgabenShowAufgabe = true;
          if (lodash.isUndefined(Settings.AufgabenShowBemerkung)) Settings.AufgabenShowBemerkung = true;
          if (lodash.isUndefined(Settings.AufgabenShowTage)) Settings.AufgabenShowTage = true;
          if (lodash.isUndefined(Settings.AufgabenShowTermin)) Settings.AufgabenShowTermin = true;
          if (lodash.isUndefined(Settings.AufgabenShowStatus)) Settings.AufgabenShowStatus = true;
          if (lodash.isUndefined(Settings.AufgabenShowFortschritt)) Settings.AufgabenShowFortschritt = true;
          if (lodash.isUndefined(Settings.AufgabenShowZustaendig)) Settings.AufgabenShowZustaendig = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeintag)) Settings.AufgabenShowMeintag = true;
          if (lodash.isUndefined(Settings.AufgabenShowZeitansatz)) Settings.AufgabenShowZeitansatz = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeinewoche)) Settings.AufgabenShowMeinewoche = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeilensteinOnly)) Settings.AufgabenShowMeilensteinOnly = false;
          if (lodash.isUndefined(Settings.AufgabenShowGeschlossen)) Settings.AufgabenShowGeschlossen = true;
          if (lodash.isUndefined(Settings.AufgabenShowOffen)) Settings.AufgabenShowOffen = true;
          if (lodash.isUndefined(Settings.AufgabenShowBearbeitung)) Settings.AufgabenShowBearbeitung = true;
          if (lodash.isUndefined(Settings.AufgabenShowRuecklauf)) Settings.AufgabenShowRuecklauf = true;
          if (lodash.isUndefined(Settings.AufgabenShowMeilensteine)) Settings.AufgabenShowMeilensteine = true;
          if (lodash.isUndefined(Settings.AufgabenTerminfiltervariante)) Settings.AufgabenTerminfiltervariante = null;
          if (lodash.isUndefined(Settings.AufgabenTerminfilterStartwert)) Settings.AufgabenTerminfilterStartwert = null;
          if (lodash.isUndefined(Settings.AufgabenTerminfilterEndewert)) Settings.AufgabenTerminfilterEndewert = null;
          if (lodash.isUndefined(Settings.AufgabenSortiermodus)) Settings.AufgabenSortiermodus = this.Const.AufgabenSortiermodusvarianten.TermineAufsteigend;
          if (lodash.isUndefined(Settings.AufgabenMeilensteineNachlauf)) Settings.AufgabenMeilensteineNachlauf = 2;
          return Settings;
        }
      }
    } catch (error) {
      this.Debug.ShowErrorMessage(error, 'Database Pool', 'InitMitarbeitersettings', this.Debug.Typen.Service);
    }
  }

  ReadMitarbeitersettings() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      try {} catch (error) {
        _this3.Debug.ShowErrorMessage(error, 'Database Pool', 'ReadMitarbeitersettings', _this3.Debug.Typen.Service);
      }
    })();
  }

};

DatabasePoolService.ctorParameters = () => [{
  type: debug_1.DebugProvider
}, {
  type: const_1.ConstProvider
}, {
  type: http_1.HttpClient
}, {
  type: basics_1.BasicsProvider
}, {
  type: database_authentication_service_1.DatabaseAuthenticationService
}, {
  type: tools_1.ToolsProvider
}];

DatabasePoolService = tslib_1.__decorate([(0, core_1.Injectable)({
  providedIn: 'root'
})], DatabasePoolService);
exports.DatabasePoolService = DatabasePoolService;

/***/ }),

/***/ 89524:
/*!*******************************************************************************************!*\
  !*** ./src/app/services/database-projektbeteiligte/database-projektbeteiligte.service.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseProjektbeteiligteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_projekte_service_1 = __webpack_require__(/*! ../database-projekte/database-projekte.service */ 31222);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
let DatabaseProjektbeteiligteService = class DatabaseProjektbeteiligteService {
    constructor(Debug, Const, Pool, DBMitarbeiter, DBProjekt) {
        this.Debug = Debug;
        this.Const = Const;
        this.Pool = Pool;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBProjekt = DBProjekt;
        this.BeteiligtenlisteChanged = new core_1.EventEmitter();
        try {
            let Eintrag;
            this.CurrentBeteiligte = null;
            this.Beteiligtentypenliste = [];
            for (const key of Object.keys(this.Const.Beteiligtentypen)) {
                Eintrag = this.Const.Beteiligtentypen[key];
                this.Beteiligtentypenliste.push(Eintrag);
            }
            this.Beteiligtentypenliste.sort((a, b) => {
                if (a.Name < b.Name)
                    return -1;
                if (a.Name > b.Name)
                    return 1;
                return 0;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektbeteiligte', 'constructor', this.Debug.Typen.Service);
        }
    }
    GetBeteiligtenvorname(Projektbeteiligte) {
        try {
            if (Projektbeteiligte.Vorname !== '')
                return Projektbeteiligte.Vorname;
            else {
                switch (Projektbeteiligte.Anrede) {
                    case this.Const.Anredevariante.Unbekannt:
                        return '';
                        break;
                    case this.Const.Anredevariante.Frau:
                        return 'Frau';
                        break;
                    case this.Const.Anredevariante.Herr:
                        return 'Herr';
                        break;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektbeteiligte', 'GetBeteiligtenvorname', this.Debug.Typen.Service);
        }
    }
    GetBeteiligtenFachbereichname(typnummer) {
        try {
            let Typ = lodash.find(this.Beteiligtentypenliste, { Typnummer: typnummer });
            if (lodash.isUndefined(Typ) === false)
                return Typ.Name;
            else
                return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektbeteiligte', 'GetBeteiligtenFachbereichname', this.Debug.Typen.Service);
        }
    }
    GetEmptyProjektbeteiligte() {
        try {
            return {
                BeteiligtenID: null,
                Beteiligteneintragtyp: this.Const.Beteiligteneintragtypen.Person,
                Beteiligtentyp: 0,
                Email: "",
                Firma: "",
                Anrede: this.Const.Anredevariante.Frau,
                Kuerzel: "",
                Mobil: "",
                Name: "",
                Ort: "",
                PLZ: "",
                Strasse: "",
                Telefon: "",
                Verfasser: {
                    Email: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Email : this.Const.NONE,
                    Name: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Name : this.Const.NONE,
                    Vorname: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Vorname : this.Const.NONE
                },
                Vorname: "",
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektbeteiligte', 'GetEmptyProjektbeteiligte', this.Debug.Typen.Service);
        }
    }
};
DatabaseProjektbeteiligteService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_projekte_service_1.DatabaseProjekteService }
];
DatabaseProjektbeteiligteService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseProjektbeteiligteService);
exports.DatabaseProjektbeteiligteService = DatabaseProjektbeteiligteService;


/***/ }),

/***/ 31222:
/*!*************************************************************************!*\
  !*** ./src/app/services/database-projekte/database-projekte.service.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseProjekteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const uuid_1 = __webpack_require__(/*! uuid */ 70291);
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../database-mitarbeiter/database-mitarbeiter.service */ 26229);
let DatabaseProjekteService = class DatabaseProjekteService {
    constructor(Debug, Basics, Pool, http, MitarbeiterDB, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Pool = Pool;
        this.http = http;
        this.MitarbeiterDB = MitarbeiterDB;
        this.Const = Const;
        this.CurrentFavoritenChanged = new core_1.EventEmitter();
        try {
            this.CurrentProjekt = null;
            this.CurrentFavorit = null;
            this.CurrentProjektindex = null;
            this.CurrentFavoritprojektindex = null;
            this.CurrentFavoritenlisteindex = null;
            this.Projektliste = [];
            this.Projektauswahlsettings = [];
            this.FavoritenZeilenanzahl = 1;
            this.FavoritenSpaltenanzahl = 0;
            this.FavoritenCellbreite = 100;
            this.Projektfarbenliste = [];
            this.Projektfarbenliste.push({ Name: 'Grau', Background: '#444444', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Hellblau', Background: '#2554C7', Foreground: '' });
            this.Projektfarbenliste.push({ Name: 'Dunkelblau', Background: '#000080', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Hellgruen', Background: '#50C878', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Dunkelgruen', Background: '#006400', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Burnicklgruen', Background: '#c7d304', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Gruen', Background: '#008000', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Weinrot', Background: '#800000', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Teal', Background: '#008080', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Lila', Background: '#800080', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Hellorange', Background: '#FFD700', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Orange', Background: '#FFA500', Foreground: 'white' });
            this.Projektfarbenliste.push({ Name: 'Gelb', Background: '#FFFF00', Foreground: 'black' });
            this.ServerUrl = this.Pool.CockpitserverURL + '/projekte';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'cosntructor', this.Debug.Typen.Service);
        }
    }
    GetProjektByID(id) {
        try {
            return lodash.find(this.Projektliste, { _id: id });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'GetProjektByID', this.Debug.Typen.Service);
        }
    }
    InitMenuProjektauswahl() {
        try {
            let Index;
            let Projekt;
            let ProjektID;
            let Spaltenindexsoll;
            let Projekteanzahl = 0;
            let Buttonanzahl;
            let Farbe;
            this.FavoritenZeilenanzahl = 1;
            this.FavoritenSpaltenanzahl = 1;
            this.Projektauswahlsettings = [];
            this.Projektauswahlsettings[0] = [];
            if (this.Pool.Mitarbeiterdaten !== null &&
                this.Pool.Mitarbeitersettings !== null &&
                !lodash.isUndefined(this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex])) {
                Projekteanzahl = this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex].Projekteliste.length;
                Buttonanzahl = Projekteanzahl + 3;
                this.FavoritenSpaltenanzahl = this.Pool.Mitarbeitersettings.HeadermenueMaxFavoriten;
                this.FavoritenZeilenanzahl = Math.ceil(Buttonanzahl / this.FavoritenSpaltenanzahl);
                this.FavoritenCellbreite = 100 / this.FavoritenSpaltenanzahl;
                Index = 0;
                for (let Zeilenindex = 0; Zeilenindex < this.FavoritenZeilenanzahl; Zeilenindex++) {
                    this.Projektauswahlsettings[Zeilenindex] = [];
                    if (Zeilenindex === 0)
                        Spaltenindexsoll = 3;
                    else
                        Spaltenindexsoll = 0;
                    for (let Spaltenindex = Spaltenindexsoll; Spaltenindex < this.FavoritenSpaltenanzahl; Spaltenindex++) {
                        if (Zeilenindex === 0 && Spaltenindex === 3)
                            Index = 0;
                        if (lodash.isUndefined(this.Projektauswahlsettings[Zeilenindex][Spaltenindex])) {
                            this.Projektauswahlsettings[Zeilenindex][Spaltenindex] = {
                                Index: Index,
                                Projektkuerzel: "",
                                Projektname: "",
                                Projektnummer: "",
                                Projektkey: "",
                                Projektpunkteanzahl: 0,
                                Background: this.Const.NONE,
                                Foreground: this.Const.NONE,
                                ShowInLOPListeOnly: false
                            };
                        }
                        if (lodash.isUndefined(this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex].Projekteliste[Index]) === false) {
                            this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Index = Index;
                            ProjektID = this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex].Projekteliste[Index];
                            Projekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: ProjektID });
                            if (!lodash.isUndefined(Projekt)) {
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Projektname = Projekt.Projektname;
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Projektkuerzel = Projekt.Projektkurzname;
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Projektnummer = Projekt.Projektnummer;
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Projektkey = Projekt.Projektkey;
                                Farbe = this.GetProjektfarbeByName(Projekt.Projektfarbe);
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Background = Farbe.Background;
                                this.Projektauswahlsettings[Zeilenindex][Spaltenindex].Foreground = Farbe.Foreground;
                            }
                        }
                        else {
                            this.Projektauswahlsettings[Zeilenindex][Spaltenindex] = null;
                        }
                        Index++;
                    }
                }
            }
            /*
      
            this.Projektauswahlsettings[0][0] = {
              Index:          1000,
              Projektkuerzel: "Favoriten",
              Projektname:    "",
              Projektnummer:  "",
              Projektkey:     "",
              Projektpunkteanzahl: 0,
              Background:          this.Const.NONE,
              Foreground:          this.Const.NONE,
              ShowInLOPListeOnly: false,
            };
      
             */
            if (Projekteanzahl > 0) {
                this.Projektauswahlsettings[0][0] = {
                    Index: 2000,
                    Projektkuerzel: "Mein Tag",
                    Projektname: "",
                    Projektnummer: "",
                    Projektkey: "",
                    Projektpunkteanzahl: 0,
                    Background: this.Const.NONE,
                    Foreground: this.Const.NONE,
                    ShowInLOPListeOnly: true
                };
                this.Projektauswahlsettings[0][1] = {
                    Index: 3000,
                    Projektkuerzel: "Meine Woche",
                    Projektname: "",
                    Projektnummer: "",
                    Projektkey: "",
                    Projektpunkteanzahl: 0,
                    Background: this.Const.NONE,
                    Foreground: this.Const.NONE,
                    ShowInLOPListeOnly: true
                };
                this.Projektauswahlsettings[0][2] = {
                    Index: 1500,
                    Projektkuerzel: "Meilensteine",
                    Projektname: "",
                    Projektnummer: "",
                    Projektkey: "",
                    Projektpunkteanzahl: 0,
                    Background: this.Const.NONE,
                    Foreground: this.Const.NONE,
                    ShowInLOPListeOnly: true
                };
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'InitProjektauswahl', this.Debug.Typen.Service);
        }
    }
    GetProjektFarbe(Punkt) {
        try {
            let Projekt = this.GetProjektByID(Punkt.ProjektID);
            if (!lodash.isUndefined(Projekt))
                return this.GetProjektfarbeByName(Projekt.Projektfarbe);
            else
                return {
                    Background: "#444444",
                    Foreground: "white",
                    Name: ""
                };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Meine Woche Editor', 'GetProjektFarbe', this.Debug.Typen.Service);
        }
    }
    SetProjektpunkteanzahl(anzahl, projektkey) {
        try {
            let Projektauswahl;
            for (let zeilenindex = 0; zeilenindex < this.Projektauswahlsettings.length; zeilenindex++) {
                for (let spaltenindex = 0; spaltenindex < this.Projektauswahlsettings[zeilenindex].length; spaltenindex++) {
                    Projektauswahl = this.Projektauswahlsettings[zeilenindex][spaltenindex];
                    if (Projektauswahl !== null && Projektauswahl.Projektkey === projektkey) {
                        Projektauswahl.Projektpunkteanzahl = anzahl;
                    }
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'SetProjektpunkteanzahl', this.Debug.Typen.Service);
        }
    }
    InitService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'InitService', this.Debug.Typen.Service);
        }
    }
    FinishService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'FinishService', this.Debug.Typen.Service);
        }
    }
    InitGesamtprojekteliste() {
        try {
            for (let Projekt of this.Pool.Gesamtprojektliste) {
                if (lodash.isUndefined(Projekt.Projektkey))
                    Projekt.Projektkey = this.GenerateProjektkey(Projekt);
                if (lodash.isUndefined(Projekt.Beteiligtenliste)) {
                    Projekt.Beteiligtenliste = [];
                }
                if (lodash.isUndefined(Projekt.Verfasser)) {
                    Projekt.Verfasser = {
                        Name: this.Const.NONE,
                        Vorname: this.Const.NONE,
                        Email: this.Const.NONE
                    };
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'InitGesamtprojekteliste', this.Debug.Typen.Service);
        }
    }
    GenerateProjektkey(projekt) {
        try {
            let key = projekt.Projektkurzname.toUpperCase();
            key = key.replace(/ /g, '_');
            key = key.replace(/Ã¤/g, 'ae');
            key = key.replace(/Ã/g, 'AE');
            key = key.replace(/Ã¶/g, 'oe');
            key = key.replace(/Ã/g, 'OE');
            key = key.replace(/Ã¼/g, 'ue');
            key = key.replace(/Ã/g, 'UE');
            key = key.replace(/Ã/g, 'ss');
            key = key.replace(/[^a-zA-Z0-9 ]/g, '_'); // /[&\/\\#,+()$~%.'Â§=^!`Â´;":.,*-?<>{}]/g, '_');
            return key;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'GenerateProjektkey', this.Debug.Typen.Service);
        }
    }
    GetEmptyProjekt() {
        try {
            let Zeit = (0, moment_1.default)();
            return {
                _id: null,
                StandortID: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.StandortID : this.Const.NONE,
                ProjektleiterID: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten._id : this.Const.NONE,
                StellvertreterID: this.Const.NONE,
                Projektkey: this.Const.NONE,
                Projektname: "",
                Projektkurzname: "",
                Projektnummer: "",
                PLZ: "",
                Ort: "",
                Strasse: "",
                Status: "Bearbeitung",
                Verfasser: {
                    Email: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Email : this.Const.NONE,
                    Vorname: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Vorname : this.Const.NONE,
                    Name: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Name : this.Const.NONE
                },
                Zeitpunkt: Zeit.format('HH:mm DD.MM.YYYY'),
                Zeitstempel: Zeit.valueOf(),
                Deleted: false,
                Projektfarbe: this.Const.NONE,
                Beteiligtenliste: [],
                Bauteilliste: []
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'GetEmptyProjekt', this.Debug.Typen.Service);
        }
    }
    GetProjektstatuscolor(Status) {
        try {
            switch (Status) {
                case this.Const.Projektstatusvarianten.Bearbeitung:
                    return this.Basics.Farben.Blau;
                    break;
                case this.Const.Projektstatusvarianten.Abgeschlossen:
                    return this.Basics.Farben.Burnicklgruen;
                    break;
                case this.Const.Projektstatusvarianten.Ruht:
                    return this.Basics.Farben.Orange;
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'GetProjektstatuscolor', this.Debug.Typen.Service);
        }
    }
    AddProjekt() {
        try {
            let Observer;
            let Projekt;
            return new Promise((resove, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerUrl, this.CurrentProjekt);
                Observer.subscribe({
                    next: (result) => {
                        Projekt = result.data;
                    },
                    complete: () => {
                        this.UpdateProjektliste(Projekt);
                        this.Pool.GesamtprojektelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'AddProjekt', this.Debug.Typen.Service);
        }
    }
    UpdateProjekt() {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            Params.set('id', this.CurrentProjekt._id);
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerUrl, this.CurrentProjekt);
                Observer.subscribe({
                    next: (ne) => {
                    },
                    complete: () => {
                        this.UpdateProjektliste(this.CurrentProjekt);
                        this.Pool.GesamtprojektelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'UpdateProjekt', this.Debug.Typen.Service);
        }
    }
    UpdateProjektliste(projekt) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Gesamtprojektliste, { _id: this.CurrentProjekt._id });
            if (Index !== -1) {
                this.Pool.Gesamtprojektliste[Index] = projekt;
                console.log('Projektliste updated: ' + projekt.Projektname);
            }
            else {
                console.log('Projekt nicht gefunden -> neues Projekt hinzufÃ¼gen');
                this.Pool.Gesamtprojektliste.push(projekt); // neuen
            }
            // GelÃ¶scht markiert EintrÃ¤ge entfernen
            this.Pool.Gesamtprojektliste = lodash.filter(this.Pool.Gesamtprojektliste, (currentprojekt) => {
                return currentprojekt.Deleted === false;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'UpdateProjektliste', this.Debug.Typen.Service);
        }
    }
    DeleteProjekt() {
        try {
            let Observer;
            this.CurrentProjekt.Deleted = true;
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerUrl, this.CurrentProjekt);
                Observer.subscribe({
                    next: (ne) => {
                    },
                    complete: () => {
                        this.UpdateProjektliste(this.CurrentProjekt);
                        this.Pool.GesamtprojektelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'DeleteProjekt', this.Debug.Typen.Service);
        }
    }
    SetProjekteliste(idliste) {
        try {
            let Projekt;
            this.Projektliste = [];
            for (let ProjektID of idliste) {
                Projekt = lodash.find(this.Pool.Gesamtprojektliste, { _id: ProjektID });
                if (!lodash.isUndefined(Projekt))
                    this.Projektliste.push(Projekt);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Pool', 'SetProjekteliste', this.Debug.Typen.Service);
        }
    }
    InitProjektfavoritenliste() {
        try {
            let Settings = this.Pool.Mitarbeitersettings;
            if (Settings !== null) {
                if (Settings.FavoritenID === null && this.Pool.Mitarbeiterdaten.Favoritenliste.length > 0) {
                    this.CurrentFavorit = this.Pool.Mitarbeiterdaten.Favoritenliste[0];
                    Settings.FavoritenID = this.CurrentFavorit.FavoritenID;
                }
                if (Settings.FavoritenID !== null) {
                    this.CurrentFavoritenlisteindex = lodash.findIndex(this.Pool.Mitarbeiterdaten.Favoritenliste, { FavoritenID: Settings.FavoritenID });
                    if (this.CurrentFavoritenlisteindex !== -1) {
                        this.CurrentFavorit = this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex];
                        this.Favoritenprojekteanzahl = this.CurrentFavorit.Projekteliste.length;
                    }
                    else {
                        this.CurrentFavoritenlisteindex = 0;
                        this.CurrentFavorit = this.Pool.Mitarbeiterdaten.Favoritenliste[this.CurrentFavoritenlisteindex];
                    }
                    this.SetProjekteliste(this.CurrentFavorit.Projekteliste);
                    this.CurrentFavoritenChanged.emit();
                    if (Settings.Favoritprojektindex !== null && Settings.Favoritprojektindex >= 1000) {
                        this.CurrentFavoritprojektindex = Settings.Favoritprojektindex;
                    }
                    else {
                        if (Settings.ProjektID !== null) {
                            this.CurrentFavoritprojektindex = lodash.findIndex(this.Projektliste, { _id: Settings.ProjektID });
                            if (this.CurrentFavoritprojektindex === -1) {
                                this.CurrentFavoritprojektindex = 0;
                                this.CurrentProjekt = this.Projektliste[this.CurrentFavoritprojektindex];
                            }
                            else
                                this.CurrentProjekt = this.Projektliste[this.CurrentFavoritprojektindex];
                        }
                        else {
                            this.CurrentFavoritprojektindex = 0;
                            this.CurrentProjekt = this.Projektliste[this.CurrentFavoritprojektindex];
                        }
                    }
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'InitFavoritenliste', this.Debug.Typen.Service);
        }
    }
    GetEmptyProjektfavoriten() {
        try {
            return {
                FavoritenID: null,
                Name: '',
                Projekteliste: []
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'GetEmptyProjektfavoriten', this.Debug.Typen.Service);
        }
    }
    SaveProjektefavoriten() {
        try {
            let Index;
            return new Promise((resolve, reject) => {
                delete this.Pool.Mitarbeiterdaten.__v;
                if (this.CurrentFavorit.FavoritenID === null) {
                    this.CurrentFavorit.FavoritenID = (0, uuid_1.v4)();
                    this.Pool.Mitarbeiterdaten.Favoritenliste.push(this.CurrentFavorit);
                }
                else {
                    Index = lodash.findIndex(this.Pool.Mitarbeiterdaten.Favoritenliste, { FavoritenID: this.CurrentFavorit.FavoritenID });
                    if (Index !== -1) {
                        this.Pool.Mitarbeiterdaten.Favoritenliste[Index] = this.CurrentFavorit;
                    }
                }
                this.MitarbeiterDB.UpdateMitarbeiter(this.Pool.Mitarbeiterdaten).then(() => {
                    resolve(true);
                }).catch((error) => {
                    reject(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'SaveProjektefavoriten', this.Debug.Typen.Service);
        }
    }
    GetProjektfarbeByName(name) {
        try {
            let Farbe = lodash.find(this.Projektfarbenliste, { Name: name });
            if (lodash.isUndefined(Farbe)) {
                return {
                    Background: this.Basics.Farben.Burnicklgruen,
                    Foreground: 'white',
                    Name: ''
                };
            }
            else {
                return Farbe;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projekte', 'function', this.Debug.Typen.Service);
        }
    }
};
DatabaseProjekteService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: http_1.HttpClient },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: const_1.ConstProvider }
];
DatabaseProjekteService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseProjekteService);
exports.DatabaseProjekteService = DatabaseProjekteService;


/***/ }),

/***/ 38048:
/*!***********************************************************************************!*\
  !*** ./src/app/services/database-projektpunkte/database-projektpunkte.service.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseProjektpunkteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const database_mitarbeiter_service_1 = __webpack_require__(/*! ../database-mitarbeiter/database-mitarbeiter.service */ 26229);
const database_projekte_service_1 = __webpack_require__(/*! ../database-projekte/database-projekte.service */ 31222);
const moment_2 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const uuid_1 = __webpack_require__(/*! uuid */ 70291);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const database_protokolle_service_1 = __webpack_require__(/*! ../database-protokolle/database-protokolle.service */ 61705);
let DatabaseProjektpunkteService = class DatabaseProjektpunkteService {
    constructor(Debug, Basics, http, Pool, DBMitarbeiter, DBProjekt, DBProtokoll, Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.http = http;
        this.Pool = Pool;
        this.DBMitarbeiter = DBMitarbeiter;
        this.DBProjekt = DBProjekt;
        this.DBProtokoll = DBProtokoll;
        this.Const = Const;
        try {
            this.CurrentProjektpunkt = null;
            this.Statustypenliste = [];
            this.ServerProjektpunkteUrl = this.Pool.CockpitserverURL + '/projektpunkte';
            this.Heute = (0, moment_2.default)().locale('de');
            this.LiveEditorOpen = false;
            this.Wochenpunkteliste = [];
            this.InitStatustypen();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'constructor', this.Debug.Typen.Service);
        }
    }
    InitStatustypen() {
        try {
            let Eintrag;
            this.Statustypenliste = [];
            for (const key of Object.keys(this.Const.Projektpunktstatustypen)) {
                Eintrag = this.Const.Projektpunktstatustypen[key];
                this.Statustypenliste.push(Eintrag);
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'InitStatustypen', this.Debug.Typen.Service);
        }
    }
    GetStatuscolor(Projektpunkt) {
        try {
            if (Projektpunkt !== null) {
                return this.GetProjektpunktstusByName(Projektpunkt.Status).Color;
            }
            else
                return 'red';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'GetStatuscolor', this.Debug.Typen.Service);
        }
    }
    GetProjektpunktstusByName(name) {
        try {
            let Eintrag;
            for (const key of Object.keys(this.Const.Projektpunktstatustypen)) {
                Eintrag = this.Const.Projektpunktstatustypen[key];
                if (name === Eintrag.Name)
                    return Eintrag;
            }
            return null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'GetProjektpunktstusByName', this.Debug.Typen.Service);
        }
    }
    DeleteProjektpunkt(punkt) {
        try {
            punkt.Deleted = true;
            return new Promise((resolve, reject) => {
                this.UpdateProjektpunkt(punkt).then(() => {
                    if (punkt.ProtokollID !== null && this.DBProtokoll.CurrentProtokoll !== null) {
                        this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe = lodash.filter(this.DBProtokoll.CurrentProtokoll.ProjektpunkteIDListe, (istid) => {
                            return istid !== punkt._id;
                        });
                        this.DBProtokoll.SaveProtokoll().then(() => {
                            resolve(true);
                        }).catch((errorb) => {
                            reject(errorb);
                        });
                    }
                    else {
                        resolve(true);
                    }
                }).catch((errora) => {
                    reject(errora);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'DeleteProjektpunkt', this.Debug.Typen.Service);
        }
    }
    AddProjektpunkt(projektpunkt) {
        try {
            let Observer;
            return new Promise((resolve, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerProjektpunkteUrl, projektpunkt);
                Observer.subscribe({
                    next: (result) => {
                        this.CurrentProjektpunkt = result.Projektpunkt;
                    },
                    complete: () => {
                        this.UpdateProjektpunkteliste(this.CurrentProjektpunkt);
                        this.Pool.ProjektpunktelisteChanged.emit();
                        this.Pool.ProjektpunktChanged.emit();
                        resolve(this.CurrentProjektpunkt);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'AddProjektpunkt', this.Debug.Typen.Service);
        }
    }
    UpdateProjektpunkt(punkt) {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            let Merker;
            return new Promise((resolve, reject) => {
                Params.set('id', punkt._id);
                // PUT fÃ¼r update
                delete punkt.__v;
                Observer = this.http.put(this.ServerProjektpunkteUrl, punkt);
                Observer.subscribe({
                    next: (ne) => {
                        Merker = ne.Projektpunkt;
                    },
                    complete: () => {
                        if (Merker !== null) {
                            this.CurrentProjektpunkt = Merker;
                            this.UpdateProjektpunkteliste(this.CurrentProjektpunkt);
                            this.Pool.ProjektpunktelisteChanged.emit();
                            this.Pool.ProjektpunktChanged.emit();
                            resolve(true);
                        }
                        else {
                            reject(new Error('Projektpunkt auf Server nicht gefunden.'));
                        }
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'UpdateProjektpunkt', this.Debug.Typen.Service);
        }
    }
    /*
  
    SaveProjektpunktliste(liste: Projektpunktestruktur[]): Promise<any> {
  
      try {
  
        let Projektpunkt: Projektpunktestruktur;
  
        return new Promise((resolve, reject) => {
  
          Projektpunkt = lodash.find(liste, {LiveEditor: true});
  
          debugger;
  
          if(!lodash.isUndefined(Projektpunkt)) {
  
            liste.forEach((eintrag: Projektpunktestruktur) => {
  
              eintrag.LiveEditor = false;
            });
  
  
          }
          else
          {
            resolve(true);
          }
        });
  
      } catch (error) {
  
        this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'SaveProjektpunktliste', this.Debug.Typen.Service);
      }
    }
  
     */
    DeleteProjektpunkteliste(liste, projekt) {
        try {
            return new Promise((resolve, reject) => {
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'DeleteProjektpunkteliste', this.Debug.Typen.Service);
        }
    }
    CountProjektpunkte(Liste, ShowMeintag) {
        try {
            let Anzahl = 0;
            if (lodash.isUndefined(Liste) === false) {
                for (let Punkt of Liste) {
                    if (this.CheckFilter(Punkt, ShowMeintag) === true)
                        Anzahl++;
                }
            }
            return Anzahl;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Projektpunkte', 'CountPunkte', this.Debug.Typen.Service);
        }
    }
    GetNewProjektpunkt(Projekt, Nummer) {
        try {
            let Heute = (0, moment_1.default)();
            let Termin = Heute.clone().add(7, 'days');
            let Startzeitstempel = Heute.valueOf();
            let Startzeitpunkt = Heute.format('DD.MM.YYYY');
            let Endezeitstempel = Termin.valueOf();
            let Endezeitpunkt = Termin.format('DD.MM.YYYY');
            let Vorname = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Vorname : '';
            let Name = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Name : '';
            let Email = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Email : '';
            /*
            let Kommentarliste: Projektpunktkommentarstruktur[] = [];
      
            Kommentarliste.push({
              Kommentar: "Das ist der erste Kommentar zum testen der Editoren mit einem lÃ¤ngeren Text damit mehrere Zeilen angezeigt werden kÃ¶nnen.",
              Kommentartyptyp: "", LiveEditor: false, Nextstepdone: false, Nextstepdonezeitstempel: 0, Nummer: 0, ProjektpunktID: "", Verfasser: {Email: "", Name: ""},
              Zeitsptempel: Heute.valueOf(), Zeitstring: "", id: "001"
            });
      
            Kommentarliste.push({
              Kommentar: "Die ist noch ein Kommentar zum testen der Editoren mit einr lÃ¤ngeren Beschreibung damit mehrere Zeilen angezeigt werden kÃ¶nnen.",
              Kommentartyptyp: "", LiveEditor: false, Nextstepdone: false, Nextstepdonezeitstempel: 0, Nummer: 0, ProjektpunktID: "", Verfasser: {Email: "", Name: ""},
              Zeitsptempel: Heute.valueOf(), Zeitstring: "", id: "002"
            });
      
             */
            let Punkt = {
                _id: null,
                ProjektID: Projekt !== null ? Projekt._id : null,
                Projektkey: this.DBProjekt.CurrentProjekt.Projektkey,
                ProjektleiterID: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten._id : null,
                ProtokollID: null,
                NotizenID: null,
                FestlegungskategorieID: null,
                Nummer: Nummer.toString(),
                Listenposition: Nummer,
                Aufgabe: "",
                Status: this.GetProjektpunktstusByName(this.Const.Projektpunktstatustypen.Offen.Name).Name,
                Deleted: false,
                Endezeitstempel: Endezeitstempel,
                Endezeitstring: Endezeitpunkt,
                EndeKalenderwoche: null,
                Startzeitsptempel: Startzeitstempel,
                Startzeitstring: Startzeitpunkt,
                Geschlossenzeitstempel: null,
                Geschlossenzeitstring: null,
                FileDownloadURL: this.Const.NONE,
                Filename: this.Const.NONE,
                Filezoom: 1,
                Bildbreite: 0,
                Bildhoehe: 0,
                Querdarstellung: false,
                Meilenstein: false,
                Meilensteinstatus: 'OFF',
                Anmerkungenliste: [],
                DataChanged: false,
                ProtokollOnly: true,
                ProtokollPublic: true,
                LiveEditor: false,
                BemerkungMouseOver: false,
                EndeMouseOver: false,
                Zeitansatz: 30,
                Zeitansatzeinheit: this.Const.Zeitansatzeinheitvarianten.Minuten,
                Fortschritt: 0,
                ZustaendigeInternIDListe: [this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten._id : ''],
                ZustaendigeExternIDListe: [],
                BauteilID: null,
                GeschossID: null,
                RaumID: null,
                OpenFestlegung: false,
                Fachbereich: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Fachbereich : null,
                Oberkostengruppe: null,
                Hauptkostengruppe: null,
                Unterkostengruppe: null,
                Verfasser: {
                    Vorname: Vorname,
                    Name: Name,
                    Email: Email
                }
            };
            return Punkt;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetNewProjektpunkt', this.Debug.Typen.Service);
        }
    }
    GetNewProtokollpunkt(Protokoll) {
        try {
            let Nummer = Protokoll !== null ? (Protokoll.ProjektpunkteIDListe.length + 1).toString() : 'unbekannt';
            let Tag;
            if (Protokoll !== null)
                Tag = (0, moment_1.default)(Protokoll.Startstempel);
            else
                Tag = (0, moment_1.default)();
            let Termin = Tag.clone().add(7, 'days');
            let Startzeitpunkt = Tag.format('DD.MM.YYYY');
            let Endezeitstempel = Termin.valueOf();
            let Endezeitpunkt = Termin.format('DD.MM.YYYY');
            let Vorname = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Vorname : '';
            let Name = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Name : '';
            let Email = this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Email : '';
            let Anmerkungenliste = [];
            let Punkt = {
                _id: null,
                Projektkey: this.DBProjekt.CurrentProjekt.Projektkey,
                ProjektID: Protokoll !== null ? Protokoll.ProjektID : null,
                ProjektleiterID: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten._id : null,
                ProtokollID: Protokoll !== null ? Protokoll._id : null,
                NotizenID: null,
                FestlegungskategorieID: null,
                Nummer: Nummer,
                Listenposition: parseInt(Nummer) - 1,
                Aufgabe: "",
                Status: this.Const.Projektpunktstatustypen.Protokollpunkt.Name,
                Deleted: false,
                Endezeitstempel: Endezeitstempel,
                Endezeitstring: Endezeitpunkt,
                EndeKalenderwoche: null,
                Startzeitsptempel: Protokoll !== null ? Protokoll.Startstempel : null,
                Startzeitstring: Startzeitpunkt,
                Geschlossenzeitstempel: null,
                Geschlossenzeitstring: null,
                FileDownloadURL: this.Const.NONE,
                Filename: this.Const.NONE,
                Filezoom: 1,
                Bildbreite: 0,
                Bildhoehe: 0,
                Querdarstellung: false,
                Meilenstein: false,
                Meilensteinstatus: 'OFF',
                Anmerkungenliste: Anmerkungenliste,
                DataChanged: false,
                ProtokollOnly: true,
                ProtokollPublic: true,
                LiveEditor: false,
                BemerkungMouseOver: false,
                EndeMouseOver: false,
                Zeitansatz: 30,
                Zeitansatzeinheit: this.Const.Zeitansatzeinheitvarianten.Minuten,
                Fortschritt: 0,
                ZustaendigeInternIDListe: [this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten._id : ''],
                ZustaendigeExternIDListe: [],
                BauteilID: null,
                GeschossID: null,
                RaumID: null,
                OpenFestlegung: false,
                Fachbereich: this.Pool.Mitarbeiterdaten !== null ? this.Pool.Mitarbeiterdaten.Fachbereich : null,
                Oberkostengruppe: null,
                Hauptkostengruppe: null,
                Unterkostengruppe: null,
                Verfasser: {
                    Vorname: Vorname,
                    Name: Name,
                    Email: Email
                }
            };
            return Punkt;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetNewProtokollpunkt', this.Debug.Typen.Service);
        }
    }
    GetNewAnmerkung() {
        try {
            let Heute = (0, moment_2.default)();
            let id = (0, uuid_1.v4)();
            return {
                Anmerkung: "",
                LiveEditor: false,
                Nummer: this.CurrentProjektpunkt.Anmerkungenliste.length + 1,
                Verfasser: {
                    Vorname: this.Pool.Mitarbeiterdaten.Vorname,
                    Name: this.Pool.Mitarbeiterdaten.Name,
                    Email: this.Pool.Mitarbeiterdaten.Email
                },
                Zeitstempel: Heute.valueOf(),
                Zeitstring: Heute.format('DD.MM.YYYY'),
                AnmerkungID: id
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetNewAnmerkung', this.Debug.Typen.Service);
        }
    }
    BerechneArbeitstage(startDate, endDate) {
        try {
            const day = startDate.clone();
            let businessDays = 0;
            let Wochentag;
            while (day.isSameOrBefore(endDate, 'day')) {
                Wochentag = day.isoWeekday();
                // 1 = Montag -> 7 = Sonntag
                if (Wochentag < 6) { // Das bedeutet Montag bis Freitag
                    businessDays++;
                }
                day.add(1, 'day');
            }
            return businessDays;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'BerechneArbeitstage', this.Debug.Typen.Service);
        }
    }
    CheckProjektpunktFaellig(Projektpunkt) {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            let IstKW = Heute.isoWeek();
            let TerminKW = Projektpunkt.EndeKalenderwoche;
            let Termin = (0, moment_1.default)(Projektpunkt.Endezeitstempel).locale('de');
            if (Projektpunkt.Status === this.Const.Projektpunktstatustypen.Geschlossen.Name) {
                return this.Const.Faelligkeitsstatus.Nicht_faellig;
            }
            else {
                if (Projektpunkt.EndeKalenderwoche === null) {
                    // Termin prÃ¼fen
                    if (Termin.isSame(Heute, 'day')) {
                        return this.Const.Faelligkeitsstatus.Faellig;
                    }
                    else if (Termin.isBefore(Heute, 'day')) {
                        return this.Const.Faelligkeitsstatus.Ueberfaellig;
                    }
                    else {
                        return this.Const.Faelligkeitsstatus.Nicht_faellig;
                    }
                }
                else {
                    // Kalenderwoche prÃ¼fen
                    if (TerminKW === IstKW) {
                        return this.Const.Faelligkeitsstatus.Faellig;
                    }
                    else if (TerminKW < IstKW) {
                        return this.Const.Faelligkeitsstatus.Ueberfaellig;
                    }
                    else {
                        return this.Const.Faelligkeitsstatus.Nicht_faellig;
                    }
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'CheckProjektpunktFaellig', this.Debug.Typen.Service);
        }
    }
    GetRestageanzahl(Projektpunkt) {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            let Stichtag = (0, moment_1.default)(Projektpunkt.Endezeitstempel).locale('de');
            let Tageanzahl;
            if (Projektpunkt.Status === this.Const.Projektpunktstatustypen.Geschlossen.Name) {
                return '';
            }
            else {
                Tageanzahl = this.BerechneArbeitstage(Heute, Stichtag);
                switch (Tageanzahl) {
                    case 0:
                        return 'Heute';
                        break;
                    case 1:
                        return '1 Tag';
                        break;
                    default:
                        return Tageanzahl + ' Tage';
                        break;
                }
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetRestageanzahl', this.Debug.Typen.Service);
        }
    }
    GetFaelligBackground(Projektpunkt) {
        try {
            let Status = this.CheckProjektpunktFaellig(Projektpunkt);
            switch (Status) {
                case this.Const.Faelligkeitsstatus.Faellig:
                    if (Projektpunkt.Status === this.Const.Projektpunktstatustypen.Ruecklauf.Name)
                        return this.GetProjektpunktstusByName(Projektpunkt.Status).Color;
                    else
                        return 'red';
                    break;
                case this.Const.Faelligkeitsstatus.Ueberfaellig:
                    if (Projektpunkt.Status === this.Const.Projektpunktstatustypen.Ruecklauf.Name)
                        return this.GetProjektpunktstusByName(Projektpunkt.Status).Color;
                    else
                        return 'darkred';
                    break;
                default:
                    return 'white';
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetFaelligBackground', this.Debug.Typen.Service);
        }
    }
    UpdateProjektpunkteliste(Projektpunkt) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Projektpunkteliste[this.DBProjekt.CurrentProjekt.Projektkey], { _id: Projektpunkt._id });
            if (Index !== -1) {
                this.Pool.Projektpunkteliste[this.DBProjekt.CurrentProjekt.Projektkey][Index] = Projektpunkt; // aktualisieren
                console.log('Projektpunktliste updated: "' + Projektpunkt.Aufgabe + '"');
            }
            else {
                console.log('Projektpunkt nicht gefunden -> neuen Projektpunkt hinzufÃ¼gen');
                this.Pool.Projektpunkteliste[this.DBProjekt.CurrentProjekt.Projektkey].push(Projektpunkt); // neuen
            }
            // GelÃ¶scht markierte EintrÃ¤ge entfernen
            this.Pool.Projektpunkteliste[this.DBProjekt.CurrentProjekt.Projektkey] = lodash.filter(this.Pool.Projektpunkteliste[this.DBProjekt.CurrentProjekt.Projektkey], (currentpunkt) => {
                return currentpunkt.Deleted === false;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'UpdateProjektpunkteliste', this.Debug.Typen.Service);
        }
    }
    CheckIsMeintag(projektpunkt) {
        try {
            let Meintag;
            if (this.Pool.Mitarbeiterdaten !== null) {
                Meintag = lodash.find(this.Pool.Mitarbeiterdaten.Meintagliste, (meintag) => {
                    return meintag.ProjektID === projektpunkt.ProjektID && meintag.ProjektpunktID === projektpunkt._id;
                });
                return !lodash.isUndefined(Meintag);
            }
            return false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'CheckIsMeintag', this.Debug.Typen.Service);
        }
    }
    GetMeintagCheckstatus(projektpunkt) {
        try {
            let Meintag;
            if (this.Pool.Mitarbeiterdaten !== null) {
                Meintag = lodash.find(this.Pool.Mitarbeiterdaten.Meintagliste, (meintag) => {
                    return meintag.ProjektID === projektpunkt.ProjektID && meintag.ProjektpunktID === projektpunkt._id;
                });
                if (!lodash.isUndefined(Meintag)) {
                    return Meintag.Checkedstatus;
                }
                else {
                    return 'OFF';
                }
            }
            else
                return 'OFF';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetMeintagCheckstatus', this.Debug.Typen.Service);
        }
    }
    CheckFilter(Projektpunkt, ShowMeintag) {
        try {
            let MeintagGoOn = false;
            let GoOn = true;
            let Stichtag;
            let Settings = (this.Pool.Mitarbeitersettings === null || lodash.isUndefined(this.Pool.Mitarbeitersettings) === true) ? this.Pool.GetNewMitarbeitersettings() : this.Pool.Mitarbeitersettings;
            // let Vergleichstag: Moment = MyMoment(Projektpunkt.Endezeitstempel).locale('de');
            //  let VergleichsKW: number  = Vergleichstag.isoWeek();
            let Starttag;
            let Endetag;
            let ResultA;
            let ResultB;
            // let Wocheanzahl: number = MyMoment().isoWeeksInYear();
            // let NaechsteWoche: number       = this.Heute.isoWeek();
            //  let Faellig: boolean = this.CheckProjektpunktFaellig(Projektpunkt) !== this.Const.Faelligkeitsstatus.Nicht_faellig ? true : false;
            MeintagGoOn = true;
            if (this.CheckIsMeintag(Projektpunkt) === false) {
                // nicht in Meintagliste
            }
            else {
                // in Meintagliste
                if (ShowMeintag === true)
                    MeintagGoOn = true;
                else
                    MeintagGoOn = false;
            }
            if (MeintagGoOn === true) {
                switch (Projektpunkt.Status) {
                    case this.Const.Projektpunktstatustypen.Offen.Name:
                        GoOn = Settings.AufgabenShowOffen;
                        break;
                    case this.Const.Projektpunktstatustypen.Geschlossen.Name:
                        GoOn = Settings.AufgabenShowGeschlossen;
                        break;
                    case this.Const.Projektpunktstatustypen.Bearbeitung.Name:
                        GoOn = Settings.AufgabenShowBearbeitung;
                        break;
                    case this.Const.Projektpunktstatustypen.Ruecklauf.Name:
                        GoOn = Settings.AufgabenShowRuecklauf;
                        break;
                    case this.Const.Projektpunktstatustypen.Protokollpunkt.Name:
                        return false;
                        break;
                    case this.Const.Projektpunktstatustypen.Festlegung.Name:
                        return false;
                        break;
                }
                if (Settings.AufgabenShowMeilensteinOnly === true && GoOn === true) {
                    GoOn = Projektpunkt.Meilenstein === true;
                }
                if (GoOn === true) {
                    if (Settings.AufgabenTerminfiltervariante === null) {
                        return true;
                    }
                    else {
                        // Zeitfilter einbauen
                        Stichtag = (0, moment_2.default)(Projektpunkt.Endezeitstempel);
                        switch (Settings.AufgabenTerminfiltervariante) {
                            case this.Const.Faelligkeitsterminfiltervarianten.Zeitspanne:
                                Starttag = (0, moment_2.default)(Settings.AufgabenTerminfilterStartwert);
                                Endetag = (0, moment_2.default)(Settings.AufgabenTerminfilterEndewert);
                                ResultA = Stichtag.isSameOrAfter(Starttag, 'day');
                                ResultB = Stichtag.isSameOrBefore(Endetag, 'day');
                                return ResultA === true && ResultB === true;
                                break;
                        }
                    }
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'CheckFilter', this.Debug.Typen.Service);
        }
    }
    SetStatus(projektpunkt, status) {
        try {
            projektpunkt.Status = status;
            switch (projektpunkt.Status) {
                case this.Const.Projektpunktstatustypen.Geschlossen.Name:
                    projektpunkt.Geschlossenzeitstempel = (0, moment_2.default)().valueOf();
                    break;
                case this.Const.Projektpunktstatustypen.Festlegung.Name:
                    projektpunkt.Geschlossenzeitstempel = null;
                    projektpunkt.Meilenstein = false;
                    projektpunkt.Meilensteinstatus = 'OFF';
                    break;
                default:
                    projektpunkt.Geschlossenzeitstempel = null;
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'SetStatus', this.Debug.Typen.Service);
        }
    }
    CheckFilterMeilenstein(projektpunkt) {
        try {
            let Heute = (0, moment_2.default)();
            let Fertigdatum;
            let Stichtag;
            if (projektpunkt.Meilenstein === true) {
                if (projektpunkt.Status === this.Const.Projektpunktstatustypen.Geschlossen.Name) {
                    if (projektpunkt.Geschlossenzeitstempel === null)
                        projektpunkt.Geschlossenzeitstempel = Heute.valueOf();
                    Fertigdatum = (0, moment_2.default)(projektpunkt.Geschlossenzeitstempel); // .subtract(2, 'week');
                    Stichtag = Fertigdatum.clone().add(this.Pool.Mitarbeitersettings.AufgabenMeilensteineNachlauf, 'week');
                    return Heute.isSameOrBefore(Stichtag, 'day');
                }
                else {
                    return true;
                }
            }
            else {
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'CheckFilterMeilenstein', this.Debug.Typen.Service);
        }
    }
    PrepareWochenpunkteliste() {
        try {
            let Projektpunkt;
            let Wochentagliste = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag'];
            this.Wochenpunkteliste = [];
            this.Wochenpunkteliste['Montag'] = [];
            this.Wochenpunkteliste['Dienstag'] = [];
            this.Wochenpunkteliste['Mittwoch'] = [];
            this.Wochenpunkteliste['Donnerstag'] = [];
            this.Wochenpunkteliste['Freitag'] = [];
            if (this.Pool.Mitarbeiterdaten !== null) {
                for (let Wocheneintrag of this.Pool.Mitarbeiterdaten.Meinewocheliste) {
                    Projektpunkt = lodash.find(this.Pool.Projektpunkteliste[Wocheneintrag.Projektkey], { _id: Wocheneintrag.ProjektpunktID });
                    if (lodash.isUndefined(Projektpunkt) === false) { //  && Projektpunkt.Status !== this.Const.Projektpunktstatustypen.Geschlossen.Name
                        for (let Tag of Wochentagliste) {
                            if (Wocheneintrag.Montagseinsatz === true && Tag === 'Montag') {
                                Projektpunkt.Minuten = Wocheneintrag.Montagsminuten + 60 * Wocheneintrag.Montagsstunden;
                                this.Wochenpunkteliste['Montag'].push(lodash.cloneDeep(Projektpunkt));
                            }
                            if (Wocheneintrag.Dienstagseinsatz === true && Tag === 'Dienstag') {
                                Projektpunkt.Minuten = Wocheneintrag.Dienstagsminuten + 60 * Wocheneintrag.Dienstagsstunden;
                                this.Wochenpunkteliste['Dienstag'].push(lodash.cloneDeep(Projektpunkt));
                            }
                            if (Wocheneintrag.Mittwochseinsatz === true && Tag === 'Mittwoch') {
                                Projektpunkt.Minuten = Wocheneintrag.Mittwochsminuten + 60 * Wocheneintrag.Mittwochsstunden;
                                this.Wochenpunkteliste['Mittwoch'].push(lodash.cloneDeep(Projektpunkt));
                            }
                            if (Wocheneintrag.Donnerstagseinsatz === true && Tag === 'Donnerstag') {
                                Projektpunkt.Minuten = Wocheneintrag.Donnerstagsminuten + 60 * Wocheneintrag.Donnerstagsstunden;
                                this.Wochenpunkteliste['Donnerstag'].push(lodash.cloneDeep(Projektpunkt));
                            }
                            if (Wocheneintrag.Freitagseinsatz === true && Tag === 'Freitag') {
                                Projektpunkt.Minuten = Wocheneintrag.Freitagsminuten + 60 * Wocheneintrag.Freitagsstunden;
                                this.Wochenpunkteliste['Freitag'].push(lodash.cloneDeep(Projektpunkt));
                            }
                        }
                    }
                }
            }
            this.Wochenpunkteliste['Montag'] = this.SortWochenpunkteliste(this.Wochenpunkteliste['Montag']);
            this.Wochenpunkteliste['Dienstag'] = this.SortWochenpunkteliste(this.Wochenpunkteliste['Dienstag']);
            this.Wochenpunkteliste['Mittwoch'] = this.SortWochenpunkteliste(this.Wochenpunkteliste['Mittwoch']);
            this.Wochenpunkteliste['Donnerstag'] = this.SortWochenpunkteliste(this.Wochenpunkteliste['Donnerstag']);
            this.Wochenpunkteliste['Freitag'] = this.SortWochenpunkteliste(this.Wochenpunkteliste['Freitag']);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'PrepareWochenpunkteliste', this.Debug.Typen.Component);
        }
    }
    SortWochenpunkteliste(wochenliste) {
        try {
            return wochenliste.sort((a, b) => {
                if (a.Projektkey < b.Projektkey)
                    return -1;
                if (a.Projektkey > b.Projektkey)
                    return 1;
                return 0;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'SortWochenpunkteliste', this.Debug.Typen.Component);
        }
    }
    CheckIsMeinewoche(Projektpunkt) {
        try {
            let Eintrag;
            if (this.Pool.Mitarbeiterdaten !== null) {
                Eintrag = lodash.find(this.Pool.Mitarbeiterdaten.Meinewocheliste, (eintrag) => {
                    return eintrag.ProjektpunktID === Projektpunkt._id;
                });
                // eintrag.ProjektID === Projektpunkt.ProjektID &&
                return !lodash.isUndefined(Eintrag);
            }
            else {
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'CheckIsMeinewoche', this.Debug.Typen.Service);
        }
    }
    GetEndedatumString(Projektpunkt) {
        try {
            if (Projektpunkt.EndeKalenderwoche === null) {
                return (0, moment_2.default)(Projektpunkt.Endezeitstempel).format('DD.MM.YY');
            }
            else {
                return 'KW ' + Projektpunkt.EndeKalenderwoche;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Projektpunkte', 'GetEndedatumString', this.Debug.Typen.Service);
        }
    }
};
DatabaseProjektpunkteService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: http_1.HttpClient },
    { type: database_pool_service_1.DatabasePoolService },
    { type: database_mitarbeiter_service_1.DatabaseMitarbeiterService },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_protokolle_service_1.DatabaseProtokolleService },
    { type: const_1.ConstProvider }
];
DatabaseProjektpunkteService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseProjektpunkteService);
exports.DatabaseProjektpunkteService = DatabaseProjektpunkteService;


/***/ }),

/***/ 61705:
/*!*****************************************************************************!*\
  !*** ./src/app/services/database-protokolle/database-protokolle.service.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseProtokolleService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const database_projekte_service_1 = __webpack_require__(/*! ../database-projekte/database-projekte.service */ 31222);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
let DatabaseProtokolleService = class DatabaseProtokolleService {
    constructor(Debug, DBProjekt, Const, http, Pool) {
        this.Debug = Debug;
        this.DBProjekt = DBProjekt;
        this.Const = Const;
        this.http = http;
        this.Pool = Pool;
        this.Leistungsphasenvarianten = {
            LPH1: 'LPH1',
            LPH2: 'LPH2',
            LPH3: 'LPH3',
            LPH4: 'LPH4',
            LPH5: 'LPH5',
            LPH6: 'LPH6',
            LPH7: 'LPH7',
            LPH8: 'LPH8',
        };
        this.Searchmodusvarianten = {
            Titelsuche: 'Titelsuche',
            Inhaltsuche: 'Inhaltsuche'
        };
        this.Zeitfiltervarianten = {
            Dieser_Monat: 'Dieser Monat',
            Letzter_Monat: 'Letzter Monat',
            Vorletzter_Monat: 'Vorletzter Monat',
            Vor_drei_Monaten: 'Vor drei Monaten',
            Vor_vier_Monaten: 'Vor vier Monaten',
            Vor_fuenf_Monaten: 'Vor fÃ¼nf Monaten',
            Vor_sechs_Monaten: 'Vor sechs Monaten',
            Seit_dem_Zeitpunkt: 'Seit_dem_Zeitpunkt',
            Bis_zum_Zeitpunkt: 'Bis_zum_Zeitpunkt',
            Zeitspanne: 'Zeitspanne',
        };
        try {
            this.Zeitfiltervariante = this.Const.NONE;
            this.Leistungsphasenfilter = this.Const.NONE;
            this.CurrentProtokoll = null;
            this.Searchmodus = this.Searchmodusvarianten.Titelsuche;
            this.Monatsfilter = null;
            this.Startdatumfilter = null;
            this.Enddatumfilter = null;
            this.MinDatum = null;
            this.MaxDatum = null;
            this.ServerProtokollUrl = this.Pool.CockpitserverURL + '/protokolle';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'cosntructor', this.Debug.Typen.Service);
        }
    }
    GetEmptyProtokoll() {
        try {
            let Heute = (0, moment_1.default)();
            /*
            let Anzahl: number = this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey].length;
            let Nummer: string = Anzahl === 0 ? '' : (Anzahl + 1).toString();
             */
            return {
                Besprechungsort: "Online",
                Notizen: "",
                DownloadURL: "",
                Endestempel: Heute.clone().add(1, 'hour').valueOf(),
                Leistungsphase: 'LPH5',
                ProjektID: this.DBProjekt.CurrentProjekt._id,
                BeteiligtInternIDListe: [this.Pool.Mitarbeiterdaten._id],
                BeteiligExternIDListe: [],
                ProjektpunkteIDListe: [],
                Protokollnummer: '',
                ShowDetails: true,
                Startstempel: Heute.valueOf(),
                Titel: "Planer JF",
                Deleted: false,
                Verfasser: {
                    Name: this.Pool.Mitarbeiterdaten.Name,
                    Vorname: this.Pool.Mitarbeiterdaten.Vorname,
                    Email: this.Pool.Mitarbeiterdaten.Email,
                },
                Zeitstempel: Heute.valueOf(),
                Zeitstring: Heute.format('DD.MM.YYYY'),
                _id: null,
                Projektkey: this.DBProjekt.CurrentProjekt.Projektkey
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'GetEmptyProtokoll', this.Debug.Typen.Service);
        }
    }
    SaveProtokoll() {
        try {
            return new Promise((resolve, reject) => {
                if (this.CurrentProtokoll._id === null) {
                    this.AddProtokoll(this.CurrentProtokoll).then(() => {
                        this.Pool.ProtokolllisteChanged.emit();
                        resolve(true);
                    }).catch((errora) => {
                        reject(errora);
                        this.Debug.ShowErrorMessage(errora, 'Database Protokolle', 'OkButtonClicked / AddProjektpunkt', this.Debug.Typen.Service);
                    });
                }
                else {
                    this.UpdateProtokoll(this.CurrentProtokoll).then(() => {
                        this.Pool.ProtokolllisteChanged.emit();
                        resolve(true);
                    }).catch((errorb) => {
                        reject(errorb);
                        this.Debug.ShowErrorMessage(errorb, 'Database Protokolle', 'OkButtonClicked / UpdateProjektpunkt', this.Debug.Typen.Service);
                    });
                }
                /*
        
                  this.CurrentProtokoll.ProjektpunkteIDListe = [];
        
                  this.Punkteliste = lodash.filter(this.Punkteliste, (Punkt: Projektpunktestruktur) => {
        
                    return Punkt.Aufgabe !== '';
                  });
        
                  for(let Projektpunkt of this.Punkteliste) {
        
                    this.DB.CurrentProtokoll.ProjektpunkteIDListe.push(Projektpunkt._id);
                  }
        
                  this.DBProjektpunkte.SaveProjektpunktliste(this.Punkteliste).then(() => {
        
                  });
        
                 */
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'SaveProtokoll', this.Debug.Typen.Service);
        }
    }
    DeleteProtokoll(protokoll) {
        try {
            return new Promise((resolve, reject) => {
                resolve(true);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'DeleteProtokoll', this.Debug.Typen.Service);
        }
    }
    SetZeitspannenfilter(event) {
        try {
            let Heute = (0, moment_1.default)().locale('de');
            this.Zeitfiltervariante = event.detail.value;
            this.Startdatumfilter = null;
            this.Enddatumfilter = null;
            this.Monatsfilter = null;
            this.MinDatum = null;
            this.MaxDatum = null;
            switch (this.Zeitfiltervariante) {
                case this.Const.NONE:
                    this.Startdatumfilter = null;
                    this.Enddatumfilter = null;
                    this.MinDatum = null;
                    this.MaxDatum = null;
                    break;
                case this.Zeitfiltervarianten.Dieser_Monat:
                    this.Monatsfilter = Heute.clone();
                    break;
                case this.Zeitfiltervarianten.Letzter_Monat:
                    this.Monatsfilter = Heute.clone().subtract(1, 'month');
                    break;
                case this.Zeitfiltervarianten.Vorletzter_Monat:
                    this.Monatsfilter = Heute.clone().subtract(2, 'month');
                    break;
                case this.Zeitfiltervarianten.Vor_drei_Monaten:
                    this.Monatsfilter = Heute.clone().subtract(3, 'month');
                    break;
                case this.Zeitfiltervarianten.Vor_vier_Monaten:
                    this.Monatsfilter = Heute.clone().subtract(4, 'month');
                    break;
                case this.Zeitfiltervarianten.Vor_fuenf_Monaten:
                    this.Monatsfilter = Heute.clone().subtract(5, 'month');
                    break;
                case this.Zeitfiltervarianten.Vor_sechs_Monaten:
                    this.Monatsfilter = Heute.clone().subtract(6, 'month');
                    break;
                case this.Zeitfiltervarianten.Seit_dem_Zeitpunkt:
                    this.MinDatum = Heute.clone().subtract(6, 'month');
                    break;
                case this.Zeitfiltervarianten.Bis_zum_Zeitpunkt:
                    this.MaxDatum = Heute.clone().subtract(6, 'month');
                    break;
                case this.Zeitfiltervarianten.Zeitspanne:
                    this.Monatsfilter = null;
                    this.Enddatumfilter = Heute.clone();
                    this.Startdatumfilter = Heute.clone().subtract(6, 'month');
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'SetZeitspannenfilter', this.Debug.Typen.Service);
        }
    }
    GetProtokollByID(ProtokollID) {
        try {
            let Protoll = lodash.find(this.Pool.Protokollliste[this.DBProjekt.CurrentProjektindex], { _id: ProtokollID });
            if (!lodash.isUndefined(Protoll))
                return Protoll;
            else
                return null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'GetProtokollByID', this.Debug.Typen.Service);
        }
    }
    GetLetzteProtokollnummer() {
        try {
            let Liste;
            if (!lodash.isUndefined(this.Pool.Protokollliste[this.CurrentProtokoll.Projektkey])) {
                Liste = lodash.cloneDeep(this.Pool.Protokollliste[this.CurrentProtokoll.Projektkey]);
                if (Liste.length === 0) {
                    return ': kein vorhergendes Protokoll vorhanden';
                }
                else {
                    Liste.sort((punktA, punktB) => {
                        if (punktA.Startstempel < punktB.Startstempel)
                            return 1;
                        if (punktA.Startstempel > punktB.Startstempel)
                            return -1;
                        return 0;
                    });
                    return Liste[0].Protokollnummer;
                }
            }
            return 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'GetLetzteProtokollnummer', this.Debug.Typen.Service);
        }
    }
    UpdateProtokoll(protokoll) {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            let Merker;
            debugger;
            return new Promise((resolve, reject) => {
                Params.set('id', protokoll._id);
                // PUT fÃ¼r update
                delete protokoll.__v;
                Observer = this.http.put(this.ServerProtokollUrl, protokoll);
                Observer.subscribe({
                    next: (ne) => {
                        Merker = ne.Protokoll;
                    },
                    complete: () => {
                        if (Merker !== null) {
                            this.CurrentProtokoll = Merker;
                            this.UpdateProtokollliste(this.CurrentProtokoll);
                            resolve(true);
                        }
                        else {
                            reject(new Error('Protokoll auf Server nicht gefunden.'));
                        }
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'UpdateProtokoll', this.Debug.Typen.Service);
        }
    }
    AddProtokoll(protkoll) {
        try {
            let Observer;
            return new Promise((resolve, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerProtokollUrl, protkoll);
                Observer.subscribe({
                    next: (result) => {
                        this.CurrentProtokoll = result.Protokoll;
                        debugger;
                    },
                    complete: () => {
                        this.UpdateProtokollliste(this.CurrentProtokoll);
                        resolve(this.CurrentProtokoll);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'AddProtokoll', this.Debug.Typen.Service);
        }
    }
    UpdateProtokollliste(Protokoll) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey], { _id: Protokoll._id });
            if (Index !== -1) {
                this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey][Index] = Protokoll; // aktualisieren
                console.log('Protokollliste updated: "' + Protokoll.Titel + '"');
            }
            else {
                console.log('Protokoll nicht gefunden -> neues Protokoll hinzufÃ¼gen');
                this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey].push(Protokoll); // neuen
            }
            // GelÃ¶scht markierte EintrÃ¤ge entfernen
            this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey] = lodash.filter(this.Pool.Protokollliste[this.DBProjekt.CurrentProjekt.Projektkey], (protokoll) => {
                return protokoll.Deleted === false;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Protokolle', 'UpdateProjektpunkteliste', this.Debug.Typen.Service);
        }
    }
};
DatabaseProtokolleService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: const_1.ConstProvider },
    { type: http_1.HttpClient },
    { type: database_pool_service_1.DatabasePoolService }
];
DatabaseProtokolleService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseProtokolleService);
exports.DatabaseProtokolleService = DatabaseProtokolleService;


/***/ }),

/***/ 60955:
/*!***************************************************************************!*\
  !*** ./src/app/services/database-standorte/database-standorte.service.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatabaseStandorteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const database_pool_service_1 = __webpack_require__(/*! ../database-pool/database-pool.service */ 73004);
const http_1 = __webpack_require__(/*! @angular/common/http */ 58987);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
const uuid_1 = __webpack_require__(/*! uuid */ 70291);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
let DatabaseStandorteService = class DatabaseStandorteService {
    constructor(Debug, Pool, Const, http) {
        this.Debug = Debug;
        this.Pool = Pool;
        this.Const = Const;
        this.http = http;
        this.StandortfilterChanged = new core_1.EventEmitter();
        try {
            this.CurrentStandort = null;
            this.CurrentStandortfilter = null;
            this.ProjekteauswahlStandortfilter = null;
            this.MitarbeiterauswahlStandortfilter = null;
            this.ServerUrl = this.Pool.CockpitserverURL + '/standorte';
            this.Pool.MitarbeiterdatenChanged.subscribe(() => {
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'constructor', this.Debug.Typen.Service);
        }
    }
    InitService() {
        try {
            let Standort;
            if (this.Pool.Mitarbeiterdaten !== null && this.Pool.Mitarbeitersettings.StandortFilter !== this.Const.NONE) {
                Standort = lodash.find(this.Pool.Standorteliste, { _id: this.Pool.Mitarbeitersettings.StandortFilter });
                if (Standort)
                    this.CurrentStandortfilter = lodash.cloneDeep(Standort);
            }
            else {
                this.CurrentStandortfilter = null;
            }
            this.StandortfilterChanged.emit();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'InitService', this.Debug.Typen.Service);
        }
    }
    FinishService() {
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'FinishService', this.Debug.Typen.Service);
        }
    }
    GetStandort(standortid) {
        try {
            let Standort;
            Standort = lodash.find(this.Pool.Standorteliste, { _id: standortid });
            if (!lodash.isUndefined(Standort)) {
                return Standort.Kuerzel + ' - ' + Standort.Ort;
            }
            else
                return 'unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Mitarbeiter Editor', 'GetStandort', this.Debug.Typen.Component);
        }
    }
    GetEmptyStandort() {
        try {
            let Heute = (0, moment_1.default)();
            return {
                _id: null,
                Standort: "",
                Kuerzel: "",
                Strasse: "",
                PLZ: "",
                Ort: "",
                Telefon: "",
                Email: "",
                Deleted: false,
                Zeitstempel: Heute.valueOf(),
                Zeitpunkt: Heute.format('DD.MM.YYYY')
            };
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'GetEmptyStandort', this.Debug.Typen.Service);
        }
    }
    GetUniqueStandortID() {
        try {
            let StandortID = this.CurrentStandort.Kuerzel;
            StandortID = StandortID.replace(/ /g, '_');
            StandortID = StandortID.replace(/-/g, '_');
            StandortID = StandortID.replace(/./g, '_');
            return StandortID + '_' + (0, uuid_1.v4)();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'GetUniqueStandortID', this.Debug.Typen.Service);
        }
    }
    AddStandort() {
        try {
            let Observer;
            let Standort;
            return new Promise((resove, reject) => {
                // POST fÃ¼r neuen Eintrag
                Observer = this.http.post(this.ServerUrl, this.CurrentStandort);
                Observer.subscribe({
                    next: (result) => {
                        debugger;
                        Standort = result.data;
                    },
                    complete: () => {
                        this.UpdateStandortliste(Standort);
                        this.Pool.StandortelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'AddStandort', this.Debug.Typen.Service);
        }
    }
    UpdateStandortliste(standort) {
        try {
            let Index;
            Index = lodash.findIndex(this.Pool.Standorteliste, { _id: this.CurrentStandort._id });
            if (Index !== -1) {
                this.Pool.Standorteliste[Index] = standort;
                console.log('Standortliste updated: ' + standort.Standort);
            }
            else {
                console.log('Standort nicht gefunden -> neuen Standort hinzufÃ¼gen');
                this.Pool.Standorteliste.push(standort); // neuen
            }
            // GelÃ¶scht markiert EintrÃ¤ge entfernen
            this.Pool.Standorteliste = lodash.filter(this.Pool.Standorteliste, (currentstandort) => {
                return currentstandort.Deleted === false;
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'UpdateStandortliste', this.Debug.Typen.Service);
        }
    }
    UpdateStandort() {
        try {
            let Observer;
            let Params = new http_1.HttpParams();
            Params.set('id', this.CurrentStandort._id);
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerUrl, this.CurrentStandort);
                Observer.subscribe({
                    next: (ne) => {
                        debugger;
                    },
                    complete: () => {
                        debugger;
                        this.UpdateStandortliste(this.CurrentStandort);
                        this.Pool.StandortelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'UpdateStandort', this.Debug.Typen.Service);
        }
    }
    DeleteStandort() {
        try {
            let Observer;
            this.CurrentStandort.Deleted = true;
            return new Promise((resove, reject) => {
                // PUT fÃ¼r update
                Observer = this.http.put(this.ServerUrl, this.CurrentStandort);
                Observer.subscribe({
                    next: (ne) => {
                        debugger;
                    },
                    complete: () => {
                        debugger;
                        this.UpdateStandortliste(this.CurrentStandort);
                        this.Pool.StandortelisteChanged.emit();
                        resove(true);
                    },
                    error: (error) => {
                        debugger;
                        reject(error);
                    }
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'DeleteStandort', this.Debug.Typen.Service);
        }
    }
    GetStandortfiller() {
        try {
            if (this.CurrentStandortfilter === null)
                return 'kein Standortfilter';
            else
                return this.CurrentStandortfilter.Kuerzel + ' / ' + this.CurrentStandortfilter.Ort;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Database Standorte', 'GetStandortfiller', this.Debug.Typen.Service);
        }
    }
};
DatabaseStandorteService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: database_pool_service_1.DatabasePoolService },
    { type: const_1.ConstProvider },
    { type: http_1.HttpClient }
];
DatabaseStandorteService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DatabaseStandorteService);
exports.DatabaseStandorteService = DatabaseStandorteService;


/***/ }),

/***/ 83817:
/*!*****************************************!*\
  !*** ./src/app/services/debug/debug.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const error_service_1 = __webpack_require__(/*! ../error/error.service */ 84055);
let DebugProvider = class DebugProvider {
    constructor(Basics, nav, Fehlerservice, Const) {
        this.Basics = Basics;
        this.nav = nav;
        this.Fehlerservice = Fehlerservice;
        this.Const = Const;
        this.Typen = {
            Page: 'Page',
            Component: 'Component',
            Provider: 'Provider',
            Directive: 'Directive',
            Service: 'Service'
        };
        try {
            this.Debugmessageliste = [];
        }
        catch (error) {
        }
    }
    AddDebugMessage(message) {
        this.Debugmessageliste.push(message);
    }
    ShowErrorMessage(error, script, funktion, typ) {
        try {
            console.log('---------------------------------------------------------------------------');
            console.log('File:     ' + script);
            console.log('Function: ' + funktion);
            console.log('Typ:      ' + typ);
            console.log('Error:');
            console.log(error.message);
            console.log('---------------------------------------------------------------------------');
            debugger;
            if (this.Basics.ShowFehlerbericht) {
                this.Fehlerservice.Fehlermeldung.push({
                    Callingfunction: "",
                    Callingscript: "",
                    Commonscript: "",
                    Errorcode: 0,
                    Errormessage: "",
                    Sql: [],
                    Stack: "",
                    Script: script,
                    Error: error,
                    Funktion: funktion,
                    Scripttype: typ,
                    Type: this.Const.Fehlermeldungtypen.Script
                });
                /*
        
                this.NavParameter.Fehlermeldung.Script = ;
                this.NavParameter.Fehlermeldung.Error = error;
                this.NavParameter.Fehlermeldung.Funktion = funktion;
                this.NavParameter.Fehlermeldung.Scripttype = typ;
                this.NavParameter.Fehlermeldung.Type = this.Constclass.Fehlermeldungtypen.Script;
        
                 */
                this.PushPage(this.Const.Pages.ErrorPage);
            }
        }
        catch (error2) {
            debugger;
        }
    }
    ShowMessage(message, script, funktion, typ) {
        try {
            let data = {
                message: message,
                code: '',
                stack: ''
            };
            console.log('---------------------------------------------------------------------------');
            console.log('File:     ' + script);
            console.log('Function: ' + funktion);
            console.log('Typ:      ' + typ);
            console.log('Message:');
            console.log(message);
            console.log('---------------------------------------------------------------------------');
            if (this.Basics.ShowFehlerbericht) {
                /*
                this.NavParameter.Fehlermeldung.Script = script;
                this.NavParameter.Fehlermeldung.Error = data;
                this.NavParameter.Fehlermeldung.Funktion = funktion;
                this.NavParameter.Fehlermeldung.Scripttype = typ;
                this.NavParameter.Fehlermeldung.Type = this.Constclass.Fehlermeldungtypen.Script;
        
                 */
                this.Fehlerservice.Fehlermeldung.push({
                    Callingfunction: "",
                    Callingscript: "",
                    Commonscript: "",
                    Errorcode: 0,
                    Errormessage: "",
                    Sql: [],
                    Stack: "",
                    Script: script,
                    Error: data,
                    Funktion: funktion,
                    Scripttype: typ,
                    Type: this.Const.Fehlermeldungtypen.Script
                });
                this.PushPage(this.Const.Pages.ErrorPage);
            }
        }
        catch (error) {
            debugger;
        }
    }
    ShowFirebaseErrorMessage(error, script, funktion, typ) {
        try {
            if (this.Basics.ShowFehlerbericht) {
                /*
                this.NavParameter.Fehlermeldung.Script = script;
                this.NavParameter.Fehlermeldung.Error = error;
                this.NavParameter.Fehlermeldung.Funktion = funktion;
                this.NavParameter.Fehlermeldung.Scripttype = typ;
                this.NavParameter.Fehlermeldung.Type = this.Constclass.Fehlermeldungtypen.Firebase;
        
                 */
                this.Fehlerservice.Fehlermeldung.push({
                    Callingfunction: "",
                    Callingscript: "",
                    Commonscript: "",
                    Errorcode: 0,
                    Errormessage: "",
                    Sql: [],
                    Stack: "",
                    Script: script,
                    Error: error,
                    Funktion: funktion,
                    Scripttype: typ,
                    Type: this.Const.Fehlermeldungtypen.Script
                });
                this.PushPage(this.Const.Pages.ErrorPage);
            }
        }
        catch (error2) {
            debugger;
        }
    }
    ShowSqlErrorMessage(sql, errormessage, errorcode, commonscript, callingscript, callingfunction) {
        try {
            if (this.Basics.ShowFehlerbericht) {
                /*
                this.NavParameter.Fehlermeldung.Sql = sql;
                this.NavParameter.Fehlermeldung.Errormessage = errormessage;
                this.NavParameter.Fehlermeldung.Errorcode = errorcode;
                this.NavParameter.Fehlermeldung.Commonscript = commonscript;
                this.NavParameter.Fehlermeldung.Callingscript = callingscript;
                this.NavParameter.Fehlermeldung.Callingfunction = callingfunction;
                this.NavParameter.Fehlermeldung.Stack = '';
                this.NavParameter.Fehlermeldung.Type = this.Constclass.Fehlermeldungtypen.Sql;
        
                 */
                this.Fehlerservice.Fehlermeldung.push({
                    Callingfunction: callingfunction,
                    Callingscript: callingscript,
                    Commonscript: commonscript,
                    Errorcode: errorcode,
                    Errormessage: errormessage,
                    Sql: sql,
                    Stack: '',
                    Script: '',
                    Error: '',
                    Funktion: '',
                    Scripttype: '',
                    Type: this.Const.Fehlermeldungtypen.Sql
                });
                this.PushPage(this.Const.Pages.ErrorPage);
            }
        }
        catch (error) {
            debugger;
        }
    }
    ShowTransactionErrorMessage(sql, errormessage, errorcode, stack, commonscript, callingscript, callingfunction) {
        try {
            if (this.Basics.ShowFehlerbericht) {
                /*
                this.NavParameter.Fehlermeldung.Sql = sql;
                this.NavParameter.Fehlermeldung.Errormessage = errormessage;
                this.NavParameter.Fehlermeldung.Errorcode = errorcode;
                this.NavParameter.Fehlermeldung.Commonscript = commonscript;
                this.NavParameter.Fehlermeldung.Callingscript = callingscript;
                this.NavParameter.Fehlermeldung.Callingfunction = callingfunction;
                this.NavParameter.Fehlermeldung.Stack = stack;
                this.NavParameter.Fehlermeldung.Type = this.Constclass.Fehlermeldungtypen.Transaction;
        
                 */
                this.Fehlerservice.Fehlermeldung.push({
                    Callingfunction: callingfunction,
                    Callingscript: callingscript,
                    Commonscript: commonscript,
                    Errorcode: errorcode,
                    Errormessage: errormessage,
                    Sql: sql,
                    Stack: stack,
                    Script: '',
                    Error: '',
                    Funktion: '',
                    Scripttype: '',
                    Type: this.Const.Fehlermeldungtypen.Sql
                });
                this.PushPage(this.Const.Pages.ErrorPage);
            }
        }
        catch (error) {
            debugger;
        }
    }
    PushPage(page) {
        try {
            return new Promise(resolve => {
                this.nav.navigateForward(page, { animated: false, }).then(() => {
                    // this.NavParameter.AddPage(page);
                    resolve(true);
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        catch (error) {
            debugger;
        }
    }
};
DebugProvider.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: angular_1.NavController },
    { type: error_service_1.ErrorService },
    { type: const_1.ConstProvider }
];
DebugProvider = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DebugProvider);
exports.DebugProvider = DebugProvider;


/***/ }),

/***/ 38215:
/*!****************************************************!*\
  !*** ./src/app/services/diplay/display.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisplayService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const lodash_es_1 = __webpack_require__(/*! lodash-es */ 92792);
let DisplayService = class DisplayService {
    constructor(Debug) {
        this.Debug = Debug;
        this.Dialognamen = {
            Auswahldialog: 'Auswahldialog',
            Mitarbeiterauswahl: 'Mitarbeiterauswahl',
            Projekteditor: 'Projekteditor',
            Beteiligteneditor: 'Beteiligteneditor',
            Mitarbeitereditor: 'Mitarbeitereditor',
            Standorteditor: 'Standorteditor',
            Favoriteneditor: 'Favoriteneditor',
            Favoritenauswahl: 'Favoritenauswahl',
            Projekteauswahl: 'Projekteauswahl',
            Bauteileditor: 'Bauteileditor',
            Geschosseditor: 'Geschosseditor',
            Raumeditor: 'Raumeditor',
            Projektpunteditor: 'Projektpunteditor',
            Beteiligteauswahl: 'Beteiligteauswahl',
            Protokolleditor: 'Protokolleditor',
            Kostengruppenauswahl: 'Kostengruppenauswahl',
            Raumauswahl: 'Raumauswahl',
            Protokolllistefilter: 'Protokolllistefilter',
            Aufgabenlistefilter: 'Aufgabenlistefilter',
            Meinewocheeditor: 'Meinewocheeditor',
            ProjektpunktStatusDatePicker: 'ProjektpunktStatusDatePicker',
            ProjektpunktDateKwPicker: 'ProjektpunktDateKwPicker',
        };
        try {
            this.Dialogliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Display', 'constructor', this.Debug.Typen.Service);
        }
    }
    ResetDialogliste() {
        try {
            this.Dialogliste = [];
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Display', 'ResetDialogliste', this.Debug.Typen.Service);
        }
    }
    AddDialog(name, zindex) {
        try {
            let Dialog = lodash.find(this.Dialogliste, { Dialogname: name });
            if (lodash.isUndefined(Dialog)) {
                this.Dialogliste.push({
                    Dialogname: name,
                    ZIndex: zindex
                });
            }
            else {
                this.Debug.ShowErrorMessage(new Error('Add Dialog Fehler: ' + name), 'Dialog', 'AddDialog', this.Debug.Typen.Service);
            }
            (0, lodash_es_1.forEach)(this.Dialogliste, (Eintrag) => {
                console.log(Eintrag);
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Dialog', 'AddDialog', this.Debug.Typen.Service);
        }
    }
    RemoveDialog(name) {
        try {
            this.Dialogliste = lodash.filter(this.Dialogliste, (dialog) => {
                return dialog.Dialogname !== name;
            });
            if (this.Dialogliste.length === 0) {
                console.log('Dialogliste ist leer.');
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Dialog', 'RemoveDialog', this.Debug.Typen.Service);
        }
    }
    ShowOpacity(name) {
        try {
            let Maximum = 0;
            let Wert = 0;
            let Dialogname;
            (0, lodash_es_1.forEach)(this.Dialogliste, (Eintrag) => {
                if (Eintrag.ZIndex > Maximum)
                    Maximum = Eintrag.ZIndex;
                if (Eintrag.Dialogname === name) {
                    Wert = Eintrag.ZIndex;
                    Dialogname = Eintrag.Dialogname;
                }
            });
            if (Wert >= Maximum) {
                console.log(Dialogname + ' ganz oben. Z-Index: ' + Wert);
                return true;
            }
            else
                return false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Dialog', 'ShowOpacity', this.Debug.Typen.Service);
        }
    }
};
DisplayService.ctorParameters = () => [
    { type: debug_1.DebugProvider }
];
DisplayService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], DisplayService);
exports.DisplayService = DisplayService;


/***/ }),

/***/ 84055:
/*!*************************************************!*\
  !*** ./src/app/services/error/error.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
let ErrorService = class ErrorService {
    constructor(Const) {
        this.Const = Const;
        try {
            this.Fehlermeldung = [];
            this.CanGoBack = true;
        }
        catch (error) {
        }
    }
};
ErrorService.ctorParameters = () => [
    { type: const_1.ConstProvider }
];
ErrorService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], ErrorService);
exports.ErrorService = ErrorService;


/***/ }),

/***/ 9736:
/*!*****************************************************************!*\
  !*** ./src/app/services/kostengruppen/kostengruppen.service.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KostengruppenService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
let KostengruppenService = class KostengruppenService {
    constructor(Debug) {
        this.Debug = Debug;
        this.Kostengruppentypen = {
            Obergruppe: 'Obergruppe',
            Hauptgruppe: 'Hauptgruppe',
            Untergruppe: 'Untergruppe'
        };
        this.Kostengruppen = [
            {
                Typ: "Obergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 100,
                Hauptgruppennummer: null,
                Bezeichnung: "GrundstÃ¼ck"
            },
            {
                Typ: "Hauptgruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 110,
                Hauptgruppennummer: null,
                Bezeichnung: "GrundstÃ¼ckswert"
            },
            {
                Typ: "Hauptgruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 120,
                Hauptgruppennummer: null,
                Bezeichnung: "GrundstÃ¼cksnebenkosten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 121,
                Hauptgruppennummer: 120,
                Bezeichnung: "VermessungsgebÃ¼hren"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 122,
                Hauptgruppennummer: 120,
                Bezeichnung: "GerichtsgebÃ¼hren"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 123,
                Hauptgruppennummer: 120,
                Bezeichnung: "NotargebÃ¼hren"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 124,
                Hauptgruppennummer: 120,
                Bezeichnung: "Grunderwerbsteuer"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 125,
                Hauptgruppennummer: 120,
                Bezeichnung: "Untersuchungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 126,
                Hauptgruppennummer: 120,
                Bezeichnung: "Wertermittlungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 127,
                Hauptgruppennummer: 120,
                Bezeichnung: "GenehmigungsgebÃ¼hren"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 128,
                Hauptgruppennummer: 120,
                Bezeichnung: "Bodenordnung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 129,
                Hauptgruppennummer: 120,
                Bezeichnung: "Sonstiges zur KG 120"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 130,
                Hauptgruppennummer: null,
                Bezeichnung: "Rechte Dritter"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 131,
                Hauptgruppennummer: 130,
                Bezeichnung: "Abfindungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 132,
                Hauptgruppennummer: 130,
                Bezeichnung: "AblÃ¶sen dringlicher Rechte"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 100,
                Kostengruppennummer: 139,
                Hauptgruppennummer: 130,
                Bezeichnung: "Sonstiges zur KG 130"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 200,
                Hauptgruppennummer: null,
                Bezeichnung: "Vorbereitende MaÃnahmen (Herrichten + ErschlieÃen)"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 210,
                Hauptgruppennummer: null,
                Bezeichnung: "Herrichten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 211,
                Hauptgruppennummer: 210,
                Bezeichnung: "SicherungsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 212,
                Hauptgruppennummer: 210,
                Bezeichnung: "AbbruchmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 213,
                Hauptgruppennummer: 210,
                Bezeichnung: "Altlastenbeseitigung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 214,
                Hauptgruppennummer: 210,
                Bezeichnung: "Herrichten der GelÃ¤ndeoberflÃ¤che"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 215,
                Hauptgruppennummer: 210,
                Bezeichnung: "KampfmittelrÃ¤umung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 216,
                Hauptgruppennummer: 210,
                Bezeichnung: "Kulturhistorische Funde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 219,
                Hauptgruppennummer: 210,
                Bezeichnung: "Sonstiges zu KG 210"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 220,
                Hauptgruppennummer: null,
                Bezeichnung: "Ãffentliche ErschlieÃung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 221,
                Hauptgruppennummer: 220,
                Bezeichnung: "Abwasserentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 222,
                Hauptgruppennummer: 220,
                Bezeichnung: "Wasserversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 223,
                Hauptgruppennummer: 220,
                Bezeichnung: "Gasversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 224,
                Hauptgruppennummer: 220,
                Bezeichnung: "FernwÃ¤rmeversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 225,
                Hauptgruppennummer: 220,
                Bezeichnung: "Stromversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 226,
                Hauptgruppennummer: 220,
                Bezeichnung: "Telekommunikation"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 227,
                Hauptgruppennummer: 220,
                Bezeichnung: "VerkehrserschlieÃung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 228,
                Hauptgruppennummer: 220,
                Bezeichnung: "Abfallentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 229,
                Hauptgruppennummer: 220,
                Bezeichnung: "Sonstiges zu KG 220"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 230,
                Hauptgruppennummer: null,
                Bezeichnung: "NichtÃ¶ffentliche ErschlieÃung"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 240,
                Hauptgruppennummer: null,
                Bezeichnung: "Ausgleichsabgaben"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 241,
                Hauptgruppennummer: 240,
                Bezeichnung: "AusgleichsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 241,
                Hauptgruppennummer: 240,
                Bezeichnung: "Ausgmeichsabgaben"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 249,
                Hauptgruppennummer: 240,
                Bezeichnung: "Sonstiges zur KG 240"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 250,
                Hauptgruppennummer: null,
                Bezeichnung: "ÃbergangsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 251,
                Hauptgruppennummer: 250,
                Bezeichnung: "Provisorien"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 252,
                Hauptgruppennummer: 250,
                Bezeichnung: "Auslagerungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 200,
                Kostengruppennummer: 259,
                Hauptgruppennummer: 250,
                Bezeichnung: "Sonstiges zur KG 240"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 300,
                Hauptgruppennummer: null,
                Bezeichnung: "Bauwerk â Baukonstruktionen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 310,
                Hauptgruppennummer: null,
                Bezeichnung: "Baugrube"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 311,
                Hauptgruppennummer: 310,
                Bezeichnung: "Baugrubenherstellung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 312,
                Hauptgruppennummer: 310,
                Bezeichnung: "BaugrubenumschlieÃung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 313,
                Hauptgruppennummer: 310,
                Bezeichnung: "Wasserhaltung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 314,
                Hauptgruppennummer: 310,
                Bezeichnung: "Vortrieb"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 319,
                Hauptgruppennummer: 310,
                Bezeichnung: "Sonstiges zu KG 310"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 320,
                Hauptgruppennummer: null,
                Bezeichnung: "GrÃ¼ndung, Unterbau"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 321,
                Hauptgruppennummer: 320,
                Bezeichnung: "Baugrundverbesserung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 322,
                Hauptgruppennummer: 320,
                Bezeichnung: "FlachgrÃ¼ndungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 323,
                Hauptgruppennummer: null,
                Bezeichnung: "TiefgrÃ¼ndungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 324,
                Hauptgruppennummer: 320,
                Bezeichnung: "GrÃ¼ndungsbelÃ¤ge"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 325,
                Hauptgruppennummer: 320,
                Bezeichnung: "Abdichtungen und Bekleidungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 326,
                Hauptgruppennummer: 320,
                Bezeichnung: "DrÃ¤nagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 329,
                Hauptgruppennummer: 320,
                Bezeichnung: "Sonstiges zu KG 320"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 330,
                Hauptgruppennummer: null,
                Bezeichnung: "AuÃenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 331,
                Hauptgruppennummer: 330,
                Bezeichnung: "Tragende AuÃenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 332,
                Hauptgruppennummer: 330,
                Bezeichnung: "Nichttragende AuÃenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 333,
                Hauptgruppennummer: 330,
                Bezeichnung: "AuÃenstÃ¼tzen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 334,
                Hauptgruppennummer: 330,
                Bezeichnung: "AuÃentÃ¼ren und âfenster"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 335,
                Hauptgruppennummer: 330,
                Bezeichnung: "AuÃenwandbekleidungen, auÃen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 336,
                Hauptgruppennummer: 330,
                Bezeichnung: "AuÃenwandbekleidungen, innen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 337,
                Hauptgruppennummer: 330,
                Bezeichnung: "Elementierte AuÃenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 338,
                Hauptgruppennummer: 330,
                Bezeichnung: "Lichtschutz"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 339,
                Hauptgruppennummer: 330,
                Bezeichnung: "Sonstiges zu KG 330"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 340,
                Hauptgruppennummer: null,
                Bezeichnung: "InnenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 341,
                Hauptgruppennummer: 340,
                Bezeichnung: "Nichttragende InnenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 342,
                Hauptgruppennummer: 340,
                Bezeichnung: "Tragende InnenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 343,
                Hauptgruppennummer: 340,
                Bezeichnung: "InnenstÃ¼tzen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 344,
                Hauptgruppennummer: 340,
                Bezeichnung: "InnentÃ¼ren und âfenster"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 345,
                Hauptgruppennummer: 340,
                Bezeichnung: "Innenwandbekleidungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 346,
                Hauptgruppennummer: 340,
                Bezeichnung: "Elementierte InnenwÃ¤nde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 347,
                Hauptgruppennummer: 340,
                Bezeichnung: "Lichtschutz"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 349,
                Hauptgruppennummer: 340,
                Bezeichnung: "Sonstiges zu KG 340"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 350,
                Hauptgruppennummer: null,
                Bezeichnung: "Decken"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 351,
                Hauptgruppennummer: 350,
                Bezeichnung: "Deckenkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 352,
                Hauptgruppennummer: 350,
                Bezeichnung: "DeckenÃ¶ffnungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 353,
                Hauptgruppennummer: 350,
                Bezeichnung: "DeckenbelÃ¤ge"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 354,
                Hauptgruppennummer: 350,
                Bezeichnung: "Deckenbekleidungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 355,
                Hauptgruppennummer: 350,
                Bezeichnung: "Elementierte Deckenkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 359,
                Hauptgruppennummer: 350,
                Bezeichnung: "Sonstiges zu KG 350"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 360,
                Hauptgruppennummer: null,
                Bezeichnung: "DÃ¤cher"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 361,
                Hauptgruppennummer: 360,
                Bezeichnung: "Dachkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 362,
                Hauptgruppennummer: 360,
                Bezeichnung: "Dachfenster, DachÃ¶ffnungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 363,
                Hauptgruppennummer: 360,
                Bezeichnung: "DachbelÃ¤ge"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 364,
                Hauptgruppennummer: 360,
                Bezeichnung: "Dachbekleidungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 365,
                Hauptgruppennummer: 360,
                Bezeichnung: "Elementierte Dachkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 366,
                Hauptgruppennummer: 360,
                Bezeichnung: "Lichtschutz"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 369,
                Hauptgruppennummer: 360,
                Bezeichnung: "Sonstiges zu KG 360"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 370,
                Hauptgruppennummer: null,
                Bezeichnung: "Infrastrukturanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 371,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen fÃ¼r den StraÃenverkehr"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 372,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen fÃ¼r den Schienenverkehr"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 373,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen fÃ¼r den Flugverkehr"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 374,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen des Wasserbaus"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 375,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen der Abwasserentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 376,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen der Wasserversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 377,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen der Energie- und Informationsversorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 378,
                Hauptgruppennummer: 370,
                Bezeichnung: "Anlagen der Abfallentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 379,
                Hauptgruppennummer: 370,
                Bezeichnung: "Sonstiges zu KG 370"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 380,
                Hauptgruppennummer: null,
                Bezeichnung: "Baukonstruktive Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 381,
                Hauptgruppennummer: 380,
                Bezeichnung: "Allgemeine Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 383,
                Hauptgruppennummer: 380,
                Bezeichnung: "Landschaftsgestalterische Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 384,
                Hauptgruppennummer: 380,
                Bezeichnung: "Mechanische Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 385,
                Hauptgruppennummer: 380,
                Bezeichnung: "Einbauten in Konstruktionen des Ingenieurbaus"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 386,
                Hauptgruppennummer: 380,
                Bezeichnung: "Orientierungs- und Informationssysteme"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 387,
                Hauptgruppennummer: 380,
                Bezeichnung: "Schutzeinbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 388,
                Hauptgruppennummer: 380,
                Bezeichnung: "Sonstiges zur KG 380"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 390,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige MaÃnahmen fÃ¼r Baukonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 391,
                Hauptgruppennummer: 390,
                Bezeichnung: "Baustelleneinrichtung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 392,
                Hauptgruppennummer: 390,
                Bezeichnung: "GerÃ¼ste"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 393,
                Hauptgruppennummer: 390,
                Bezeichnung: "SicherungsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 394,
                Hauptgruppennummer: 390,
                Bezeichnung: "AbbruchmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 395,
                Hauptgruppennummer: 390,
                Bezeichnung: "Instandsetzungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 396,
                Hauptgruppennummer: 390,
                Bezeichnung: "Materialentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 397,
                Hauptgruppennummer: 390,
                Bezeichnung: "ZusÃ¤tzliche MaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 398,
                Hauptgruppennummer: 390,
                Bezeichnung: "Provisorische Baukonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 300,
                Kostengruppennummer: 399,
                Hauptgruppennummer: 390,
                Bezeichnung: "Sonstiges zu KG 390"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 400,
                Hauptgruppennummer: null,
                Bezeichnung: "Bauwerk â Technische Anlagen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 410,
                Hauptgruppennummer: null,
                Bezeichnung: "Abwasser-, Wasser-, Gasanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 411,
                Hauptgruppennummer: 410,
                Bezeichnung: "Abwasseranlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 412,
                Hauptgruppennummer: 410,
                Bezeichnung: "Wasseranlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 413,
                Hauptgruppennummer: 410,
                Bezeichnung: "Gasanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 419,
                Hauptgruppennummer: 410,
                Bezeichnung: "Sonstiges zu KG 410"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 420,
                Hauptgruppennummer: null,
                Bezeichnung: "WÃ¤rmeversorgungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 421,
                Hauptgruppennummer: 420,
                Bezeichnung: "WÃ¤rmeerzeugungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 422,
                Hauptgruppennummer: 420,
                Bezeichnung: "WÃ¤rmeverteilnetze"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 423,
                Hauptgruppennummer: 420,
                Bezeichnung: "RaumheizflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 424,
                Hauptgruppennummer: 420,
                Bezeichnung: "VerkehrsheizflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 429,
                Hauptgruppennummer: 420,
                Bezeichnung: "Sonstiges zu KG 420"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 430,
                Hauptgruppennummer: null,
                Bezeichnung: "Raumlufttechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 431,
                Hauptgruppennummer: 430,
                Bezeichnung: "LÃ¼ftungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 432,
                Hauptgruppennummer: 430,
                Bezeichnung: "Teilklimaanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 433,
                Hauptgruppennummer: 430,
                Bezeichnung: "Klimaanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 434,
                Hauptgruppennummer: 430,
                Bezeichnung: "KÃ¤lteanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 439,
                Hauptgruppennummer: 430,
                Bezeichnung: "Sonstiges zu KG 430"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 440,
                Hauptgruppennummer: null,
                Bezeichnung: "Elektrische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 441,
                Hauptgruppennummer: 440,
                Bezeichnung: "Hoch- und Mittelspannungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 442,
                Hauptgruppennummer: 440,
                Bezeichnung: "Eigenstromversorgungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 443,
                Hauptgruppennummer: 440,
                Bezeichnung: "Niederspannungsschaltanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 444,
                Hauptgruppennummer: 440,
                Bezeichnung: "Niederspannungsinstallationsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 445,
                Hauptgruppennummer: 440,
                Bezeichnung: "Beleuchtungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 446,
                Hauptgruppennummer: 440,
                Bezeichnung: "Blitzschutz- und Erdungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 447,
                Hauptgruppennummer: 440,
                Bezeichnung: "Fahrleitungssysteme"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 449,
                Hauptgruppennummer: 440,
                Bezeichnung: "Sonstiges zu KG 440"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 450,
                Hauptgruppennummer: null,
                Bezeichnung: "Kommunikations-, sicherheits- und informationstechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 451,
                Hauptgruppennummer: 450,
                Bezeichnung: "Telekommunikationsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 452,
                Hauptgruppennummer: 450,
                Bezeichnung: "Such- und Signalanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 453,
                Hauptgruppennummer: 450,
                Bezeichnung: "Zeitdienstanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 454,
                Hauptgruppennummer: 450,
                Bezeichnung: "Elektroakustische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 455,
                Hauptgruppennummer: 450,
                Bezeichnung: "Fernseh- und Antennenanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 456,
                Hauptgruppennummer: 450,
                Bezeichnung: "Gefahrenmelde- und Alarmanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 457,
                Hauptgruppennummer: 450,
                Bezeichnung: "Ãbertragungsnetze"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 458,
                Hauptgruppennummer: 450,
                Bezeichnung: "Verkehrsbeeinflussungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 459,
                Hauptgruppennummer: 450,
                Bezeichnung: "Sonstiges zu KG 450"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 460,
                Hauptgruppennummer: null,
                Bezeichnung: "FÃ¶rderanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 461,
                Hauptgruppennummer: 460,
                Bezeichnung: "Aufzugsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 462,
                Hauptgruppennummer: 460,
                Bezeichnung: "Fahrtreppen, Fahrsteige"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 463,
                Hauptgruppennummer: 460,
                Bezeichnung: "Befahranlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 464,
                Hauptgruppennummer: 460,
                Bezeichnung: "Transportanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 465,
                Hauptgruppennummer: 460,
                Bezeichnung: "Krananlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 467,
                Hauptgruppennummer: 460,
                Bezeichnung: "Hydraulikanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 469,
                Hauptgruppennummer: 460,
                Bezeichnung: "Sonstiges zu KG 460"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 470,
                Hauptgruppennummer: null,
                Bezeichnung: "Nutzungsspezifische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 471,
                Hauptgruppennummer: 470,
                Bezeichnung: "KÃ¼chentechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 472,
                Hauptgruppennummer: 470,
                Bezeichnung: "WÃ¤scherei-, Reinigungs- und badetechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 473,
                Hauptgruppennummer: 470,
                Bezeichnung: "Medienversorgungsanlagen, Medizin- und labortechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 474,
                Hauptgruppennummer: 470,
                Bezeichnung: "FeuerlÃ¶schanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 475,
                Hauptgruppennummer: 470,
                Bezeichnung: "ProzesswÃ¤rme-, kÃ¤lte- und -luftanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 476,
                Hauptgruppennummer: 470,
                Bezeichnung: "Weitere nutzungsspezifische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 477,
                Hauptgruppennummer: 470,
                Bezeichnung: "Verfahrenstechnische Anlagen, Wasser, Abwasser und Gase"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 478,
                Hauptgruppennummer: 470,
                Bezeichnung: "Verfahrenstechnische Anlagen, Feststoffe, Wertstoffe und AbfÃ¤lle"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 479,
                Hauptgruppennummer: 470,
                Bezeichnung: "Sonstiges zu KG 470"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 480,
                Hauptgruppennummer: null,
                Bezeichnung: "GebÃ¤udeautomation"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 481,
                Hauptgruppennummer: 480,
                Bezeichnung: "Automationseinrichtungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 482,
                Hauptgruppennummer: 480,
                Bezeichnung: "SchaltschrÃ¤nke, Automationsschwerpunkte"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 483,
                Hauptgruppennummer: 480,
                Bezeichnung: "Automationsmanagement"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 484,
                Hauptgruppennummer: 480,
                Bezeichnung: "Kabel, Leitungen und Verlegesysteme"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 485,
                Hauptgruppennummer: 480,
                Bezeichnung: "DatenÃ¼bertragungsnetze"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 489,
                Hauptgruppennummer: 480,
                Bezeichnung: "Sonstiges zu KG 480"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 490,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige MaÃnahmen fÃ¼r technische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 491,
                Hauptgruppennummer: 490,
                Bezeichnung: "Baustelleneinrichtung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 492,
                Hauptgruppennummer: 490,
                Bezeichnung: "GerÃ¼ste"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 493,
                Hauptgruppennummer: 490,
                Bezeichnung: "SicherungsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 494,
                Hauptgruppennummer: 490,
                Bezeichnung: "AbbruchmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 495,
                Hauptgruppennummer: 490,
                Bezeichnung: "Instandsetzungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 496,
                Hauptgruppennummer: 490,
                Bezeichnung: "Materialentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 497,
                Hauptgruppennummer: 490,
                Bezeichnung: "ZusÃ¤tzliche MaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 498,
                Hauptgruppennummer: 490,
                Bezeichnung: "Provisorische technische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 400,
                Kostengruppennummer: 499,
                Hauptgruppennummer: 490,
                Bezeichnung: "Sonstiges zu KG 490"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 500,
                Hauptgruppennummer: null,
                Bezeichnung: "AuÃenanlagen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 510,
                Hauptgruppennummer: null,
                Bezeichnung: "Erdbau"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 511,
                Hauptgruppennummer: 510,
                Bezeichnung: "Herstellung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 512,
                Hauptgruppennummer: 510,
                Bezeichnung: "UmschlieÃung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 513,
                Hauptgruppennummer: 510,
                Bezeichnung: "Wasserhaltung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 514,
                Hauptgruppennummer: 510,
                Bezeichnung: "Vortrieb"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 519,
                Hauptgruppennummer: 510,
                Bezeichnung: "Sonstiges zu KG 510"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 520,
                Hauptgruppennummer: null,
                Bezeichnung: "GrÃ¼ndung, Unterbau"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 521,
                Hauptgruppennummer: 520,
                Bezeichnung: "Baugrundverbesserung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 522,
                Hauptgruppennummer: 520,
                Bezeichnung: "GrÃ¼ndungen und Bodenplatten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 523,
                Hauptgruppennummer: 520,
                Bezeichnung: "GrÃ¼ndungsbelÃ¤ge"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 524,
                Hauptgruppennummer: 520,
                Bezeichnung: "Abdichtungen und Bekleidungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 525,
                Hauptgruppennummer: 520,
                Bezeichnung: "DrÃ¤nagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 529,
                Hauptgruppennummer: 520,
                Bezeichnung: "Sonstiges zu KG 520"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 530,
                Hauptgruppennummer: null,
                Bezeichnung: "Oberbau, Deckschichten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 531,
                Hauptgruppennummer: 530,
                Bezeichnung: "Wege"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 532,
                Hauptgruppennummer: 530,
                Bezeichnung: "StraÃen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 533,
                Hauptgruppennummer: 530,
                Bezeichnung: "PlÃ¤tze, HÃ¶fe, Terrassen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 534,
                Hauptgruppennummer: 530,
                Bezeichnung: "StellplÃ¤tze"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 535,
                Hauptgruppennummer: 530,
                Bezeichnung: "SportplatzflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 536,
                Hauptgruppennummer: 530,
                Bezeichnung: "SpielplatzflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 537,
                Hauptgruppennummer: 530,
                Bezeichnung: "Gleisanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 538,
                Hauptgruppennummer: 530,
                Bezeichnung: "FlugplatzflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 539,
                Hauptgruppennummer: 530,
                Bezeichnung: "Sonstiges zu KG 530"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 540,
                Hauptgruppennummer: null,
                Bezeichnung: "Baukonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 541,
                Hauptgruppennummer: 540,
                Bezeichnung: "Einfriedungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 542,
                Hauptgruppennummer: 540,
                Bezeichnung: "Schutzkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 543,
                Hauptgruppennummer: 540,
                Bezeichnung: "Wandkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 544,
                Hauptgruppennummer: 540,
                Bezeichnung: "Rampen, Treppen, TribÃ¼nen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 545,
                Hauptgruppennummer: 540,
                Bezeichnung: "Ãberdachungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 546,
                Hauptgruppennummer: 540,
                Bezeichnung: "Stege"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 547,
                Hauptgruppennummer: 540,
                Bezeichnung: "Kanal- und Schachtkonstruktionen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 548,
                Hauptgruppennummer: 540,
                Bezeichnung: "Wasserbecken"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 549,
                Hauptgruppennummer: 540,
                Bezeichnung: "Sonstiges zu KG 540"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 550,
                Hauptgruppennummer: null,
                Bezeichnung: "Technische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 551,
                Hauptgruppennummer: 550,
                Bezeichnung: "Abwasseranlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 552,
                Hauptgruppennummer: 550,
                Bezeichnung: "Wasseranlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 553,
                Hauptgruppennummer: 550,
                Bezeichnung: "Anlagen fÃ¼r Gase und FlÃ¼ssigkeiten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 554,
                Hauptgruppennummer: 550,
                Bezeichnung: "WÃ¤rmeversorgungsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 555,
                Hauptgruppennummer: 550,
                Bezeichnung: "Raumlufttechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 556,
                Hauptgruppennummer: 550,
                Bezeichnung: "Elektrische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 557,
                Hauptgruppennummer: 550,
                Bezeichnung: "Kommunikations-, sicherheits- und informationstechnische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 558,
                Hauptgruppennummer: 550,
                Bezeichnung: "Nutzungsspezifische Anlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 559,
                Hauptgruppennummer: 550,
                Bezeichnung: "Sonstiges zu KG 550"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 560,
                Hauptgruppennummer: null,
                Bezeichnung: "Einbauten in AuÃenanlagen und FreiflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 561,
                Hauptgruppennummer: 560,
                Bezeichnung: "Allgemeine Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 562,
                Hauptgruppennummer: 560,
                Bezeichnung: "Besondere Einbauten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 563,
                Hauptgruppennummer: 560,
                Bezeichnung: "Orientierungs- und Informationssysteme"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 569,
                Hauptgruppennummer: 560,
                Bezeichnung: "Sonstiges zu KG 560"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 570,
                Hauptgruppennummer: null,
                Bezeichnung: "VegetationsflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 571,
                Hauptgruppennummer: 570,
                Bezeichnung: "Vegetationstechnische Bodenbearbeitung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 572,
                Hauptgruppennummer: 570,
                Bezeichnung: "Sicherungsbauweisen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 573,
                Hauptgruppennummer: 570,
                Bezeichnung: "PflanzflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 574,
                Hauptgruppennummer: 570,
                Bezeichnung: "Rasen- und SaatflÃ¤chen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 579,
                Hauptgruppennummer: 570,
                Bezeichnung: "Sonstiges zu KG 570"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 590,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige AuÃenanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 591,
                Hauptgruppennummer: 590,
                Bezeichnung: "Baustelleneinrichtung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 592,
                Hauptgruppennummer: 590,
                Bezeichnung: "GerÃ¼ste"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 593,
                Hauptgruppennummer: 590,
                Bezeichnung: "SicherungsmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 594,
                Hauptgruppennummer: 590,
                Bezeichnung: "AbbruchmaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 595,
                Hauptgruppennummer: 590,
                Bezeichnung: "Instandsetzungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 596,
                Hauptgruppennummer: 590,
                Bezeichnung: "Materialentsorgung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 597,
                Hauptgruppennummer: 590,
                Bezeichnung: "ZusÃ¤tzliche MaÃnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 598,
                Hauptgruppennummer: 590,
                Bezeichnung: "Provisorische AuÃenanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 500,
                Kostengruppennummer: 599,
                Hauptgruppennummer: 590,
                Bezeichnung: "Sonstiges zu KG 590"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 600,
                Hauptgruppennummer: null,
                Bezeichnung: "Ausstattung und Kunstwerke"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 610,
                Hauptgruppennummer: null,
                Bezeichnung: "Allgemeine Ausstattung"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 620,
                Hauptgruppennummer: null,
                Bezeichnung: "Besondere Ausstattung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 629,
                Hauptgruppennummer: 620,
                Bezeichnung: "Sonstiges zu KG 620"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 630,
                Hauptgruppennummer: null,
                Bezeichnung: "Informationstechnische Ausstattung"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 640,
                Hauptgruppennummer: null,
                Bezeichnung: "Kunstobjekte"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 641,
                Hauptgruppennummer: 640,
                Bezeichnung: "Kunstobjekte"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 642,
                Hauptgruppennummer: 640,
                Bezeichnung: "KÃ¼nstlerische Gestaltung des Bauwerks"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 643,
                Hauptgruppennummer: 640,
                Bezeichnung: "KÃ¼nstlerische Gestaltung der AuÃenanlagen und FreiflÃ¤chen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 600,
                Kostengruppennummer: 690,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige Ausstattung"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 700,
                Hauptgruppennummer: null,
                Bezeichnung: "Baunebenkosten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 710,
                Hauptgruppennummer: null,
                Bezeichnung: "Bauherrenaufgaben"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 711,
                Hauptgruppennummer: 710,
                Bezeichnung: "Projektleitung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 712,
                Hauptgruppennummer: 710,
                Bezeichnung: "Bedarfsplanung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 713,
                Hauptgruppennummer: 710,
                Bezeichnung: "Projektsteuerung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 714,
                Hauptgruppennummer: 710,
                Bezeichnung: "Sicherheits- und Gesundheitsschutzkoordination"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 715,
                Hauptgruppennummer: 710,
                Bezeichnung: "Vergabeverfahren"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 719,
                Hauptgruppennummer: 710,
                Bezeichnung: "Sonstiges zu KG 710"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 720,
                Hauptgruppennummer: null,
                Bezeichnung: "Vorbereitung der Objektplanung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 721,
                Hauptgruppennummer: 720,
                Bezeichnung: "Untersuchungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 722,
                Hauptgruppennummer: 720,
                Bezeichnung: "Wertermittlungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 723,
                Hauptgruppennummer: 720,
                Bezeichnung: "StÃ¤dtebauliche Leistungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 724,
                Hauptgruppennummer: 720,
                Bezeichnung: "Landschaftsplanerische Leistungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 725,
                Hauptgruppennummer: 720,
                Bezeichnung: "Wettbewerbe"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 729,
                Hauptgruppennummer: 720,
                Bezeichnung: "Sonstiges zu KG 720"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 730,
                Hauptgruppennummer: null,
                Bezeichnung: "Objektplanung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 731,
                Hauptgruppennummer: 730,
                Bezeichnung: "GebÃ¤ude und InnenrÃ¤ume"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 732,
                Hauptgruppennummer: 730,
                Bezeichnung: "Freianlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 733,
                Hauptgruppennummer: 730,
                Bezeichnung: "Ingenieurbauwerke"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 734,
                Hauptgruppennummer: 730,
                Bezeichnung: "Verkehrsanlagen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 735,
                Hauptgruppennummer: 730,
                Bezeichnung: "Tragwerksplanung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 736,
                Hauptgruppennummer: 730,
                Bezeichnung: "Technische AusrÃ¼stung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 739,
                Hauptgruppennummer: 730,
                Bezeichnung: "Sonstiges zu KG 730"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 740,
                Hauptgruppennummer: null,
                Bezeichnung: "Fachplanung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 743,
                Hauptgruppennummer: 740,
                Bezeichnung: "Bauphysik"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 744,
                Hauptgruppennummer: 740,
                Bezeichnung: "Geotechnik"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 745,
                Hauptgruppennummer: 740,
                Bezeichnung: "Ingenieurvermessungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 746,
                Hauptgruppennummer: 740,
                Bezeichnung: "Lichttechnik, Tageslichttechnik"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 747,
                Hauptgruppennummer: 740,
                Bezeichnung: "Brandschutz"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 748,
                Hauptgruppennummer: 740,
                Bezeichnung: "Altlasten, Kampfmittel, kulturhistorische Funde"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 749,
                Hauptgruppennummer: 740,
                Bezeichnung: "Sonstiges zu KG 740"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 750,
                Hauptgruppennummer: null,
                Bezeichnung: "KÃ¼nstlerische Leistungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 751,
                Hauptgruppennummer: 750,
                Bezeichnung: "Kunstwettbewerbe"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 752,
                Hauptgruppennummer: 750,
                Bezeichnung: "Honorare"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 759,
                Hauptgruppennummer: 750,
                Bezeichnung: "Sonstiges zu KG 750"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 760,
                Hauptgruppennummer: null,
                Bezeichnung: "Allgemeine Baunebenkosten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 761,
                Hauptgruppennummer: 760,
                Bezeichnung: "Gutachten und Beratung"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 762,
                Hauptgruppennummer: 760,
                Bezeichnung: "PrÃ¼fungen, Genehmigungen, Abnahmen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 763,
                Hauptgruppennummer: 760,
                Bezeichnung: "Bewirtschaftungskoten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 764,
                Hauptgruppennummer: 760,
                Bezeichnung: "Bemusterungskosten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 766,
                Hauptgruppennummer: 760,
                Bezeichnung: "Versicherungen"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 769,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstiges zu KG 760"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 790,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige Baunebenkosten"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 791,
                Hauptgruppennummer: 790,
                Bezeichnung: "Bestandsdokumentation"
            },
            { Typ: "Untergruppe",
                Obergruppennummer: 700,
                Kostengruppennummer: 799,
                Hauptgruppennummer: 790,
                Bezeichnung: "Sonstiges zur KG 790"
            },
            { Typ: "Obergruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 800,
                Hauptgruppennummer: null,
                Bezeichnung: "Finanzierung"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 810,
                Hauptgruppennummer: null,
                Bezeichnung: "Finanzierungsnebenkosten"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 820,
                Hauptgruppennummer: null,
                Bezeichnung: "Fremdkapitalzinsen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 830,
                Hauptgruppennummer: null,
                Bezeichnung: "Eigenkapitalzinsen"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 840,
                Hauptgruppennummer: null,
                Bezeichnung: "BÃ¼rgschaften"
            },
            { Typ: "Hauptgruppe",
                Obergruppennummer: 800,
                Kostengruppennummer: 890,
                Hauptgruppennummer: null,
                Bezeichnung: "Sonstige Finanzierungskosten"
            }
        ];
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen', 'constructor', this.Debug.Typen.Service);
        }
    }
    GetKostengruppe(projektpunkt) {
        try {
            let Kostengruppe;
            if (projektpunkt !== null) {
                if (projektpunkt.Unterkostengruppe !== null) {
                    Kostengruppe = lodash.find(this.Kostengruppen, (gruppe) => {
                        return gruppe.Typ === this.Kostengruppentypen.Untergruppe && gruppe.Kostengruppennummer === projektpunkt.Unterkostengruppe;
                    });
                    if (!lodash.isUndefined(!Kostengruppe))
                        return Kostengruppe;
                }
                else if (projektpunkt.Hauptkostengruppe !== null) {
                    Kostengruppe = lodash.find(this.Kostengruppen, (gruppe) => {
                        return gruppe.Typ === this.Kostengruppentypen.Hauptgruppe && gruppe.Kostengruppennummer === projektpunkt.Hauptkostengruppe;
                    });
                    if (!lodash.isUndefined(!Kostengruppe))
                        return Kostengruppe;
                }
                else if (projektpunkt.Oberkostengruppe !== null) {
                    Kostengruppe = lodash.find(this.Kostengruppen, (gruppe) => {
                        return gruppe.Typ === this.Kostengruppentypen.Obergruppe && gruppe.Kostengruppennummer === projektpunkt.Oberkostengruppe;
                    });
                    if (!lodash.isUndefined(!Kostengruppe))
                        return Kostengruppe;
                }
            }
            return null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen', 'GetKostengruppe', this.Debug.Typen.Service);
        }
    }
    GetKostengruppenname(projektpunkt) {
        try {
            let Kostengruppe = this.GetKostengruppe(projektpunkt);
            return Kostengruppe !== null ? Kostengruppe.Kostengruppennummer + ' ' + Kostengruppe.Bezeichnung : 'Unbekannt';
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Kostengruppen', 'GetKostengruppenname', this.Debug.Typen.Service);
        }
    }
};
KostengruppenService.ctorParameters = () => [
    { type: debug_1.DebugProvider }
];
KostengruppenService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], KostengruppenService);
exports.KostengruppenService = KostengruppenService;


/***/ }),

/***/ 73253:
/*!***************************************************************!*\
  !*** ./src/app/services/loadinganimation/loadinganimation.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoadingAnimationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
let LoadingAnimationService = class LoadingAnimationService {
    constructor(Debug, Loader, Basics) {
        this.Debug = Debug;
        this.Loader = Loader;
        this.Basics = Basics;
        try {
            this.AjaxTime = null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'constructor', this.Debug.Typen.Service);
        }
    }
    ShowLoadingAnimation(title, message) {
        try {
            let HTML = `
      <table cellpadding="10" cellspacing="10">
        <tr>
          <td class="loadingtitleclass">` + title + `</td>
        </tr>
        <tr>
          <td class="loadingmessageclass"><br>` + message + `</td>
        </tr>
      </table>`;
            let Options = {
                spinner: 'lines',
                message: HTML,
                cssClass: 'loadingclass',
                showBackdrop: true,
                enableBackdropDismiss: false,
                translucent: false,
                dismissOnPageChange: false,
            };
            return new Promise((resolve, reject) => {
                this.AjaxTime = new Date().getTime();
                this.Loader.create(Options).then((res) => {
                    res.present();
                    resolve(true);
                }).catch((error) => {
                    reject(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Loading Message Provider', 'ShowLoadingAnimation', this.Debug.Typen.Service);
        }
    }
    HideLoadingAnimation(wait) {
        try {
            let WaitTime = this.Basics.Waittime;
            let TotalTime;
            if (this.AjaxTime !== null)
                TotalTime = new Date().getTime() - this.AjaxTime;
            else {
                TotalTime = WaitTime + 1;
            }
            return new Promise((resolve) => {
                if (wait) {
                    if (WaitTime > TotalTime)
                        WaitTime = WaitTime - TotalTime;
                    else
                        WaitTime = 0;
                    setTimeout(() => {
                        this.Loader.dismiss().then(() => {
                            resolve(true);
                        }).catch((error) => {
                            resolve(true);
                        });
                    }, WaitTime);
                }
                else {
                    return this.Loader.dismiss().then(() => {
                        resolve(true);
                    }).catch((error) => {
                        resolve(true);
                    });
                }
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Loading Message Provider', 'HideLoadingAnimation', this.Debug.Typen.Service);
        }
    }
};
LoadingAnimationService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: angular_1.LoadingController },
    { type: basics_1.BasicsProvider }
];
LoadingAnimationService = tslib_1.__decorate([
    (0, core_1.Injectable)()
], LoadingAnimationService);
exports.LoadingAnimationService = LoadingAnimationService;


/***/ }),

/***/ 42117:
/*!*******************************************************!*\
  !*** ./src/app/services/localstorage/localstorage.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalstorageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
// import {Storage} from "@ionic/storage-angular";
const js_cookie_1 = tslib_1.__importDefault(__webpack_require__(/*! js-cookie */ 30008));
const Keys = {
    SecutityToken: 'SecurityToken',
};
let LocalstorageService = class LocalstorageService {
    // public MyStorage: Storage;
    constructor(Debug, Basics, 
    // private Storageservice: Storage,
    Const) {
        this.Debug = Debug;
        this.Basics = Basics;
        this.Const = Const;
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LocalstorageService', 'constructor', this.Debug.Typen.Service);
        }
    }
    GetSecurityToken() {
        try {
            return new Promise((resolve, reject) => {
                let Wert = js_cookie_1.default.get(Keys.SecutityToken);
                if (typeof Wert === 'undefined') {
                    resolve(this.Const.NONE);
                }
                else {
                    resolve(Wert);
                }
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LocalstorageService', 'GetSecurityToken', this.Debug.Typen.Service);
        }
    }
    SetSecurityToken(token) {
        try {
            return new Promise((resolve, reject) => {
                js_cookie_1.default.set(Keys.SecutityToken, token);
                resolve(true);
                /*
                .then(() => {
        
                  resolve(true);
        
                }).catch((error) => {
        
                  reject(error);
                });
        
                 */
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LocalstorageService', 'SetSecurityToken', this.Debug.Typen.Service);
        }
    }
    RemoveSecurityToken() {
        try {
            return new Promise((resolve, reject) => {
                js_cookie_1.default.remove(Keys.SecutityToken);
                resolve(true);
                /*
                this.MyStorage.remove(Keys.SecutityToken).then(() => {
        
                  resolve(true);
        
                }).catch((error) => {
        
                  reject(error);
                });
        
                 */
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'LocalstorageService', 'ClearSecurityToken', this.Debug.Typen.Service);
        }
    }
};
LocalstorageService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: basics_1.BasicsProvider },
    { type: const_1.ConstProvider }
];
LocalstorageService = tslib_1.__decorate([
    (0, core_1.Injectable)()
], LocalstorageService);
exports.LocalstorageService = LocalstorageService;


/***/ }),

/***/ 47314:
/*!*************************************************!*\
  !*** ./src/app/services/menue/menue.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenueService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const tools_1 = __webpack_require__(/*! ../tools/tools */ 9983);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const database_authentication_service_1 = __webpack_require__(/*! ../database-authentication/database-authentication.service */ 67334);
const database_projekte_service_1 = __webpack_require__(/*! ../database-projekte/database-projekte.service */ 31222);
let MenueService = class MenueService {
    constructor(Debug, Tools, DBProjekte, AuthService, Const) {
        this.Debug = Debug;
        this.Tools = Tools;
        this.DBProjekte = DBProjekte;
        this.AuthService = AuthService;
        this.Const = Const;
        this.MainMenuebereiche = {
            Home: 'Home',
            Debug: 'Debug',
            Logout: 'Logout',
            Einstellungen: 'Einstellungen',
            Projekte: 'Projekte',
        };
        this.ProjekteMenuebereiche = {
            LOPListe: 'LOP Liste',
            Protokolle: 'Protokolle',
            Festlegungen: 'Festlegungen',
        };
        this.FirmaMenuebereiche = {
            Standorte: 'Standorte',
            Mitarbeiter: 'Mitarbeiter',
            Projekte: 'Projekte',
            Favoriten: 'Favoriten',
            Play: 'Play'
        };
        try {
            this.MainMenuebereich = this.MainMenuebereiche.Projekte;
            this.FirmaMenuebereich = this.FirmaMenuebereiche.Projekte;
            this.ProjekteMenuebereich = this.ProjekteMenuebereiche.LOPListe;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Menue', 'constructor', this.Debug.Typen.Service);
        }
    }
    ShowLoginPage() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.LoginPage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Menue', 'SetLoginPage', this.Debug.Typen.Service);
        }
    }
    ShowRegistrierungPage() {
        try {
            this.Tools.SetRootPage(this.Const.Pages.RegistrierungPage);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Menue', 'ShowRegistrierungPage', this.Debug.Typen.Service);
        }
    }
    SetCurrentPage() {
        try {
            switch (this.MainMenuebereich) {
                case this.MainMenuebereiche.Home:
                    this.Tools.SetRootPage(this.Const.Pages.HomePage);
                    break;
                case this.MainMenuebereiche.Projekte:
                    switch (this.ProjekteMenuebereich) {
                        case this.ProjekteMenuebereiche.LOPListe:
                            switch (this.DBProjekte.CurrentFavoritprojektindex) {
                                case 1000: // = Favoriten
                                    this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                                    break;
                                case 2000: // = Mein Tag
                                    this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                                    break;
                                default:
                                    this.Tools.SetRootPage(this.Const.Pages.PjAufgabenlistePage);
                                    break;
                            }
                            break;
                        case this.ProjekteMenuebereiche.Protokolle:
                            this.Tools.SetRootPage(this.Const.Pages.PjProtokolleListePage);
                            break;
                        case this.ProjekteMenuebereiche.Festlegungen:
                            this.Tools.SetRootPage(this.Const.Pages.TestPage);
                            break;
                    }
                    break;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Menue', 'SetCurrentPage', this.Debug.Typen.Service);
        }
    }
};
MenueService.ctorParameters = () => [
    { type: debug_1.DebugProvider },
    { type: tools_1.ToolsProvider },
    { type: database_projekte_service_1.DatabaseProjekteService },
    { type: database_authentication_service_1.DatabaseAuthenticationService },
    { type: const_1.ConstProvider }
];
MenueService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], MenueService);
exports.MenueService = MenueService;


/***/ }),

/***/ 38713:
/*!*******************************************************!*\
  !*** ./src/app/services/security/security.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SecurityService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const router_1 = __webpack_require__(/*! @angular/router */ 60124);
let SecurityService = class SecurityService {
    constructor(Basics, nav, router, Debug, 
    // private MSALService: MsalService,
    Const) {
        this.Basics = Basics;
        this.nav = nav;
        this.router = router;
        this.Debug = Debug;
        this.Const = Const;
        try {
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Security', 'constructor', this.Debug.Typen.Service);
        }
    }
    canLoad(route) {
        try {
            if (this.CheckSecurity() === true) {
                console.log('Security Service -> can load: ' + route.path);
                return true;
            }
            else {
                console.log('Security Service -> can not load: ' + route.path);
                this.router.navigate([this.Const.Pages.LoginPage]);
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Security', 'canLoad', this.Debug.Typen.Service);
        }
    }
    CheckSecurity() {
        try {
            return true; //  this.MSALService.instance.getActiveAccount() !== null;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Security', 'CheckSecurity', this.Debug.Typen.Service);
        }
    }
};
SecurityService.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: angular_1.NavController },
    { type: router_1.Router },
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider }
];
SecurityService = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], SecurityService);
exports.SecurityService = SecurityService;


/***/ }),

/***/ 9983:
/*!*****************************************!*\
  !*** ./src/app/services/tools/tools.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolsProvider = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ 34929);
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const debug_1 = __webpack_require__(/*! ../debug/debug */ 83817);
const angular_1 = __webpack_require__(/*! @ionic/angular */ 93819); // Platform
const basics_1 = __webpack_require__(/*! ../basics/basics */ 7183);
const const_1 = __webpack_require__(/*! ../const/const */ 55005);
const lodash = tslib_1.__importStar(__webpack_require__(/*! lodash-es */ 92792));
const angular_2 = __webpack_require__(/*! @ionic/angular */ 93819);
const moment_1 = tslib_1.__importDefault(__webpack_require__(/*! moment */ 56908));
let ToolsProvider = class ToolsProvider {
    constructor(Basics, Debug, Const, 
    // private Anruffunktion: CallNumber,
    nav, platform, alertCtrl) {
        this.Basics = Basics;
        this.Debug = Debug;
        this.Const = Const;
        this.nav = nav;
        this.platform = platform;
        this.alertCtrl = alertCtrl;
        try {
            this.UID_Counter = 0;
            this.IsRunningOnDeviceFirstTime = true;
            this.ShowMessage = false;
            this.DialogMessage = '';
            this.IsRunningOnDeviceValue = false;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'Constructor', this.Debug.Typen.Service);
        }
    }
    GetButtonvalueSize() {
        try {
            if (this.platform.width() <= 600)
                return 12;
            else
                return 6;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetButtonvalueSize', this.Debug.Typen.Service);
        }
    }
    DeepCompareObjectarrays(ListeA, ListeB) {
        try {
            let Changed = false;
            let Index;
            let key;
            let Keyliste;
            let EintragA;
            let EintragB;
            if (ListeA.length >= ListeB.length) {
                for (EintragA of ListeA) {
                    // Objekt in der anderen Liste suchen
                    Index = ListeB.findIndex((eintrag) => {
                        return EintragA[key] === eintrag[key];
                    });
                    if (Index === -1) {
                        Changed = true;
                        break;
                    }
                    else {
                        // Alle Felder im Objekt vergleichen
                        Keyliste = Object.keys(ListeA[Index]);
                        EintragB = ListeB[Index];
                        for (let Key of Keyliste) {
                            if (EintragA[Key] !== EintragB[Key]) {
                                Changed = true;
                                break;
                            }
                        }
                        if (Changed === true)
                            break;
                    }
                }
            }
            else {
                for (EintragB of ListeB) {
                    // Objekt in der anderen Liste suchen
                    Index = ListeA.findIndex((eintrag) => {
                        return EintragB[key] === eintrag[key];
                    });
                    if (Index === -1) {
                        Changed = true;
                        break;
                    }
                    else {
                        Keyliste = Object.keys(ListeA[Index]);
                        EintragA = ListeA[Index];
                        for (let Key of Keyliste) {
                            // Alle Felder im Objekt vergleichen
                            if (EintragB[Key] !== EintragA[Key]) {
                                Changed = true;
                                break;
                            }
                        }
                        if (Changed === true)
                            break;
                    }
                }
            }
            return Changed;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'DeepCompareObjectarrays', this.Debug.Typen.Service);
        }
    }
    JSONCompareObjectarrays(ListeA, ListeB) {
        try {
            return JSON.stringify(ListeA) !== JSON.stringify(ListeB);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'JSONCompareObjectarrays', this.Debug.Typen.Service);
        }
    }
    CompareObjectarrays(ListeA, ListeB, key) {
        try {
            let Changed = false;
            let Index;
            // this.Artikelliste = ListeA
            // Artikelliste      = ListeB
            if (ListeA.length >= ListeB.length) {
                for (let EintragA of ListeA) {
                    Index = ListeB.findIndex((eintrag) => {
                        return EintragA[key] === eintrag[key];
                    });
                    if (Index === -1) {
                        Changed = true;
                        break;
                    }
                }
            }
            else {
                for (let EintragB of ListeB) {
                    Index = ListeA.findIndex((eintrag) => {
                        return EintragB[key] === eintrag[key];
                    });
                    if (Index === -1) {
                        Changed = true;
                        break;
                    }
                }
            }
            return Changed;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'CompareObjectarrays', this.Debug.Typen.Service);
        }
    }
    ShowEntscheidungDialog(header, message) {
        try {
            return new Promise((resolve) => {
                this.alertCtrl.create({
                    header: header,
                    message: message,
                    cssClass: 'alertdialogclass',
                    buttons: [
                        {
                            text: 'Nein',
                            cssClass: 'infonoclass',
                            handler: () => {
                                resolve(this.Const.Dialogmessages.no);
                            }
                        }, {
                            text: 'Ja',
                            cssClass: 'infookclass',
                            handler: () => {
                                resolve(this.Const.Dialogmessages.ok);
                            }
                        }
                    ]
                }).then((dialog) => {
                    dialog.present();
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'ShowEntscheidungDialog', this.Debug.Typen.Service);
        }
    }
    ShowAuswahlDialog(header, message, wahla, wahlb) {
        try {
            return new Promise((resolve) => {
                this.alertCtrl.create({
                    header: header,
                    cssClass: 'alertdialogclass',
                    message: message,
                    inputs: [
                        {
                            name: 'wahla',
                            type: 'radio',
                            label: wahla,
                            value: this.Const.Dialogmessages.wahla,
                            checked: true,
                        },
                        {
                            name: 'wahlb',
                            type: 'radio',
                            label: wahlb,
                            value: this.Const.Dialogmessages.wahlb,
                        }
                    ],
                    buttons: [
                        {
                            text: 'Abbrechen',
                            role: 'cancel',
                            cssClass: 'infonotwoclass',
                            handler: () => {
                                resolve(null);
                            }
                        }, {
                            text: 'Fertig',
                            cssClass: 'infookclass',
                            handler: (data) => {
                                if (lodash.isUndefined(data)) {
                                    resolve(null);
                                }
                                else {
                                    resolve(data);
                                }
                            }
                        }
                    ]
                }).then((dialog) => {
                    dialog.present();
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'ShowAuswahlDialog', this.Debug.Typen.Service);
        }
    }
    RemoveNullFromObject(obj) {
        try {
            let Eintrag;
            for (const key of Object.keys(obj)) {
                Eintrag = obj[key];
                if (Eintrag === null) {
                    Eintrag = '';
                    obj[key] = Eintrag;
                }
            }
            return obj;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'RemoveNullFromObject', this.Debug.Typen.Service);
        }
    }
    FormatValue(wert, einheit, kommastellen) {
        try {
            let Ausgabe;
            if (wert !== null) {
                if (wert >= 1000000) {
                    wert = wert / 1000000;
                    if (kommastellen === 0) {
                        wert = Math.round(wert);
                        Ausgabe = wert.toString() + ' M';
                    }
                    else
                        Ausgabe = wert.toFixed(kommastellen) + ' M';
                }
                else if (wert >= 1000) {
                    wert = wert / 1000;
                    if (kommastellen === 0) {
                        wert = Math.round(wert);
                        Ausgabe = wert.toString() + ' k';
                    }
                    else
                        Ausgabe = wert.toFixed(kommastellen) + ' k';
                }
                else {
                    if (wert > 0 && wert < 1) {
                        if (wert < 0.000000001) {
                            wert = wert * 1000000000;
                            if (kommastellen === 0)
                                wert = Math.round(wert);
                            else
                                Ausgabe = wert.toFixed(kommastellen);
                            Ausgabe = wert.toString() + ' p';
                        }
                        else if (wert < 0.000001) {
                            wert = wert * 1000000;
                            if (kommastellen === 0)
                                Ausgabe = Math.round(wert).toString();
                            else
                                Ausgabe = wert.toFixed(kommastellen);
                            Ausgabe = Ausgabe + ' n';
                        }
                        else if (wert < 0.001) {
                            wert = wert * 1000;
                            if (kommastellen === 0)
                                Ausgabe = Math.round(wert).toString();
                            else
                                Ausgabe = wert.toFixed(kommastellen);
                            Ausgabe = Ausgabe + ' &micro;';
                        }
                        else if (wert < 1) {
                            wert = wert * 1000;
                            if (kommastellen === 0)
                                Ausgabe = Math.round(wert).toString();
                            else
                                Ausgabe = wert.toFixed(kommastellen);
                            Ausgabe = Ausgabe + ' m';
                        }
                    }
                    else {
                        if (kommastellen === 0)
                            Ausgabe = Math.round(wert).toString();
                        else
                            Ausgabe = wert.toFixed(kommastellen);
                        if (einheit !== '')
                            Ausgabe = Ausgabe + ' ' + einheit;
                    }
                }
                Ausgabe = Ausgabe.replace('.', ',');
                if (einheit !== '')
                    Ausgabe = Ausgabe + ' ' + einheit;
                return Ausgabe;
            }
            else {
                return '0';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'FormatValue', this.Debug.Typen.Service);
        }
    }
    GetUniqueID(name) {
        try {
            this.UID_Counter++;
            return 'uid_' + name.replace(/-/g, '_') + '_' + this.UID_Counter.toString();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetUniqueID', this.Debug.Typen.Service);
        }
    }
    HexToRGB(hex) {
        try {
            let bigint;
            let r = 100;
            let g = 50;
            let b = 50;
            if (typeof hex !== 'undefined') {
                hex = hex.replace('#', '');
                bigint = parseInt(hex, 16);
                r = (bigint >> 16) & 255;
                g = (bigint >> 8) & 255;
                b = bigint & 255;
            }
            return r + ',' + g + ',' + b;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'HexToRGB', this.Debug.Typen.Component);
        }
    }
    SetRootPage(page) {
        try {
            //  this.Basics.LastRootPage = page;
            return new Promise(resolve => {
                this.nav.navigateRoot(page, { animated: false }).then(() => {
                    // this.NavParameter.SetRootpage(page);
                    // debugger;
                    resolve(true);
                }).catch((error) => {
                    debugger;
                    console.log(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
        }
    }
    PushPage(page) {
        try {
            return new Promise(resolve => {
                this.nav.navigateForward(page, { animated: true }).then(() => {
                    // this.NavParameter.AddPage(page);
                    resolve(true);
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
        }
    }
    PopPage() {
        try {
            let Lastpage;
            return new Promise(resolve => {
                // Lastpage = this.NavParameter.RemovePage();
                if (Lastpage !== null) {
                    this.nav.navigateBack(Lastpage, { animated: false }).then(() => {
                        resolve(true);
                    }).catch((error) => {
                        console.log(error);
                    });
                }
                else {
                    resolve(true);
                }
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'SetRootPage', this.Debug.Typen.Service);
        }
    }
    GetBogenmass(winkel) {
        try {
            return (winkel / 180) * Math.PI;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetBogenmass', this.Debug.Typen.Service);
        }
    }
    GetGradmass(winkel) {
        try {
            return (winkel * 180) / Math.PI;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetGradmass', this.Debug.Typen.Service);
        }
    }
    IstGerade(wert) {
        try {
            return wert % 2 === 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'IstGerade', this.Debug.Typen.Service);
        }
    }
    IstUngerade(wert) {
        try {
            return wert % 2 !== 0;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'IstUngerade', this.Debug.Typen.Service);
        }
    }
    RundenDezimal(value, precision) {
        try {
            let multiplier = Math.pow(10, precision || 0);
            return Math.round(value * multiplier) / multiplier;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'file', 'function', this.Debug.Typen.Page);
        }
    }
    Runden(wert, stellen) {
        try {
            let Zahl = Math.pow(10, stellen);
            return (Math.round(wert * Zahl) / Zahl).toFixed(stellen);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'Runden', this.Debug.Typen.Service);
        }
    }
    GetZeitstempelwert() {
        try {
            return (0, moment_1.default)().valueOf();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetZeitstempel', this.Debug.Typen.Service);
        }
    }
    GetZeitpunkttext() {
        try {
            return (0, moment_1.default)().format('DD.MM.YYYY HH:mm:ss');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetZeitstempel', this.Debug.Typen.Service);
        }
    }
    GetTimebasedID(tag, monat, jahr) {
        try {
            let Stunde = 12;
            let Minute = 0;
            return (0, moment_1.default)(tag + '.' + monat + '.' + jahr + ' ' + Stunde + ':' + Minute, 'DD.MM.YYYY HH:mm').locale('de').valueOf().toString();
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'GetTimebasedID', this.Debug.Typen.Service);
        }
    }
    FormatLinebreaks(text) {
        try {
            if (typeof text !== 'undefined') {
                return text.replace(/(?:\r\n|\r|\n)/g, '<br>');
            }
            else {
                return '';
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'FormatLinebreaks', this.Debug.Typen.Service);
        }
    }
    ReplaceSonderzeichen(value) {
        try {
            value = value.replace(/ /g, '_');
            value = value.replace(/Ã¤/g, 'ae');
            value = value.replace(/Ã/g, 'Ae');
            value = value.replace(/Ã¶/g, 'oe');
            value = value.replace(/Ã/g, 'Oe');
            value = value.replace(/Ã¼/g, 'ue');
            value = value.replace(/Ã/g, 'Ue');
            value = value.replace(/Ã/g, 'ss');
            value = value.replace(/[&\/\\#,+()$~%.'Â§=^!`Â´;":.,*-?<>{}]/g, '');
            return value;
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'ReplaceSonderzeichen', this.Debug.Typen.Service);
        }
    }
    RundenAsText(wert, stellen) {
        try {
            let Zahl = Math.pow(10, stellen);
            let Ergo;
            Ergo = Math.round(wert * Zahl) / Zahl;
            return Ergo.toString().replace('.', ',');
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'Runden', this.Debug.Typen.Service);
        }
    }
    CheckArray(data) {
        try {
            if (this.CheckObject(data, false)) {
                if (data instanceof Array) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'CheckArray', this.Debug.Typen.Service);
        }
    }
    CheckObject(data, key) {
        try {
            if (typeof data !== 'undefined' && data !== null) {
                if (key === false) {
                    return true;
                }
                else {
                    if (typeof data[key.toString()] !== 'undefined') {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            else {
                return false;
            }
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'CheckObject', this.Debug.Typen.Service);
        }
    }
    ShowHinweisDialog(message) {
        try {
            return new Promise((resolve) => {
                this.alertCtrl.create({
                    header: 'Hinweis',
                    message: message,
                    cssClass: 'alertdialogclass',
                    buttons: [
                        {
                            text: "Ok",
                            cssClass: 'infookclass',
                            handler: () => {
                                resolve(true);
                            }
                        }
                    ]
                }).then((dialog) => {
                    dialog.present();
                }).catch((error) => {
                    console.log(error);
                });
            });
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'ShowHinweisDialog', this.Debug.Typen.Service);
        }
    }
    CheckEmail(email) {
        try {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        }
        catch (error) {
            this.Debug.ShowErrorMessage(error, 'Tools', 'CheckEmail', this.Debug.Typen.Service);
        }
    }
};
ToolsProvider.ctorParameters = () => [
    { type: basics_1.BasicsProvider },
    { type: debug_1.DebugProvider },
    { type: const_1.ConstProvider },
    { type: angular_1.NavController },
    { type: angular_2.Platform },
    { type: angular_1.AlertController }
];
ToolsProvider = tslib_1.__decorate([
    (0, core_1.Injectable)({
        providedIn: 'root'
    })
], ToolsProvider);
exports.ToolsProvider = ToolsProvider;


/***/ }),

/***/ 92340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.environment = void 0;
exports.environment = {
    production: false,
    SecurityToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2NzE1NDY4MTksImV4cCI6MzA2MDA4MTM0NiwiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIk5hbWUiOiJQZXRlciBIb3JuYnVyZ2VyIiwiTWFpbCI6InAuaG9ybmJ1cmdlckBnbWFpbC5jb20ifQ.agwaczjxhb3HqTX0cGt4R3sMuvltWqp4lyJaQuIrcyw'
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ 14431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(/*! @angular/core */ 22560);
const platform_browser_dynamic_1 = __webpack_require__(/*! @angular/platform-browser-dynamic */ 76057);
const app_module_1 = __webpack_require__(/*! ./app/app.module */ 36747);
const environment_1 = __webpack_require__(/*! ./environments/environment */ 92340);
if (environment_1.environment.production) {
    (0, core_1.enableProdMode)();
}
(0, platform_browser_dynamic_1.platformBrowserDynamic)().bootstrapModule(app_module_1.AppModule)
    .catch(err => console.log(err));


/***/ }),

/***/ 50863:
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./ion-accordion_2.entry.js": [
		70079,
		"common",
		"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"
	],
	"./ion-action-sheet.entry.js": [
		25593,
		"common",
		"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		13225,
		"common",
		"node_modules_ionic_core_dist_esm_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		4812,
		"common",
		"node_modules_ionic_core_dist_esm_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		86655,
		"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		44856,
		"common",
		"node_modules_ionic_core_dist_esm_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		13059,
		"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js"
	],
	"./ion-breadcrumb_2.entry.js": [
		58648,
		"common",
		"node_modules_ionic_core_dist_esm_ion-breadcrumb_2_entry_js"
	],
	"./ion-button_2.entry.js": [
		98308,
		"node_modules_ionic_core_dist_esm_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		44690,
		"node_modules_ionic_core_dist_esm_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		64090,
		"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		36214,
		"node_modules_ionic_core_dist_esm_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		69447,
		"node_modules_ionic_core_dist_esm_ion-col_3_entry_js"
	],
	"./ion-datetime-button.entry.js": [
		17950,
		"default-node_modules_ionic_core_dist_esm_data-cb72448c_js-node_modules_ionic_core_dist_esm_th-29e28e",
		"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		79689,
		"default-node_modules_ionic_core_dist_esm_data-cb72448c_js-node_modules_ionic_core_dist_esm_th-29e28e",
		"common",
		"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		18840,
		"common",
		"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		40749,
		"node_modules_ionic_core_dist_esm_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		69667,
		"common",
		"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		83288,
		"common",
		"node_modules_ionic_core_dist_esm_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		35473,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		53634,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		22855,
		"node_modules_ionic_core_dist_esm_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		495,
		"common",
		"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		58737,
		"common",
		"node_modules_ionic_core_dist_esm_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		99632,
		"common",
		"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"
	],
	"./ion-picker-column-internal.entry.js": [
		54446,
		"common",
		"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js"
	],
	"./ion-picker-internal.entry.js": [
		32275,
		"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"
	],
	"./ion-popover.entry.js": [
		48050,
		"common",
		"node_modules_ionic_core_dist_esm_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		18994,
		"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		23592,
		"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		35454,
		"common",
		"node_modules_ionic_core_dist_esm_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		290,
		"common",
		"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		92666,
		"common",
		"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		64816,
		"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		45534,
		"node_modules_ionic_core_dist_esm_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		94902,
		"common",
		"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		91938,
		"common",
		"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		78179,
		"node_modules_ionic_core_dist_esm_ion-select_3_entry_js"
	],
	"./ion-slide_2.entry.js": [
		90668,
		"node_modules_ionic_core_dist_esm_ion-slide_2_entry_js"
	],
	"./ion-spinner.entry.js": [
		61624,
		"common",
		"node_modules_ionic_core_dist_esm_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		19989,
		"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		28902,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		70199,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		48395,
		"node_modules_ionic_core_dist_esm_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		96357,
		"node_modules_ionic_core_dist_esm_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		38268,
		"node_modules_ionic_core_dist_esm_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		15269,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toggle_entry_js"
	],
	"./ion-virtual-scroll.entry.js": [
		32875,
		"node_modules_ionic_core_dist_esm_ion-virtual-scroll_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = 50863;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 46700:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 58685,
	"./af.js": 58685,
	"./ar": 254,
	"./ar-dz": 4312,
	"./ar-dz.js": 4312,
	"./ar-kw": 32614,
	"./ar-kw.js": 32614,
	"./ar-ly": 18630,
	"./ar-ly.js": 18630,
	"./ar-ma": 28674,
	"./ar-ma.js": 28674,
	"./ar-sa": 49032,
	"./ar-sa.js": 49032,
	"./ar-tn": 24730,
	"./ar-tn.js": 24730,
	"./ar.js": 254,
	"./az": 53052,
	"./az.js": 53052,
	"./be": 60150,
	"./be.js": 60150,
	"./bg": 63069,
	"./bg.js": 63069,
	"./bm": 13466,
	"./bm.js": 13466,
	"./bn": 18516,
	"./bn-bd": 90557,
	"./bn-bd.js": 90557,
	"./bn.js": 18516,
	"./bo": 26273,
	"./bo.js": 26273,
	"./br": 9588,
	"./br.js": 9588,
	"./bs": 19815,
	"./bs.js": 19815,
	"./ca": 83331,
	"./ca.js": 83331,
	"./cs": 21320,
	"./cs.js": 21320,
	"./cv": 72219,
	"./cv.js": 72219,
	"./cy": 68266,
	"./cy.js": 68266,
	"./da": 66427,
	"./da.js": 66427,
	"./de": 67435,
	"./de-at": 52871,
	"./de-at.js": 52871,
	"./de-ch": 12994,
	"./de-ch.js": 12994,
	"./de.js": 67435,
	"./dv": 82357,
	"./dv.js": 82357,
	"./el": 95649,
	"./el.js": 95649,
	"./en-au": 59961,
	"./en-au.js": 59961,
	"./en-ca": 19878,
	"./en-ca.js": 19878,
	"./en-gb": 3924,
	"./en-gb.js": 3924,
	"./en-ie": 70864,
	"./en-ie.js": 70864,
	"./en-il": 91579,
	"./en-il.js": 91579,
	"./en-in": 30940,
	"./en-in.js": 30940,
	"./en-nz": 16181,
	"./en-nz.js": 16181,
	"./en-sg": 44301,
	"./en-sg.js": 44301,
	"./eo": 85291,
	"./eo.js": 85291,
	"./es": 54529,
	"./es-do": 53764,
	"./es-do.js": 53764,
	"./es-mx": 12584,
	"./es-mx.js": 12584,
	"./es-us": 63425,
	"./es-us.js": 63425,
	"./es.js": 54529,
	"./et": 35203,
	"./et.js": 35203,
	"./eu": 70678,
	"./eu.js": 70678,
	"./fa": 83483,
	"./fa.js": 83483,
	"./fi": 96262,
	"./fi.js": 96262,
	"./fil": 52521,
	"./fil.js": 52521,
	"./fo": 34555,
	"./fo.js": 34555,
	"./fr": 63131,
	"./fr-ca": 88239,
	"./fr-ca.js": 88239,
	"./fr-ch": 21702,
	"./fr-ch.js": 21702,
	"./fr.js": 63131,
	"./fy": 267,
	"./fy.js": 267,
	"./ga": 23821,
	"./ga.js": 23821,
	"./gd": 71753,
	"./gd.js": 71753,
	"./gl": 4074,
	"./gl.js": 4074,
	"./gom-deva": 92762,
	"./gom-deva.js": 92762,
	"./gom-latn": 5969,
	"./gom-latn.js": 5969,
	"./gu": 82809,
	"./gu.js": 82809,
	"./he": 45402,
	"./he.js": 45402,
	"./hi": 315,
	"./hi.js": 315,
	"./hr": 10410,
	"./hr.js": 10410,
	"./hu": 38288,
	"./hu.js": 38288,
	"./hy-am": 67928,
	"./hy-am.js": 67928,
	"./id": 71334,
	"./id.js": 71334,
	"./is": 86959,
	"./is.js": 86959,
	"./it": 34864,
	"./it-ch": 51124,
	"./it-ch.js": 51124,
	"./it.js": 34864,
	"./ja": 36141,
	"./ja.js": 36141,
	"./jv": 29187,
	"./jv.js": 29187,
	"./ka": 42136,
	"./ka.js": 42136,
	"./kk": 94332,
	"./kk.js": 94332,
	"./km": 18607,
	"./km.js": 18607,
	"./kn": 84305,
	"./kn.js": 84305,
	"./ko": 70234,
	"./ko.js": 70234,
	"./ku": 16003,
	"./ku.js": 16003,
	"./ky": 75061,
	"./ky.js": 75061,
	"./lb": 32786,
	"./lb.js": 32786,
	"./lo": 66183,
	"./lo.js": 66183,
	"./lt": 50029,
	"./lt.js": 50029,
	"./lv": 24169,
	"./lv.js": 24169,
	"./me": 68577,
	"./me.js": 68577,
	"./mi": 68177,
	"./mi.js": 68177,
	"./mk": 50337,
	"./mk.js": 50337,
	"./ml": 65260,
	"./ml.js": 65260,
	"./mn": 52325,
	"./mn.js": 52325,
	"./mr": 14695,
	"./mr.js": 14695,
	"./ms": 75334,
	"./ms-my": 37151,
	"./ms-my.js": 37151,
	"./ms.js": 75334,
	"./mt": 63570,
	"./mt.js": 63570,
	"./my": 97963,
	"./my.js": 97963,
	"./nb": 88028,
	"./nb.js": 88028,
	"./ne": 86638,
	"./ne.js": 86638,
	"./nl": 50302,
	"./nl-be": 66782,
	"./nl-be.js": 66782,
	"./nl.js": 50302,
	"./nn": 33501,
	"./nn.js": 33501,
	"./oc-lnc": 50563,
	"./oc-lnc.js": 50563,
	"./pa-in": 50869,
	"./pa-in.js": 50869,
	"./pl": 65302,
	"./pl.js": 65302,
	"./pt": 49687,
	"./pt-br": 74884,
	"./pt-br.js": 74884,
	"./pt.js": 49687,
	"./ro": 79107,
	"./ro.js": 79107,
	"./ru": 33627,
	"./ru.js": 33627,
	"./sd": 30355,
	"./sd.js": 30355,
	"./se": 83427,
	"./se.js": 83427,
	"./si": 11848,
	"./si.js": 11848,
	"./sk": 54590,
	"./sk.js": 54590,
	"./sl": 20184,
	"./sl.js": 20184,
	"./sq": 56361,
	"./sq.js": 56361,
	"./sr": 78965,
	"./sr-cyrl": 81287,
	"./sr-cyrl.js": 81287,
	"./sr.js": 78965,
	"./ss": 25456,
	"./ss.js": 25456,
	"./sv": 70451,
	"./sv.js": 70451,
	"./sw": 77558,
	"./sw.js": 77558,
	"./ta": 51356,
	"./ta.js": 51356,
	"./te": 73693,
	"./te.js": 73693,
	"./tet": 21243,
	"./tet.js": 21243,
	"./tg": 42500,
	"./tg.js": 42500,
	"./th": 55768,
	"./th.js": 55768,
	"./tk": 77761,
	"./tk.js": 77761,
	"./tl-ph": 35780,
	"./tl-ph.js": 35780,
	"./tlh": 29590,
	"./tlh.js": 29590,
	"./tr": 33807,
	"./tr.js": 33807,
	"./tzl": 93857,
	"./tzl.js": 93857,
	"./tzm": 60654,
	"./tzm-latn": 8806,
	"./tzm-latn.js": 8806,
	"./tzm.js": 60654,
	"./ug-cn": 30845,
	"./ug-cn.js": 30845,
	"./uk": 19232,
	"./uk.js": 19232,
	"./ur": 47052,
	"./ur.js": 47052,
	"./uz": 77967,
	"./uz-latn": 32233,
	"./uz-latn.js": 32233,
	"./uz.js": 77967,
	"./vi": 98615,
	"./vi.js": 98615,
	"./x-pseudo": 12320,
	"./x-pseudo.js": 12320,
	"./yo": 31313,
	"./yo.js": 31313,
	"./zh-cn": 64490,
	"./zh-cn.js": 64490,
	"./zh-hk": 55910,
	"./zh-hk.js": 55910,
	"./zh-mo": 98262,
	"./zh-mo.js": 98262,
	"./zh-tw": 44223,
	"./zh-tw.js": 44223
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 46700;

/***/ }),

/***/ 79259:
/*!***********************************************!*\
  !*** ./src/app/app.component.scss?ngResource ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = "::ng-deep ngx-material-timepicker-content {\n  --body-background-color: #7b6a58;\n  --primary-font-family: \"Roboto\",sans-serif;\n  --button-color: none !important;\n  --dial-active-color: #fff;\n  --dial-inactive-color: rgba(255, 255, 255, .5);\n  --dial-background-color: #354547 !important;\n  --dial-editable-active-color: #c7d304 !important;\n  --dial-editable-background-color: #fff;\n  --clock-face-time-active-color: #fff;\n  --clock-face-time-inactive-color: #6c6c6c;\n  --clock-face-inner-time-inactive-color: #929292;\n  --clock-face-time-disabled-color: #c5c5c5;\n  --clock-face-background-color: #354547;\n  --clock-hand-color: #c7d304 !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdDQUFBO0VBQ0EsMENBQUE7RUFDQSwrQkFBQTtFQUNBLHlCQUFBO0VBQ0EsOENBQUE7RUFDQSwyQ0FBQTtFQUNBLGdEQUFBO0VBQ0Esc0NBQUE7RUFDQSxvQ0FBQTtFQUNBLHlDQUFBO0VBQ0EsK0NBQUE7RUFDQSx5Q0FBQTtFQUNBLHNDQUFBO0VBQ0Esc0NBQUE7QUFDRiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAgbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItY29udGVudHtcbiAgLS1ib2R5LWJhY2tncm91bmQtY29sb3I6ICM3YjZhNTg7XG4gIC0tcHJpbWFyeS1mb250LWZhbWlseTogJ1JvYm90bycsc2Fucy1zZXJpZjtcbiAgLS1idXR0b24tY29sb3I6IG5vbmUgIWltcG9ydGFudDtcbiAgLS1kaWFsLWFjdGl2ZS1jb2xvcjogI2ZmZjtcbiAgLS1kaWFsLWluYWN0aXZlLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC41KTtcbiAgLS1kaWFsLWJhY2tncm91bmQtY29sb3I6ICMzNTQ1NDcgIWltcG9ydGFudDtcbiAgLS1kaWFsLWVkaXRhYmxlLWFjdGl2ZS1jb2xvcjogI2M3ZDMwNCAhaW1wb3J0YW50O1xuICAtLWRpYWwtZWRpdGFibGUtYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgLS1jbG9jay1mYWNlLXRpbWUtYWN0aXZlLWNvbG9yOiAjZmZmO1xuICAtLWNsb2NrLWZhY2UtdGltZS1pbmFjdGl2ZS1jb2xvcjogIzZjNmM2YztcbiAgLS1jbG9jay1mYWNlLWlubmVyLXRpbWUtaW5hY3RpdmUtY29sb3I6ICM5MjkyOTI7XG4gIC0tY2xvY2stZmFjZS10aW1lLWRpc2FibGVkLWNvbG9yOiAjYzVjNWM1O1xuICAtLWNsb2NrLWZhY2UtYmFja2dyb3VuZC1jb2xvcjogIzM1NDU0NztcbiAgLS1jbG9jay1oYW5kLWNvbG9yOiAjYzdkMzA0ICFpbXBvcnRhbnQ7XG59XG5cblxuIl19 */";

/***/ }),

/***/ 87845:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n\n.emptymessageclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 100px;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.innerkeeperclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left: 3px solid #354547;\n}\n\n.contentdivclass {\n  background: blue;\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.innerkeeperlisteclass {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.innerkeeperalphabetclass {\n  width: 44px;\n  height: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpLW1pdGFyYmVpdGVyLWF1c3dhaGwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0U7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUhKOztBQU9BO0VBRUUsaUJBQUE7QUFMRjs7QUFRQTtFQUVFLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFORjs7QUFVQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFSRjs7QUFXQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7QUFURjs7QUFZQTtFQUVFLGdCQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBVkY7O0FBYUE7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQVhGOztBQWVBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBYkY7O0FBZ0JBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBZEYiLCJmaWxlIjoiZmktbWl0YXJiZWl0ZXItYXVzd2FobC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA4MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmVyZ29uYW1ldGV4dGNsYXNzIHtcblxuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmVtcHR5bWVzc2FnZWNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBwYWRkaW5nLXRvcDogMTAwcHg7XG59XG5cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmlubmVya2VlcGVyY2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzM1NDU0Nztcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgYmFja2dyb3VuZDogYmx1ZTtcbiAgbGVmdDogNTAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5tZW51ZmlsdGVyYnV0dG9uY2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgcGFkZGluZy1yaWdodDogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuXG4uaW5uZXJrZWVwZXJsaXN0ZWNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLmlubmVya2VlcGVyYWxwaGFiZXRjbGFzcyB7XG5cbiAgd2lkdGg6ICA0NHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG5cbiJdfQ== */";

/***/ }),

/***/ 76138:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.scss?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpLW1pdGFyYmVpdGVyLWVkaXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBTUE7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FBSkY7O0FBT0E7RUFFRSxTQUFBO0VBQ0Esa0JBQUE7RUFDQSwwQkFBQTtBQUxGOztBQVFBO0VBRUUsOEJBQUE7RUFDQSwrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBTkYiLCJmaWxlIjoiZmktbWl0YXJiZWl0ZXItZWRpdG9yLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA5MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgbGVmdDogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xufVxuXG4uY29udGVudGlubmVyY2xhc3Mge1xuXG4gIGJvcmRlci1sZWZ0OiAgM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG4iXX0= */";

/***/ }),

/***/ 2213:
/*!*************************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.scss?ngResource ***!
  \*************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpLXN0YW5kb3J0LWVkaXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBTUE7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FBSkY7O0FBT0E7RUFFRSxTQUFBO0VBQ0Esa0JBQUE7RUFDQSwwQkFBQTtBQUxGOztBQVFBO0VBRUUsOEJBQUE7RUFDQSwrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBTkYiLCJmaWxlIjoiZmktc3RhbmRvcnQtZWRpdG9yLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA5MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgbGVmdDogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xufVxuXG4uY29udGVudGlubmVyY2xhc3Mge1xuXG4gIGJvcmRlci1sZWZ0OiAgM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG4iXX0= */";

/***/ }),

/***/ 63614:
/*!***********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-aufgaben-listefilter/pj-aufgaben-listefilter.component.scss?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.contentdivclass {\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.menubuttonclass {\n  cursor: pointer;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.statusdivclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 90%;\n  flex-wrap: wrap;\n  padding: 6px;\n}\n\n.statusdivclasshover:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.statusdivclassnohover:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.aufgabedivclass {\n  padding: 4px;\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 3px;\n}\n\n.aufgabedivhoverclass:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.aufgabedivnohoverclass:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.termindatumdivclass {\n  width: 100%;\n  height: 100%;\n  padding: 4px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n}\n\n.termindatumdivclass:hover {\n  text-decoration: underline;\n}\n\n.savestatusdivclass {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.contentkeeperdiv {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  overflow: auto;\n  z-index: 10;\n}\n\n.datestatuskeeperdiv {\n  width: 640px;\n  height: 430px;\n  position: absolute;\n  z-index: 100;\n  opacity: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.zustaendigdivemptyclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: white;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivemptyclasshover:hover {\n  text-decoration: underline;\n  color: black;\n  cursor: pointer;\n}\n\n.zustaendigdivemptyclassnohover:hover {\n  text-decoration: none;\n  color: white;\n  cursor: none;\n}\n\n.zustaendigdivfillclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: black;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivfillclasshover:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.zustaendigdivfillclassnohover:hover {\n  text-decoration: none;\n  cursor: none;\n}\n\n.addeintragdivclass {\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.framediv {\n  width: 100%;\n  display: inline-block;\n  padding: 4px;\n}\n\n.dropzone {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  font-weight: normal;\n  font-size: 100%;\n  height: 60px;\n  border: 2px dashed #f16624;\n  border-radius: 5px;\n  background: #444444;\n  color: white;\n}\n\n.dropzone.hovering {\n  border: 2px solid #f16624;\n  color: #dadada !important;\n}\n\n.dropzone .file-label {\n  font-size: 1.2em;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 10403:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n\n.emptymessageclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 100px;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.innerkeeperclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left: 3px solid #354547;\n}\n\n.contentdivclass {\n  background: blue;\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.innerkeeperlisteclass {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.innerkeeperalphabetclass {\n  width: 44px;\n  height: 100%;\n  overflow: auto;\n}\n\n.bullclass {\n  border-radius: 50%;\n  width: 8px;\n  height: 8px;\n  background: black;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWJldGVpbGlndGVuLWF1c3dhaGwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0U7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUhKOztBQU9BO0VBRUUsaUJBQUE7QUFMRjs7QUFRQTtFQUVFLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFORjs7QUFVQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFSRjs7QUFXQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7QUFURjs7QUFZQTtFQUVFLGdCQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBVkY7O0FBYUE7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQVhGOztBQWVBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBYkY7O0FBZ0JBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBZEY7O0FBaUJBO0VBRUUsa0JBQUE7RUFDQSxVQUFBO0VBQ0EsV0FBQTtFQUNBLGlCQUFBO0FBZkYiLCJmaWxlIjoicGotYmV0ZWlsaWd0ZW4tYXVzd2FobC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA4MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmVyZ29uYW1ldGV4dGNsYXNzIHtcblxuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmVtcHR5bWVzc2FnZWNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBwYWRkaW5nLXRvcDogMTAwcHg7XG59XG5cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmlubmVya2VlcGVyY2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzM1NDU0Nztcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgYmFja2dyb3VuZDogYmx1ZTtcbiAgbGVmdDogNTAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5tZW51ZmlsdGVyYnV0dG9uY2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgcGFkZGluZy1yaWdodDogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuXG4uaW5uZXJrZWVwZXJsaXN0ZWNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLmlubmVya2VlcGVyYWxwaGFiZXRjbGFzcyB7XG5cbiAgd2lkdGg6ICA0NHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uYnVsbGNsYXNzIHtcblxuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHdpZHRoOiA4cHg7XG4gIGhlaWdodDogOHB4O1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cblxuXG4iXX0= */";

/***/ }),

/***/ 67925:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-editor/pj-beteiligten-editor.component.scss?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWJldGVpbGlndGVuLWVkaXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFBRjs7QUFHQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBREY7O0FBSUE7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7QUFGRiIsImZpbGUiOiJwai1iZXRlaWxpZ3Rlbi1lZGl0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cbiJdfQ== */";

/***/ }),

/***/ 45001:
/*!*****************************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-auswahl/pj-favoriten-auswahl.component.scss?ngResource ***!
  \*****************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\n.contentinnerheaderclass {\n  width: 100%;\n}\n\n.contentinnercontentclass {\n  height: auto;\n  flex-grow: 1;\n  width: 100%;\n}\n\n.paddingdivclass {\n  width: 100%;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n\n.borderdivclass {\n  border: 1px solid #444444;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.projektelisteclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n  padding: 4px;\n}\n\n.projektebuttonclass {\n  width: 100%;\n  height: 58px;\n  border-top: 1px solid #444444;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWZhdm9yaXRlbi1hdXN3YWhsLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFGSjs7QUFNQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFKRjs7QUFPQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBTEY7O0FBUUE7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxjQUFBO0FBTkY7O0FBU0E7RUFFRSxXQUFBO0FBUEY7O0FBVUE7RUFFRSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFSRjs7QUFXQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0FBVEY7O0FBWUE7RUFFRSx5QkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBVkY7O0FBYUE7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0FBWEY7O0FBY0E7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLDZCQUFBO0FBWkYiLCJmaWxlIjoicGotZmF2b3JpdGVuLWF1c3dhaGwuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDkwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5jb250ZW50aW5uZXJoZWFkZXJjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5jb250ZW50aW5uZXJjb250ZW50Y2xhc3Mge1xuXG4gIGhlaWdodDogYXV0bztcbiAgZmxleC1ncm93OiAxO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnBhZGRpbmdkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gIHBhZGRpbmctcmlnaHQ6IDhweDtcbiAgcGFkZGluZy1ib3R0b206IDhweDtcbn1cblxuLmJvcmRlcmRpdmNsYXNzIHtcblxuICBib3JkZXI6IDFweCBzb2xpZCAjNDQ0NDQ0O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ucHJvamVrdGVsaXN0ZWNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBmbGV4LWdyb3c6IDE7XG4gIHBhZGRpbmc6IDRweDtcbn1cblxuLnByb2pla3RlYnV0dG9uY2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDU4cHg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjNDQ0NDQ0O1xuXG59XG5cbiJdfQ== */";

/***/ }),

/***/ 41499:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-editor/pj-favoriten-editor.component.scss?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n}\n\n.contentinnerheaderclass {\n  width: 100%;\n}\n\n.contentinnercontentclass {\n  height: auto;\n  flex-grow: 1;\n  width: 100%;\n}\n\n.paddingdivclass {\n  width: 100%;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n\n.borderdivclass {\n  border: 1px solid #444444;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.projektelisteclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n  padding: 4px;\n}\n\n.projektebuttonclass {\n  width: 100%;\n  height: 58px;\n  border-top: 1px solid #444444;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWZhdm9yaXRlbi1lZGl0b3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUU7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUZKOztBQU1BO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQUpGOztBQU9BO0VBRUUsU0FBQTtFQUNBLGtCQUFBO0VBQ0EsMEJBQUE7QUFMRjs7QUFRQTtFQUVFLDhCQUFBO0VBQ0EsK0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGNBQUE7QUFORjs7QUFTQTtFQUVFLFdBQUE7QUFQRjs7QUFVQTtFQUVFLFlBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQVJGOztBQVdBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7QUFURjs7QUFZQTtFQUVFLHlCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFWRjs7QUFhQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7QUFYRjs7QUFjQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsNkJBQUE7QUFaRiIsImZpbGUiOiJwai1mYXZvcml0ZW4tZWRpdG9yLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA5MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgbGVmdDogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xufVxuXG4uY29udGVudGlubmVyY2xhc3Mge1xuXG4gIGJvcmRlci1sZWZ0OiAgM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uY29udGVudGlubmVyaGVhZGVyY2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uY29udGVudGlubmVyY29udGVudGNsYXNzIHtcblxuICBoZWlnaHQ6IGF1dG87XG4gIGZsZXgtZ3JvdzogMTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5wYWRkaW5nZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBhZGRpbmctbGVmdDogOHB4O1xuICBwYWRkaW5nLXJpZ2h0OiA4cHg7XG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XG59XG5cbi5ib3JkZXJkaXZjbGFzcyB7XG5cbiAgYm9yZGVyOiAxcHggc29saWQgIzQ0NDQ0NDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnByb2pla3RlbGlzdGVjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbiAgZmxleC1ncm93OiAxO1xuICBwYWRkaW5nOiA0cHg7XG59XG5cbi5wcm9qZWt0ZWJ1dHRvbmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA1OHB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzQ0NDQ0NDtcblxufVxuXG4iXX0= */";

/***/ }),

/***/ 61405:
/*!***************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-bauteileditor/pj-gebaeude-bauteileditor.component.scss?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWdlYmFldWRlLWJhdXRlaWxlZGl0b3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUU7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUZKOztBQU1BO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQUpGOztBQU9BO0VBRUUsU0FBQTtFQUNBLGtCQUFBO0VBQ0EsMEJBQUE7QUFMRjs7QUFRQTtFQUVFLDhCQUFBO0VBQ0EsK0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtBQU5GIiwiZmlsZSI6InBqLWdlYmFldWRlLWJhdXRlaWxlZGl0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDkwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cbiJdfQ== */";

/***/ }),

/***/ 2986:
/*!*****************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-geschosseditor/pj-gebaeude-geschosseditor.component.scss?ngResource ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWdlYmFldWRlLWdlc2Nob3NzZWRpdG9yLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFGSjs7QUFNQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFKRjs7QUFPQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBTEY7O0FBUUE7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFORiIsImZpbGUiOiJwai1nZWJhZXVkZS1nZXNjaG9zc2VkaXRvci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbmZvdGFibGUge1xuXG4gIHRkIHtcblxuICAgIGZvbnQtc2l6ZTogOTAlO1xuICAgIGNvbG9yOiAjNDQ0NDQ0O1xuICB9XG59XG5cbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246YWJzb2x1dGU7XG59XG5cbi5jb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGxlZnQ6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTtcbn1cblxuLmNvbnRlbnRpbm5lcmNsYXNzIHtcblxuICBib3JkZXItbGVmdDogIDNweCBzb2xpZCAjMzU0NTQ3O1xuICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjMzU0NTQ3O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuIl19 */";

/***/ }),

/***/ 10328:
/*!***********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.component.scss?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".strukturkeeperdiv {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n}\n\n.strukturbauteildiv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n  border-right: 2px solid #354547;\n}\n\n.strukturbauteilupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturbauteilmiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.strukturgeschossldiv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n  border-right: 2px solid #354547;\n}\n\n.strukturgeschossupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturgeschossmiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.strukturraeumediv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n}\n\n.strukturraumupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturraummiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.contentleftinnerclass {\n  width: 700px;\n  height: 100%;\n}\n\n.contentrightinnerclass {\n  width: auto;\n  flex-grow: 1;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.projektbeteiligtenheaderclass {\n  width: 100%;\n}\n\n.projektbeteiligtencontentclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n\n.projektbeteiligtencontentframeclass {\n  width: 100%;\n  height: 100%;\n  padding-left: 4px;\n  padding-right: 4px;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #444444;\n}\n\n.beteiligtelisteclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n}\n\n.beteiligtebuttonclass {\n  width: 100%;\n  height: 58px;\n  border-top: 1px solid #444444;\n}\n\n.bullclass {\n  border-radius: 50%;\n  width: 8px;\n  height: 8px;\n  background: black;\n}\n\n.menubuttonclass {\n  cursor: pointer;\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.bauteildivclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 340px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n\n.bauteilmediumdivclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 280px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n\n.bauteildivsmallclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 50px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturtrennerdivclass {\n  width: 100%;\n  height: 2px;\n  width: 680px;\n  background: #444444;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 73593:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumeditor/pj-gebaeude-raumeditor.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWdlYmFldWRlLXJhdW1lZGl0b3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUU7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUZKOztBQU1BO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQUpGOztBQU9BO0VBRUUsU0FBQTtFQUNBLGtCQUFBO0VBQ0EsMEJBQUE7QUFMRjs7QUFRQTtFQUVFLDhCQUFBO0VBQ0EsK0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtBQU5GIiwiZmlsZSI6InBqLWdlYmFldWRlLXJhdW1lZGl0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDkwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cbiJdfQ== */";

/***/ }),

/***/ 96519:
/*!*************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.component.scss?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.kontaktclass {\n  width: 100%;\n  display: inline-block;\n  z-index: 1;\n}\n\n.kontaktbuttonclass {\n  margin: 2px;\n  border: 1px solid black;\n  border-radius: 4px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n}\n\n.festlegungdivclass {\n  height: 680px;\n  width: 360px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\n.festlegungtopdivclass {\n  height: 50px;\n  width: 360px;\n  position: relative;\n}\n\n.festlegungcontentdivclass {\n  height: 630px;\n  width: 360px;\n  background: black;\n  position: relative;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWtvc3RlbmdydXBwZW4tYXVzd2FobC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBT0E7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FBTEY7O0FBUUE7RUFFRSxTQUFBO0VBQ0Esa0JBQUE7RUFDQSwwQkFBQTtBQU5GOztBQVNBO0VBRUUsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFQRjs7QUFVQTtFQUVFLDhCQUFBO0VBQ0EsK0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7QUFSRjs7QUFXQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0FBVEY7O0FBWUE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtBQVZGOztBQWFBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQVhGOztBQWVBO0VBRUUsV0FBQTtFQUNBLHFCQUFBO0VBQ0EsVUFBQTtBQWJGOztBQWdCQTtFQUVFLFdBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFVBQUE7QUFkRjs7QUFpQkE7RUFFRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBZkY7O0FBbUJBO0VBRUUsWUFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQWpCRjs7QUFvQkE7RUFFRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQUFBO0FBbEJGIiwiZmlsZSI6InBqLWtvc3RlbmdydXBwZW4tYXVzd2FobC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbmZvdGFibGUge1xuXG4gIHRkIHtcblxuICAgIGZvbnQtc2l6ZTogOTAlO1xuICAgIGNvbG9yOiAjNDQ0NDQ0O1xuICB9XG59XG5cblxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjphYnNvbHV0ZTtcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgbGVmdDogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xufVxuXG4ubWVudWZpbHRlcmJ1dHRvbmNsYXNzIHtcblxuICBwYWRkaW5nOiAycHg7XG4gIHBhZGRpbmctcmlnaHQ6IDRweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBiYWNrZ3JvdW5kOiAjN2I2YTU4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi50ZWlsbmVobWVyYnV0dG9uZGl2Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBjb2xvcjogd2hpdGU7XG4gIGhlaWdodDogNjJweDtcbiAgd2lkdGg6IDIwMHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDZweDtcbn1cblxuLnRlaWxuZWhtZXJkaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiA2MnB4O1xuICBtaW4td2lkdGg6IDIwMHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDJweDtcbiAgYmFja2dyb3VuZDogIzQ0NDQ0NDtcbn1cblxuLnRlaWxuZWhtZXJpbm5lcmRpdmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7IC8vIHZlcnRpa2FsXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiA1NHB4O1xuICBtaW4td2lkdGg6IDE5NHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGJhY2tncm91bmQ6IGJsYWNrO1xufVxuXG5cbi5rb250YWt0Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHotaW5kZXg6IDE7XG59XG5cbi5rb250YWt0YnV0dG9uY2xhc3Mge1xuXG4gIG1hcmdpbjogMnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICB3aWR0aDogIDMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcnpvbnRhXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpY2FsXG4gIHotaW5kZXg6IDI7XG59XG5cbi5mZXN0bGVndW5nZGl2Y2xhc3Mge1xuXG4gIGhlaWdodDogNjgwcHg7XG4gIHdpZHRoOiAzNjBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG59XG5cbi5mZXN0bGVndW5ndG9wZGl2Y2xhc3Mge1xuXG4gIGhlaWdodDogNTBweDtcbiAgd2lkdGg6IDM2MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5mZXN0bGVndW5nY29udGVudGRpdmNsYXNzIHtcblxuICBoZWlnaHQ6IDYzMHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIGJhY2tncm91bmQ6IGJsYWNrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG5cblxuXG5cblxuXG4iXX0= */";

/***/ }),

/***/ 21266:
/*!*****************************************************************************************************!*\
  !*** ./src/app/components-page/pj-meinewoche-editor/pj-meinewoche-editor.component.scss?ngResource ***!
  \*****************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.zeitansatzbuttonclass {\n  height: 20px;\n  width: 60px;\n  font-size: 90%;\n  background: #7b6a58;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 3px;\n}\n\n.timepickerclass {\n  position: absolute;\n  width: 226px;\n  height: 182px;\n  top: 70px;\n  background: white;\n  color: black;\n  border: 2px solid #354547;\n  z-index: 10000;\n}\n\n.timepickerfooterclass {\n  width: 100%;\n  height: 30px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 6px;\n  background: #354547;\n}\n\n.projectcircleclass {\n  border-radius: 50px;\n  width: 20px;\n  height: 20px;\n}\n\n.tagaufteilungkeeperdivclass {\n  width: 100%;\n  background: silver;\n  color: white;\n  display: flex;\n  flex-direction: column;\n}\n\n.tagaufteilungeintragdivclass {\n  width: 100%;\n  background: #444444;\n  color: white;\n  padding: 4px;\n  margin-bottom: 1px;\n  overflow: hidden;\n  font-size: 90%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLW1laW5ld29jaGUtZWRpdG9yLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFGSjs7QUFPQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFMRjs7QUFRQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBTkY7O0FBV0E7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBVEY7O0FBWUE7RUFFRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBVkY7O0FBYUE7RUFFRSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsU0FBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0EsY0FBQTtBQVhGOztBQWNBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtBQVpGOztBQWVBO0VBRUUsbUJBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQWJGOztBQWdCQTtFQUVFLFdBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFkRjs7QUFpQkE7RUFFRSxXQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBZkYiLCJmaWxlIjoicGotbWVpbmV3b2NoZS1lZGl0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDkwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG5cbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246YWJzb2x1dGU7XG59XG5cbi5jb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGxlZnQ6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTtcbn1cblxuXG5cbi5jb250ZW50aW5uZXJjbGFzcyB7XG5cbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi56ZWl0YW5zYXR6YnV0dG9uY2xhc3Mge1xuXG4gIGhlaWdodDogMjBweDtcbiAgd2lkdGg6IDYwcHg7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBiYWNrZ3JvdW5kOiAjN2I2YTU4O1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbn1cblxuLnRpbWVwaWNrZXJjbGFzcyB7XG5cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMjI2cHg7XG4gIGhlaWdodDogMTgycHg7XG4gIHRvcDogNzBweDtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGNvbG9yOiBibGFjaztcbiAgYm9yZGVyOiAycHggc29saWQgIzM1NDU0NztcbiAgei1pbmRleDogMTAwMDA7XG59XG5cbi50aW1lcGlja2VyZm9vdGVyY2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDMwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgcGFkZGluZzogNnB4O1xuICBiYWNrZ3JvdW5kOiAjMzU0NTQ3O1xufVxuXG4ucHJvamVjdGNpcmNsZWNsYXNzIHtcblxuICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xufVxuXG4udGFnYXVmdGVpbHVuZ2tlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogc2lsdmVyO1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi50YWdhdWZ0ZWlsdW5nZWludHJhZ2RpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogIzQ0NDQ0NDtcbiAgY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nOiA0cHg7XG4gIG1hcmdpbi1ib3R0b206IDFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZm9udC1zaXplOiA5MCU7XG59XG5cblxuXG5cblxuXG5cblxuXG5cbiJdfQ== */";

/***/ }),

/***/ 44705:
/*!***********************************************************************************************!*\
  !*** ./src/app/components-page/pj-projekt-editor/pj-projekt-editor.component.scss?ngResource ***!
  \***********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".strukturkeeperdiv {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n}\n\n.strukturbauteildiv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n  border-right: 2px solid #354547;\n}\n\n.strukturbauteilupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturbauteilmiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.strukturbauteillowerdiv {\n  height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.strukturgeschossldiv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n  border-right: 2px solid #354547;\n}\n\n.strukturgeschossupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturgeschossmiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.strukturgeschosslowerdiv {\n  height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.strukturraeumediv {\n  height: 100%;\n  width: 33.3%;\n  display: flex;\n  flex-direction: column;\n}\n\n.strukturraumupperdiv {\n  padding-left: 4px;\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturraummiddlediv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  border-top: 1px solid #354547;\n  border-bottom: 1px solid #354547;\n}\n\n.strukturraumlowerdiv {\n  height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.contentleftinnerclass {\n  width: 700px;\n  height: 100%;\n}\n\n.contentrightinnerclass {\n  width: auto;\n  flex-grow: 1;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.projektbeteiligtenheaderclass {\n  width: 100%;\n}\n\n.projektbeteiligtencontentclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n\n.projektbeteiligtencontentframeclass {\n  width: 100%;\n  height: 100%;\n  padding-left: 4px;\n  padding-right: 4px;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #444444;\n}\n\n.beteiligtelisteclass {\n  width: 100%;\n  height: auto;\n  flex-grow: 1;\n}\n\n.beteiligtebuttonclass {\n  width: 100%;\n  height: 58px;\n  border-top: 1px solid #444444;\n}\n\n.bullclass {\n  border-radius: 50%;\n  width: 8px;\n  height: 8px;\n  background: black;\n}\n\n.menubuttonclass {\n  cursor: pointer;\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.bauteildivclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 340px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n\n.bauteilmediumdivclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 280px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n\n.bauteildivsmallclass {\n  min-height: 40px;\n  border-radius: 8px;\n  padding: 4px;\n  width: 50px;\n  margin: 2px;\n  border: 1px solid #444444;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.strukturtrennerdivclass {\n  width: 100%;\n  height: 2px;\n  width: 680px;\n  background: #444444;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 52773:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projekte-auswahl/pj-projekte-auswahl.component.scss?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n\n.emptymessageclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 100px;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.innerkeeperclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left: 3px solid #354547;\n}\n\n.contentdivclass {\n  background: none;\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.listekeeperclass {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.alphabetkeeperclass {\n  width: 44px;\n  height: 100%;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3RlLWF1c3dhaGwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0U7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUhKOztBQU9BO0VBRUUsaUJBQUE7QUFMRjs7QUFRQTtFQUVFLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFORjs7QUFVQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFSRjs7QUFXQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsOEJBQUE7QUFURjs7QUFZQTtFQUVFLGdCQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBVkY7O0FBYUE7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQVhGOztBQWNBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBWkY7O0FBZUE7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7QUFiRiIsImZpbGUiOiJwai1wcm9qZWt0ZS1hdXN3YWhsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDgwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4uZXJnb25hbWV0ZXh0Y2xhc3Mge1xuXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uZW1wdHltZXNzYWdlY2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcbn1cblxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uaW5uZXJrZWVwZXJjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjMzU0NTQ3O1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBiYWNrZ3JvdW5kOiBub25lO1xuICBsZWZ0OiA1MCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTtcbn1cblxuLm1lbnVmaWx0ZXJidXR0b25jbGFzcyB7XG5cbiAgcGFkZGluZzogMnB4O1xuICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZDogIzdiNmE1ODtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG4ubGlzdGVrZWVwZXJjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5hbHBoYWJldGtlZXBlcmNsYXNzIHtcblxuICB3aWR0aDogNDRweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuXG5cblxuIl19 */";

/***/ }),

/***/ 5367:
/*!***************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.scss?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".headerkeeperdiv {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  flex-direction: row;\n}\n\n.headerleftdiv {\n  width: 30%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.headerrightdiv {\n  width: 70%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding-right: 4px;\n}\n\n.infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 0px;\n  --ion-grid-columns: 6;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 2px;\n}\n\n.kontaktclass {\n  width: 100%;\n  display: inline-block;\n  z-index: 1;\n}\n\n.kontaktbuttonclass {\n  margin: 2px;\n  border: 1px solid black;\n  border-radius: 4px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n}\n\n.festlegungdivclass {\n  height: 680px;\n  width: 360px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\n.festlegungtopdivclass {\n  height: 50px;\n  width: 360px;\n  position: relative;\n}\n\n.festlegungcontentdivclass {\n  height: 630px;\n  width: 360px;\n  background: black;\n  position: relative;\n  overflow: auto;\n}\n\n.datestatuskeeperdiv {\n  position: absolute;\n  background: black;\n  z-index: 100;\n  opacity: 1;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  padding: 8px;\n  border: 2px solid #444444;\n  border-radius: 6px;\n  top: 20px;\n  left: 50%;\n  transform: translate(-50%, 0%);\n}\n\n.kwdivclass {\n  border-radius: 50px;\n  height: 38px;\n  background: none;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3RwdW5rdC1kYXRlLWt3LXBpY2tlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFERjs7QUFJQTtFQUVFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7QUFGRjs7QUFLQTtFQUVFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUhGOztBQVNFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFQSjs7QUFZQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFWRjs7QUFhQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBWEY7O0FBY0E7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQVpGOztBQWVBO0VBRUUsOEJBQUE7RUFDQSwrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtBQWJGOztBQWdCQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0FBZEY7O0FBaUJBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsbUJBQUE7QUFmRjs7QUFrQkE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0FBaEJGOztBQW1CQTtFQUVFLHVCQUFBO0VBQ0EsOEJBQUE7RUFDQSxxQkFBQTtBQWpCRjs7QUF3QkE7RUFFRSx1QkFBQTtFQUNBLDhCQUFBO0FBdEJGOztBQXlCQTtFQUVFLFdBQUE7RUFDQSxxQkFBQTtFQUNBLFVBQUE7QUF2QkY7O0FBMEJBO0VBRUUsV0FBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsVUFBQTtBQXhCRjs7QUEyQkE7RUFFRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBekJGOztBQTRCQTtFQUVFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUExQkY7O0FBNkJBO0VBRUUsYUFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQTNCRjs7QUE4QkE7RUFFRSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLFNBQUE7RUFDQSw4QkFBQTtBQTVCRjs7QUErQkE7RUFFRSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUE3QkYiLCJmaWxlIjoicGotcHJvamVrdHB1bmt0LWRhdGUta3ctcGlja2VyLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5oZWFkZXJrZWVwZXJkaXYge1xuXG4gIHdpZHRoOiAgIDEwMCU7XG4gIGhlaWdodDogIDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi5oZWFkZXJsZWZ0ZGl2IHtcblxuICB3aWR0aDogICAgICAzMCU7XG4gIGhlaWdodDogICAgIDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uaGVhZGVycmlnaHRkaXYge1xuXG4gIHdpZHRoOiAgICAgIDcwJTtcbiAgaGVpZ2h0OiAgICAgMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG59XG5cblxuLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA5MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5tZW51ZmlsdGVyYnV0dG9uY2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgcGFkZGluZy1yaWdodDogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLmNvbnRlbnRpbm5lcmNsYXNzIHtcblxuICBib3JkZXItbGVmdDogIDNweCBzb2xpZCAjMzU0NTQ3O1xuICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjMzU0NTQ3O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLnRlaWxuZWhtZXJidXR0b25kaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiA2MnB4O1xuICB3aWR0aDogMjAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogNnB4O1xufVxuXG4udGVpbG5laG1lcmRpdmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDYycHg7XG4gIG1pbi13aWR0aDogMjAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMnB4O1xuICBiYWNrZ3JvdW5kOiAjNDQ0NDQ0O1xufVxuXG4udGVpbG5laG1lcmlubmVyZGl2Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgLy8gdmVydGlrYWxcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDU0cHg7XG4gIG1pbi13aWR0aDogMTk0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG59XG5cbi5tYWluZ3JpZGNsYXNzIHtcblxuICAtLWlvbi1ncmlkLXBhZGRpbmc6ICAgICAgICAwcHg7XG4gIC0taW9uLWdyaWQtY29sdW1uLXBhZGRpbmc6IDBweDtcbiAgLS1pb24tZ3JpZC1jb2x1bW5zOiAgICAgICAgNjtcbn1cblxuaW9uLXNlYXJjaGJhciB7XG5cbn1cblxuLm1haW5ncmlkY2xhc3Mge1xuXG4gIC0taW9uLWdyaWQtcGFkZGluZzogICAgICAgIDBweDtcbiAgLS1pb24tZ3JpZC1jb2x1bW4tcGFkZGluZzogMnB4O1xufVxuXG4ua29udGFrdGNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB6LWluZGV4OiAxO1xufVxuXG4ua29udGFrdGJ1dHRvbmNsYXNzIHtcblxuICBtYXJnaW46IDJweDtcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgd2lkdGg6ICAzMnB4O1xuICBoZWlnaHQ6IDMycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3J6b250YVxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWNhbFxuICB6LWluZGV4OiAyO1xufVxuXG4uZmVzdGxlZ3VuZ2RpdmNsYXNzIHtcblxuICBoZWlnaHQ6IDY4MHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmZlc3RsZWd1bmd0b3BkaXZjbGFzcyB7XG5cbiAgaGVpZ2h0OiA1MHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmZlc3RsZWd1bmdjb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGhlaWdodDogNjMwcHg7XG4gIHdpZHRoOiAzNjBweDtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5kYXRlc3RhdHVza2VlcGVyZGl2IHtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQ6IGJsYWNrO1xuICB6LWluZGV4OiAxMDA7XG4gIG9wYWNpdHk6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgLy8gdmVydGlrYWxcbiAgcGFkZGluZzogOHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCAjNDQ0NDQ0O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHRvcDogIDIwcHg7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCUpO1xufVxuXG4ua3dkaXZjbGFzcyB7XG5cbiAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgaGVpZ2h0OiAzOHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiJdfQ== */";

/***/ }),

/***/ 60136:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.component.scss?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".headerkeeperdiv {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  flex-direction: row;\n}\n\n.headerleftdiv {\n  width: 30%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.headerrightdiv {\n  width: 70%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding-right: 4px;\n}\n\n.infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 0px;\n  --ion-grid-columns: 6;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 2px;\n}\n\n.kontaktclass {\n  width: 100%;\n  display: inline-block;\n  z-index: 1;\n}\n\n.kontaktbuttonclass {\n  margin: 2px;\n  border: 1px solid black;\n  border-radius: 4px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n}\n\n.festlegungdivclass {\n  height: 680px;\n  width: 360px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\n.festlegungtopdivclass {\n  height: 50px;\n  width: 360px;\n  position: relative;\n}\n\n.festlegungcontentdivclass {\n  height: 630px;\n  width: 360px;\n  background: black;\n  position: relative;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3RwdW5rdC1lZGl0b3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtBQUFGOztBQUdBO0VBRUUsVUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtBQURGOztBQUlBO0VBRUUsVUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBRkY7O0FBUUU7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQU5KOztBQVdBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQVRGOztBQVlBO0VBRUUsU0FBQTtFQUNBLGtCQUFBO0VBQ0EsMEJBQUE7QUFWRjs7QUFhQTtFQUVFLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBWEY7O0FBY0E7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBWkY7O0FBZUE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtBQWJGOztBQWdCQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0FBZEY7O0FBaUJBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQWZGOztBQWtCQTtFQUVFLHVCQUFBO0VBQ0EsOEJBQUE7RUFDQSxxQkFBQTtBQWhCRjs7QUF3QkE7RUFFRSx1QkFBQTtFQUNBLDhCQUFBO0FBdEJGOztBQXlCQTtFQUVFLFdBQUE7RUFDQSxxQkFBQTtFQUNBLFVBQUE7QUF2QkY7O0FBMEJBO0VBRUUsV0FBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsVUFBQTtBQXhCRjs7QUEyQkE7RUFFRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBekJGOztBQTZCQTtFQUVFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUEzQkY7O0FBOEJBO0VBRUUsYUFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQTVCRiIsImZpbGUiOiJwai1wcm9qZWt0cHVua3QtZWRpdG9yLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmhlYWRlcmtlZXBlcmRpdiB7XG5cbiAgd2lkdGg6ICAgMTAwJTtcbiAgaGVpZ2h0OiAgNDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbn1cblxuLmhlYWRlcmxlZnRkaXYge1xuXG4gIHdpZHRoOiAgICAgIDMwJTtcbiAgaGVpZ2h0OiAgICAgMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG59XG5cbi5oZWFkZXJyaWdodGRpdiB7XG5cbiAgd2lkdGg6ICAgICAgNzAlO1xuICBoZWlnaHQ6ICAgICAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIHBhZGRpbmctcmlnaHQ6IDRweDtcbn1cblxuXG4uaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDkwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG5cbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246YWJzb2x1dGU7XG59XG5cbi5jb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGxlZnQ6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTtcbn1cblxuLm1lbnVmaWx0ZXJidXR0b25jbGFzcyB7XG5cbiAgcGFkZGluZzogMnB4O1xuICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZDogIzdiNmE1ODtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG4uY29udGVudGlubmVyY2xhc3Mge1xuXG4gIGJvcmRlci1sZWZ0OiAgM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4udGVpbG5laG1lcmJ1dHRvbmRpdmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDYycHg7XG4gIHdpZHRoOiAyMDBweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiA2cHg7XG59XG5cbi50ZWlsbmVobWVyZGl2Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBjb2xvcjogd2hpdGU7XG4gIGhlaWdodDogNjJweDtcbiAgbWluLXdpZHRoOiAyMDBweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiAycHg7XG4gIGJhY2tncm91bmQ6ICM0NDQ0NDQ7XG59XG5cbi50ZWlsbmVobWVyaW5uZXJkaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OyAvLyB2ZXJ0aWthbFxuICBjb2xvcjogd2hpdGU7XG4gIGhlaWdodDogNTRweDtcbiAgbWluLXdpZHRoOiAxOTRweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbn1cblxuLm1haW5ncmlkY2xhc3Mge1xuXG4gIC0taW9uLWdyaWQtcGFkZGluZzogICAgICAgIDBweDtcbiAgLS1pb24tZ3JpZC1jb2x1bW4tcGFkZGluZzogMHB4O1xuICAtLWlvbi1ncmlkLWNvbHVtbnM6ICAgICAgICA2O1xufVxuXG5pb24tc2VhcmNoYmFyIHtcblxufVxuXG5cbi5tYWluZ3JpZGNsYXNzIHtcblxuICAtLWlvbi1ncmlkLXBhZGRpbmc6ICAgICAgICAwcHg7XG4gIC0taW9uLWdyaWQtY29sdW1uLXBhZGRpbmc6IDJweDtcbn1cblxuLmtvbnRha3RjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgei1pbmRleDogMTtcbn1cblxuLmtvbnRha3RidXR0b25jbGFzcyB7XG5cbiAgbWFyZ2luOiAycHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHdpZHRoOiAgMzJweDtcbiAgaGVpZ2h0OiAzMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yem9udGFcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGljYWxcbiAgei1pbmRleDogMjtcbn1cblxuLmZlc3RsZWd1bmdkaXZjbGFzcyB7XG5cbiAgaGVpZ2h0OiA2ODBweDtcbiAgd2lkdGg6IDM2MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbn1cblxuLmZlc3RsZWd1bmd0b3BkaXZjbGFzcyB7XG5cbiAgaGVpZ2h0OiA1MHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmZlc3RsZWd1bmdjb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGhlaWdodDogNjMwcHg7XG4gIHdpZHRoOiAzNjBweDtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cblxuXG5cblxuXG5cbiJdfQ== */";

/***/ }),

/***/ 74813:
/*!*********************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-statusdate-picker/pj-projektpunkt-statusdate-picker.scss?ngResource ***!
  \*********************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".headerkeeperdiv {\n  width: 100%;\n  height: 40px;\n  display: flex;\n  flex-direction: row;\n}\n\n.headerleftdiv {\n  width: 30%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.headerrightdiv {\n  width: 70%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding-right: 4px;\n}\n\n.infotable td {\n  font-size: 90%;\n  color: #444444;\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentdivclass {\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 0px;\n  --ion-grid-columns: 6;\n}\n\n.maingridclass {\n  --ion-grid-padding: 0px;\n  --ion-grid-column-padding: 2px;\n}\n\n.kontaktclass {\n  width: 100%;\n  display: inline-block;\n  z-index: 1;\n}\n\n.kontaktbuttonclass {\n  margin: 2px;\n  border: 1px solid black;\n  border-radius: 4px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n}\n\n.festlegungdivclass {\n  height: 680px;\n  width: 360px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\n.festlegungtopdivclass {\n  height: 50px;\n  width: 360px;\n  position: relative;\n}\n\n.festlegungcontentdivclass {\n  height: 630px;\n  width: 360px;\n  background: black;\n  position: relative;\n  overflow: auto;\n}\n\n.datestatuskeeperdiv {\n  position: absolute;\n  background: black;\n  z-index: 100;\n  opacity: 1;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  padding: 8px;\n  border: 2px solid #444444;\n  border-radius: 6px;\n  top: 20px;\n  left: 50%;\n  transform: translate(-50%, 0%);\n}\n\n.kwdivclass {\n  border-radius: 50px;\n  height: 38px;\n  background: none;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3RwdW5rdC1zdGF0dXNkYXRlLXBpY2tlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFERjs7QUFJQTtFQUVFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7QUFGRjs7QUFLQTtFQUVFLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUhGOztBQVNFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFQSjs7QUFZQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUFWRjs7QUFhQTtFQUVFLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBWEY7O0FBY0E7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQVpGOztBQWVBO0VBRUUsOEJBQUE7RUFDQSwrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtBQWJGOztBQWdCQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0FBZEY7O0FBaUJBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsbUJBQUE7QUFmRjs7QUFrQkE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0FBaEJGOztBQW1CQTtFQUVFLHVCQUFBO0VBQ0EsOEJBQUE7RUFDQSxxQkFBQTtBQWpCRjs7QUF3QkE7RUFFRSx1QkFBQTtFQUNBLDhCQUFBO0FBdEJGOztBQXlCQTtFQUVFLFdBQUE7RUFDQSxxQkFBQTtFQUNBLFVBQUE7QUF2QkY7O0FBMEJBO0VBRUUsV0FBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsVUFBQTtBQXhCRjs7QUEyQkE7RUFFRSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBekJGOztBQTRCQTtFQUVFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUExQkY7O0FBNkJBO0VBRUUsYUFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQTNCRjs7QUE4QkE7RUFFRSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLFNBQUE7RUFDQSw4QkFBQTtBQTVCRjs7QUErQkE7RUFFRSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUE3QkYiLCJmaWxlIjoicGotcHJvamVrdHB1bmt0LXN0YXR1c2RhdGUtcGlja2VyLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5oZWFkZXJrZWVwZXJkaXYge1xuXG4gIHdpZHRoOiAgIDEwMCU7XG4gIGhlaWdodDogIDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi5oZWFkZXJsZWZ0ZGl2IHtcblxuICB3aWR0aDogICAgICAzMCU7XG4gIGhlaWdodDogICAgIDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uaGVhZGVycmlnaHRkaXYge1xuXG4gIHdpZHRoOiAgICAgIDcwJTtcbiAgaGVpZ2h0OiAgICAgMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG59XG5cblxuLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA5MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuXG4ua2VlcGVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5tZW51ZmlsdGVyYnV0dG9uY2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgcGFkZGluZy1yaWdodDogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLmNvbnRlbnRpbm5lcmNsYXNzIHtcblxuICBib3JkZXItbGVmdDogIDNweCBzb2xpZCAjMzU0NTQ3O1xuICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjMzU0NTQ3O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLnRlaWxuZWhtZXJidXR0b25kaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiA2MnB4O1xuICB3aWR0aDogMjAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogNnB4O1xufVxuXG4udGVpbG5laG1lcmRpdmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDYycHg7XG4gIG1pbi13aWR0aDogMjAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMnB4O1xuICBiYWNrZ3JvdW5kOiAjNDQ0NDQ0O1xufVxuXG4udGVpbG5laG1lcmlubmVyZGl2Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgLy8gdmVydGlrYWxcbiAgY29sb3I6IHdoaXRlO1xuICBoZWlnaHQ6IDU0cHg7XG4gIG1pbi13aWR0aDogMTk0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG59XG5cbi5tYWluZ3JpZGNsYXNzIHtcblxuICAtLWlvbi1ncmlkLXBhZGRpbmc6ICAgICAgICAwcHg7XG4gIC0taW9uLWdyaWQtY29sdW1uLXBhZGRpbmc6IDBweDtcbiAgLS1pb24tZ3JpZC1jb2x1bW5zOiAgICAgICAgNjtcbn1cblxuaW9uLXNlYXJjaGJhciB7XG5cbn1cblxuLm1haW5ncmlkY2xhc3Mge1xuXG4gIC0taW9uLWdyaWQtcGFkZGluZzogICAgICAgIDBweDtcbiAgLS1pb24tZ3JpZC1jb2x1bW4tcGFkZGluZzogMnB4O1xufVxuXG4ua29udGFrdGNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB6LWluZGV4OiAxO1xufVxuXG4ua29udGFrdGJ1dHRvbmNsYXNzIHtcblxuICBtYXJnaW46IDJweDtcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgd2lkdGg6ICAzMnB4O1xuICBoZWlnaHQ6IDMycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3J6b250YVxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWNhbFxuICB6LWluZGV4OiAyO1xufVxuXG4uZmVzdGxlZ3VuZ2RpdmNsYXNzIHtcblxuICBoZWlnaHQ6IDY4MHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmZlc3RsZWd1bmd0b3BkaXZjbGFzcyB7XG5cbiAgaGVpZ2h0OiA1MHB4O1xuICB3aWR0aDogMzYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmZlc3RsZWd1bmdjb250ZW50ZGl2Y2xhc3Mge1xuXG4gIGhlaWdodDogNjMwcHg7XG4gIHdpZHRoOiAzNjBweDtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5kYXRlc3RhdHVza2VlcGVyZGl2IHtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQ6IGJsYWNrO1xuICB6LWluZGV4OiAxMDA7XG4gIG9wYWNpdHk6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgLy8gdmVydGlrYWxcbiAgcGFkZGluZzogOHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCAjNDQ0NDQ0O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHRvcDogIDIwcHg7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCUpO1xufVxuXG4ua3dkaXZjbGFzcyB7XG5cbiAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgaGVpZ2h0OiAzOHB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiJdfQ== */";

/***/ }),

/***/ 27237:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-editor/pj-protokoll-editor.component.scss?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".listeheaderclass {\n  border-top: 1px solid #000000;\n  border-left: 1px solid #000000;\n  border-right: 1px solid #000000;\n}\n\n.listeheaderclass td {\n  padding: 4px;\n  border: 1px solid var(--ion-color-schwarz);\n}\n\n.keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.contentdivclass {\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.menubuttonclass {\n  cursor: pointer;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.statusdivclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 90%;\n  flex-wrap: wrap;\n  padding: 6px;\n}\n\n/*\n.statusdivclasshover:hover {\n\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.statusdivclassnohover:hover {\n\n  text-decoration: none;\n  cursor: default;\n}\n\n */\n\n.aufgabedivclass {\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.aufgabedivhoverclass:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.aufgabedivnohoverclass:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.termindatumdivclass {\n  width: 100%;\n  height: 100%;\n  padding: 4px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n}\n\n.termindatumdivclass:hover {\n  text-decoration: underline;\n}\n\n.savestatusdivclass {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.contentkeeperdiv {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  overflow: auto;\n  z-index: 10;\n}\n\n.datestatuskeeperdiv {\n  width: 640px;\n  height: 430px;\n  position: absolute;\n  z-index: 100;\n  opacity: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.zustaendigdivemptyclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: white;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivemptyclasshover:hover {\n  text-decoration: underline;\n  color: black;\n  cursor: pointer;\n}\n\n.zustaendigdivemptyclassnohover:hover {\n  text-decoration: none;\n  color: white;\n  cursor: none;\n}\n\n.zustaendigdivfillclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: black;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivfillclasshover:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.zustaendigdivfillclassnohover:hover {\n  text-decoration: none;\n  cursor: none;\n}\n\n.addeintragdivclass {\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.framediv {\n  width: 100%;\n  display: inline-block;\n  padding: 4px;\n}\n\n.dropzone {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  font-weight: normal;\n  font-size: 100%;\n  height: 60px;\n  border: 2px dashed #f16624;\n  border-radius: 5px;\n  background: #444444;\n  color: white;\n}\n\n.dropzone.hovering {\n  border: 2px solid #f16624;\n  color: #dadada !important;\n}\n\n.dropzone .file-label {\n  font-size: 1.2em;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 8671:
/*!*************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.component.scss?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.contentinnerclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n\n.contentdivclass {\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.menubuttonclass {\n  cursor: pointer;\n}\n\n.teilnehmerbuttondivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  width: 200px;\n  border-radius: 4px;\n  padding: 6px;\n}\n\n.teilnehmerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  height: 62px;\n  min-width: 200px;\n  border-radius: 4px;\n  padding: 2px;\n  background: #444444;\n}\n\n.teilnehmerinnerdivclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  color: white;\n  height: 54px;\n  min-width: 194px;\n  border-radius: 4px;\n  background: black;\n}\n\n.statusdivclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 90%;\n  flex-wrap: wrap;\n  padding: 6px;\n}\n\n.statusdivclasshover:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.statusdivclassnohover:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.aufgabedivclass {\n  padding: 4px;\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 3px;\n}\n\n.aufgabedivhoverclass:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.aufgabedivnohoverclass:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.termindatumdivclass {\n  width: 100%;\n  height: 100%;\n  padding: 4px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n}\n\n.termindatumdivclass:hover {\n  text-decoration: underline;\n}\n\n.savestatusdivclass {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.contentkeeperdiv {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  overflow: auto;\n  z-index: 10;\n}\n\n.datestatuskeeperdiv {\n  width: 640px;\n  height: 430px;\n  position: absolute;\n  z-index: 100;\n  opacity: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.zustaendigdivemptyclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: white;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivemptyclasshover:hover {\n  text-decoration: underline;\n  color: black;\n  cursor: pointer;\n}\n\n.zustaendigdivemptyclassnohover:hover {\n  text-decoration: none;\n  color: white;\n  cursor: none;\n}\n\n.zustaendigdivfillclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: black;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivfillclasshover:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n\n.zustaendigdivfillclassnohover:hover {\n  text-decoration: none;\n  cursor: none;\n}\n\n.addeintragdivclass {\n  min-height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.framediv {\n  width: 100%;\n  display: inline-block;\n  padding: 4px;\n}\n\n.dropzone {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  font-weight: normal;\n  font-size: 100%;\n  height: 60px;\n  border: 2px dashed #f16624;\n  border-radius: 5px;\n  background: #444444;\n  color: white;\n}\n\n.dropzone.hovering {\n  border: 2px solid #f16624;\n  color: #dadada !important;\n}\n\n.dropzone .file-label {\n  font-size: 1.2em;\n}\n/*# sourceMappingURL=data:application/json;base64, */";

/***/ }),

/***/ 64829:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.scss?ngResource ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhYnN0YW5kLWVsZW1lbnQtZml4ZWQuY29tcG9uZW50LnNjc3MifQ== */";

/***/ }),

/***/ 49674:
/*!********************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".alphabetclass {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.alphabetitem {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n  color: white;\n  font-size: 80%;\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFscGhhYmV0LXJlbGF0aXZlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLHVCQUFBO0FBQUY7O0FBR0E7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLGVBQUE7QUFERiIsImZpbGUiOiJhbHBoYWJldC1yZWxhdGl2ZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmFscGhhYmV0Y2xhc3Mge1xuXG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG59XG5cbi5hbHBoYWJldGl0ZW0ge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICAgICAvLyB2ZXJ0aWNhbFxuICBmbGV4LWdyb3c6IDE7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgZm9udC1zaXplOiA4MCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuIl19 */";

/***/ }),

/***/ 21006:
/*!**************************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.scss?ngResource ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".alphabetclass {\n  position: absolute;\n  background: #ffffff;\n  right: 0px;\n  width: 12vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.alphabetitem {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n  color: white;\n  font-size: 80%;\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFscGhhYmV0LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsVUFBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtBQUFGOztBQUdBO0VBRUUsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7RUFDQSxlQUFBO0FBREYiLCJmaWxlIjoiYWxwaGFiZXQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hbHBoYWJldGNsYXNzIHtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XG4gIHJpZ2h0OiAwcHg7XG4gIHdpZHRoOiAxMnZ3O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxufVxuXG4uYWxwaGFiZXRpdGVtIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAgICAgLy8gdmVydGljYWxcbiAgZmxleC1ncm93OiAxO1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogODAlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbiJdfQ== */";

/***/ }),

/***/ 52514:
/*!**************************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.scss?ngResource ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.innerkeeperclass {\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n}\n\n.contentdivclass {\n  background: blue;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1c3dhaGwtZGlhbG9nLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFFRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FBREY7O0FBSUE7RUFFRSxjQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSw4QkFBQTtFQUNBLCtCQUFBO0FBRkY7O0FBS0E7RUFFRSxnQkFBQTtFQUNBLFNBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBSEY7O0FBTUE7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUpGIiwiZmlsZSI6ImF1c3dhaGwtZGlhbG9nLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246YWJzb2x1dGU7XG59XG5cbi5pbm5lcmtlZXBlcmNsYXNzIHtcblxuICBvdmVyZmxvdzogYXV0bztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYm9yZGVyLWxlZnQ6ICAzcHggc29saWQgIzM1NDU0NztcbiAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzM1NDU0Nztcbn1cblxuLmNvbnRlbnRkaXZjbGFzcyB7XG5cbiAgYmFja2dyb3VuZDogYmx1ZTtcbiAgbGVmdDogNTAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpO1xufVxuXG4ubWVudWZpbHRlcmJ1dHRvbmNsYXNzIHtcblxuICBwYWRkaW5nOiAycHg7XG4gIHBhZGRpbmctcmlnaHQ6IDRweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBiYWNrZ3JvdW5kOiAjN2I2YTU4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cblxuIl19 */";

/***/ }),

/***/ 15904:
/*!********************************************************************************************!*\
  !*** ./src/app/components/button-value-date-small/button-value-date-small.scss?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".buttonclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: auto;\n  border-radius: 4px;\n  padding: 4px;\n}\n\n.infokeeperclass {\n  color: white;\n  height: auto;\n  width: 100%;\n  padding: 2px;\n  border-radius: 4px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nion-datetime {\n  height: auto;\n  width: auto;\n  max-width: 350px;\n  --background: #354547;\n}\n\nion-modal {\n  --width: 290px;\n  --height: 382px;\n  --border-radius: 8px;\n}\n\nion-modal ion-datetime {\n  height: 382px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi12YWx1ZS1kYXRlLXNtYWxsLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0FBREY7O0FBTUE7RUFFRSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFFQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUxGOztBQVVBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLHFCQUFBO0FBUEY7O0FBVUE7RUFDRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLG9CQUFBO0FBUEY7O0FBVUE7RUFDRSxhQUFBO0FBUEYiLCJmaWxlIjoiYnV0dG9uLXZhbHVlLWRhdGUtc21hbGwuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmJ1dHRvbmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDRweDtcbn1cblxuXG5cbi5pbmZva2VlcGVyY2xhc3Mge1xuXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMnB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgICAgIC8vIHZlcnRpY2FsXG5cblxufVxuXG5pb24tZGF0ZXRpbWUge1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAgYXV0bztcbiAgbWF4LXdpZHRoOiAzNTBweDtcbiAgLS1iYWNrZ3JvdW5kOiAjMzU0NTQ3O1xufVxuXG5pb24tbW9kYWwge1xuICAtLXdpZHRoOiAyOTBweDtcbiAgLS1oZWlnaHQ6IDM4MnB4O1xuICAtLWJvcmRlci1yYWRpdXM6IDhweDtcbn1cblxuaW9uLW1vZGFsIGlvbi1kYXRldGltZSB7XG4gIGhlaWdodDogMzgycHg7XG59XG4iXX0= */";

/***/ }),

/***/ 29522:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".buttonclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 44px;\n  border-radius: 4px;\n  padding: 2px;\n  display: flex;\n}\n\n.buttontextclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  min-height: 44px;\n  width: 100%;\n  height: 100%;\n}\n\n.outerinfokeeperclass {\n  height: 100%;\n  width: 60%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.infokeeperclass {\n  color: white;\n  height: 30px;\n  width: 100%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 4px;\n}\n\nion-datetime {\n  height: auto;\n  width: auto;\n  max-width: 350px;\n  --background: #354547;\n}\n\nion-modal {\n  --width: 290px;\n  --height: 382px;\n  --border-radius: 8px;\n}\n\nion-modal ion-datetime {\n  height: 382px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi12YWx1ZS1kYXRlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtBQURGOztBQUlBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FBRkY7O0FBS0E7RUFFRSxZQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUhGOztBQU9BO0VBRUUsWUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFMRjs7QUFRQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxxQkFBQTtBQUxGOztBQVFBO0VBQ0UsY0FBQTtFQUNBLGVBQUE7RUFDQSxvQkFBQTtBQUxGOztBQVFBO0VBQ0UsYUFBQTtBQUxGIiwiZmlsZSI6ImJ1dHRvbi12YWx1ZS1kYXRlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5idXR0b25jbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDRweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5idXR0b250ZXh0Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWNhbFxuICBtaW4taGVpZ2h0OiA0NHB4O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4ub3V0ZXJpbmZva2VlcGVyY2xhc3Mge1xuXG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDYwJTtcbiAgcGFkZGluZzogMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuXG59XG5cbi5pbmZva2VlcGVyY2xhc3Mge1xuXG4gIGNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiAzMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAgICAgLy8gdmVydGljYWxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG5pb24tZGF0ZXRpbWUge1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAgYXV0bztcbiAgbWF4LXdpZHRoOiAzNTBweDtcbiAgLS1iYWNrZ3JvdW5kOiAjMzU0NTQ3O1xufVxuXG5pb24tbW9kYWwge1xuICAtLXdpZHRoOiAyOTBweDtcbiAgLS1oZWlnaHQ6IDM4MnB4O1xuICAtLWJvcmRlci1yYWRpdXM6IDhweDtcbn1cblxuaW9uLW1vZGFsIGlvbi1kYXRldGltZSB7XG4gIGhlaWdodDogMzgycHg7XG59XG4iXX0= */";

/***/ }),

/***/ 74932:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-time/button-value-time.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".buttonclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 44px;\n  border-radius: 4px;\n  padding: 2px;\n  display: flex;\n}\n\n.buttontextclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  min-height: 44px;\n  width: 100%;\n  height: 100%;\n}\n\n.outerinfokeeperclass {\n  height: 100%;\n  width: 60%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.infokeeperclass {\n  color: white;\n  height: 30px;\n  width: 100%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 4px;\n}\n\nion-datetime {\n  height: auto;\n  width: auto;\n  max-width: 350px;\n}\n\nion-modal {\n  --width: 260px;\n  --height: 260px;\n  --border-radius: 8px;\n}\n\nion-modal ion-datetime {\n  height: 260px;\n}\n\n.cancelbuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 135px;\n}\n\n.okbuttonclass {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  width: 135px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi12YWx1ZS10aW1lLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtBQUFGOztBQUdBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FBREY7O0FBSUE7RUFFRSxZQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUZGOztBQUtBO0VBRUUsWUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFIRjs7QUFNQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7QUFIRjs7QUFNQTtFQUNFLGNBQUE7RUFDQSxlQUFBO0VBQ0Esb0JBQUE7QUFIRjs7QUFNQTtFQUNFLGFBQUE7QUFIRjs7QUFNQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUpGOztBQU9BO0VBRUUsYUFBQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0FBTEYiLCJmaWxlIjoiYnV0dG9uLXZhbHVlLXRpbWUuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5idXR0b25jbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDRweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBwYWRkaW5nOiAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5idXR0b250ZXh0Y2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWNhbFxuICBtaW4taGVpZ2h0OiA0NHB4O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4ub3V0ZXJpbmZva2VlcGVyY2xhc3Mge1xuXG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDYwJTtcbiAgcGFkZGluZzogMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uaW5mb2tlZXBlcmNsYXNzIHtcblxuICBjb2xvcjogd2hpdGU7XG4gIGhlaWdodDogMzBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDJweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgICAgIC8vIHZlcnRpY2FsXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuaW9uLWRhdGV0aW1lIHtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogIGF1dG87XG4gIG1heC13aWR0aDogMzUwcHg7XG59XG5cbmlvbi1tb2RhbCB7XG4gIC0td2lkdGg6ICAyNjBweDtcbiAgLS1oZWlnaHQ6IDI2MHB4O1xuICAtLWJvcmRlci1yYWRpdXM6IDhweDtcbn1cblxuaW9uLW1vZGFsIGlvbi1kYXRldGltZSB7XG4gIGhlaWdodDogMjYwcHg7XG59XG5cbi5jYW5jZWxidXR0b25jbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIHdpZHRoOiAxMzVweDtcbn1cblxuLm9rYnV0dG9uY2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgd2lkdGg6IDEzNXB4O1xufVxuIl19 */";

/***/ }),

/***/ 25203:
/*!**********************************************************************!*\
  !*** ./src/app/components/button-value/button-value.scss?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".buttonclass {\n  position: relative;\n  width: 100%;\n  height: 44px;\n  border-radius: 4px;\n  padding: 2px;\n  display: flex;\n}\n\n.buttontextclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  min-height: 8px;\n  width: 100%;\n  height: 100%;\n}\n\n.outerinfokeeperclass {\n  height: 100%;\n  width: 60%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.infokeeperclass {\n  color: white;\n  height: 34px;\n  width: 100%;\n  padding: 2px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 4px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1dHRvbi12YWx1ZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBRUUsa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7QUFERjs7QUFJQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FBRkY7O0FBTUE7RUFFRSxZQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUpGOztBQVNBO0VBRUUsWUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFFQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFSRiIsImZpbGUiOiJidXR0b24tdmFsdWUuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmJ1dHRvbmNsYXNzIHtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQ0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xufVxuXG4uYnV0dG9udGV4dGNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGljYWxcbiAgbWluLWhlaWdodDogOHB4O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG5cbi5vdXRlcmluZm9rZWVwZXJjbGFzcyB7XG5cbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogNjAlO1xuICBwYWRkaW5nOiAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG5cbn1cblxuXG4uaW5mb2tlZXBlcmNsYXNzIHtcblxuICBjb2xvcjogd2hpdGU7XG4gIGhlaWdodDogMzRweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDJweDtcbiAgZGlzcGxheTogZmxleDtcbiAgLy8gYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICAgICAvLyB2ZXJ0aWNhbFxuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cblxuXG5cblxuIl19 */";

/***/ }),

/***/ 26778:
/*!**********************************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  padding: 2px;\n  position: relative;\n  width: 24px;\n  height: 24px;\n  border: 2px solid gray;\n  border-radius: 4px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrYm94LWNsb24uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQURGIiwiZmlsZSI6ImNoZWNrYm94LWNsb24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgcGFkZGluZzogMnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkIGdyYXk7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbn1cblxuXG5cbiJdfQ== */";

/***/ }),

/***/ 47957:
/*!********************************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.scss?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbnB1dC1jbG9uZS1rZWVwZXIuY29tcG9uZW50LnNjc3MifQ== */";

/***/ }),

/***/ 91449:
/*!******************************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.scss?ngResource ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".framedivclass {\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n\nion-label {\n  color: black;\n}\n\nion-input {\n  border: none;\n  --padding-bottom: 0px;\n  --padding-end: 0px;\n  --padding-start: 0px;\n  --padding-top: 0px;\n  --color: black;\n}\n\nion-textarea {\n  margin-top: 0px;\n  border: none;\n  --padding-bottom: 0px;\n  --padding-end: 0px;\n  --padding-start: 0px;\n  --padding-top: 0px;\n  --color: black;\n}\n\n.uppercellclass {\n  font-size: 80%;\n  color: gray;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-top: 4px;\n  padding-bottom: 2px;\n}\n\n.lowercellclass {\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-top: 0px;\n  padding-bottom: 4px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LWNsb25lLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsV0FBQTtFQUNBLGFBQUE7RUFDQSwyQkFBQTtFQUNBLHVCQUFBO0FBQUY7O0FBSUE7RUFFRSxZQUFBO0FBRkY7O0FBS0E7RUFFRSxZQUFBO0VBQ0EscUJBQUE7RUFDQSxrQkFBQTtFQUNBLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQUFBO0FBSEY7O0FBTUE7RUFFRSxlQUFBO0VBQ0EsWUFBQTtFQUNBLHFCQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBQUpGOztBQU9BO0VBRUUsY0FBQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtBQUxGOztBQVNBO0VBRUUsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUFQRiIsImZpbGUiOiJpbnB1dC1jbG9uZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mcmFtZWRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OyAvLyB2ZXJ0aWthbFxuXG59XG5cbmlvbi1sYWJlbCB7XG5cbiAgY29sb3I6IGJsYWNrO1xufVxuXG5pb24taW5wdXQge1xuXG4gIGJvcmRlcjogbm9uZTtcbiAgLS1wYWRkaW5nLWJvdHRvbTogMHB4O1xuICAtLXBhZGRpbmctZW5kOiAgICAwcHg7XG4gIC0tcGFkZGluZy1zdGFydDogIDBweDtcbiAgLS1wYWRkaW5nLXRvcDogICAgMHB4O1xuICAtLWNvbG9yOiBibGFjaztcbn1cblxuaW9uLXRleHRhcmVhIHtcblxuICBtYXJnaW4tdG9wOiAwcHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgLS1wYWRkaW5nLWJvdHRvbTogMHB4O1xuICAtLXBhZGRpbmctZW5kOiAgICAwcHg7XG4gIC0tcGFkZGluZy1zdGFydDogIDBweDtcbiAgLS1wYWRkaW5nLXRvcDogICAgMHB4O1xuICAtLWNvbG9yOiBibGFjaztcbn1cblxuLnVwcGVyY2VsbGNsYXNzIHtcblxuICBmb250LXNpemU6ICAgICAgODAlO1xuICBjb2xvcjogICAgICAgICAgZ3JheTtcbiAgcGFkZGluZy1sZWZ0OiAgIDRweDtcbiAgcGFkZGluZy1yaWdodDogIDRweDtcbiAgcGFkZGluZy10b3A6ICAgIDRweDtcbiAgcGFkZGluZy1ib3R0b206IDJweDtcblxuXG59XG4ubG93ZXJjZWxsY2xhc3Mge1xuXG4gIHBhZGRpbmctbGVmdDogICA0cHg7XG4gIHBhZGRpbmctcmlnaHQ6ICA0cHg7XG4gIHBhZGRpbmctdG9wOiAgICAwcHg7XG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XG59XG5cblxuIl19 */";

/***/ }),

/***/ 31518:
/*!********************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.scss?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperclass {\n  background: #354547;\n  color: white;\n  width: 100%;\n  min-height: 40px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtZm9vdGVyLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EseUJBQUE7QUFBRiIsImZpbGUiOiJwYWdlLWZvb3Rlci5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmtlZXBlcmNsYXNzIHtcblxuICBiYWNrZ3JvdW5kOiAjMzU0NTQ3O1xuICBjb2xvcjogd2hpdGU7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiA0MHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7IC8vIGhvcml6b250YWxcbn1cblxuIl19 */";

/***/ }),

/***/ 54783:
/*!**********************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  background: #354547;\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtaGVhZGVyLWNlbnRlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsV0FBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSwyQkFBQTtBQUFGIiwiZmlsZSI6InBhZ2UtaGVhZGVyLWNlbnRlci5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogIzM1NDU0NztcbiAgbWluLWhlaWdodDogNTJweDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG59XG5cbiJdfQ== */";

/***/ }),

/***/ 77703:
/*!****************************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.scss?ngResource ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".menubuttonclass {\n  cursor: pointer;\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n\n.trennertdclass {\n  width: 30px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\nion-searchbar {\n  width: 300px;\n  height: 50px;\n  --border-radius: none;\n  --box-shadow: none;\n  --background: black;\n}\n\n.menubuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n\n.buttonclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  min-height: 44px;\n  height: 100%;\n  padding: 2px;\n  border: 1px solid white;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.statusvaianteclass {\n  padding: 6px;\n  border-radius: 3px;\n  width: auto;\n  white-space: nowrap;\n  color: white;\n  font-size: 80%;\n}\n\n.wocheheaderdivclass {\n  background: #354547;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtaGVhZGVyLW1lbnUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFFRSxlQUFBO0FBREY7O0FBSUE7RUFFRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUZGOztBQUtBO0VBRUUsV0FBQTtBQUhGOztBQU1BO0VBRUUsVUFBQTtFQUNBLGdCQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FBSkY7O0FBT0E7RUFFRSxZQUFBO0VBQ0EsWUFBQTtFQUNBLHFCQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtBQUxGOztBQVFBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0FBTkY7O0FBU0E7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7QUFQRjs7QUFVQTtFQUVFLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0FBUkY7O0FBVUE7RUFFRSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQVJGIiwiZmlsZSI6InBhZ2UtaGVhZGVyLW1lbnUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi5tZW51YnV0dG9uY2xhc3Mge1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLm1lbnVmaWx0ZXJidXR0b25jbGFzcyB7XG5cbiAgcGFkZGluZzogMnB4O1xuICBwYWRkaW5nLXJpZ2h0OiA0cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZDogIzdiNmE1ODtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG4udHJlbm5lcnRkY2xhc3Mge1xuXG4gIHdpZHRoOiAzMHB4O1xufVxuXG4udHJlbm5lcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMXB4O1xuICBtaW4taGVpZ2h0OiAzMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQ6IHNpbHZlcjtcbn1cblxuaW9uLXNlYXJjaGJhciB7XG5cbiAgd2lkdGg6IDMwMHB4O1xuICBoZWlnaHQ6IDUwcHg7XG4gIC0tYm9yZGVyLXJhZGl1czogbm9uZTtcbiAgLS1ib3gtc2hhZG93OiBub25lO1xuICAtLWJhY2tncm91bmQ6IGJsYWNrO1xufVxuXG4ubWVudWJ1dHRvbmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDUwcHg7XG4gIHBhZGRpbmc6IDJweDtcbn1cblxuLmJ1dHRvbmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogNDRweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiAycHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnN0YXR1c3ZhaWFudGVjbGFzcyB7XG5cbiAgcGFkZGluZzogNnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHdpZHRoOiBhdXRvO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuLndvY2hlaGVhZGVyZGl2Y2xhc3Mge1xuXG4gIGJhY2tncm91bmQ6ICMzNTQ1NDc7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgLy8gZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbiJdfQ== */";

/***/ }),

/***/ 94196:
/*!********************************************************************!*\
  !*** ./src/app/components/page-header/page-header.scss?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-progress-bar {\n  --background: #444444;\n  --progress-background: #c7d304;\n}\n\n.keeperdivclass {\n  width: 100%;\n  background: #354547;\n  min-height: 52px;\n  /*\n  display: flex;\n  align-items: center; // vertikal\n  justify-content: flex-start; // horizontal\n\n   */\n}\n\n.loadingdivclass {\n  position: absolute;\n  width: 400px;\n  height: 300px;\n  z-index: 10000;\n  top: 200px;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n\n.headerdivclass {\n  background: #354547;\n  width: 100%;\n  height: 30px;\n  padding: 4px;\n  color: white;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.contentdivclass {\n  border-left: 3px solid #354547;\n  border-right: 3px solid #354547;\n  background: white;\n  width: 100%;\n  height: 120px;\n  padding: 6px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtaGVhZGVyLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxxQkFBQTtFQUNBLDhCQUFBO0FBQ0Y7O0FBRUE7RUFFRSxXQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBOzs7OztJQUFBO0FBS0Y7O0FBR0E7RUFFRSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsY0FBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0VBQ0EsNkJBQUE7QUFERjs7QUFJQTtFQUVFLG1CQUFBO0VBQ0EsV0FBQTtFQUFhLFlBQUE7RUFDYixZQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0FBREY7O0FBSUE7RUFFRSw4QkFBQTtFQUNBLCtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxXQUFBO0VBQ0EsYUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUZGIiwiZmlsZSI6InBhZ2UtaGVhZGVyLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tcHJvZ3Jlc3MtYmFyIHtcbiAgLS1iYWNrZ3JvdW5kOiAjNDQ0NDQ0O1xuICAtLXByb2dyZXNzLWJhY2tncm91bmQ6ICNjN2QzMDQ7XG59XG5cbi5rZWVwZXJkaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICMzNTQ1NDc7XG4gIG1pbi1oZWlnaHQ6IDUycHg7XG4gIC8qXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuXG4gICAqL1xufVxuXG4ubG9hZGluZ2RpdmNsYXNzIHtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiA0MDBweDtcbiAgaGVpZ2h0OiAzMDBweDtcbiAgei1pbmRleDogMTAwMDA7XG4gIHRvcDogMjAwcHg7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XG59XG5cbi5oZWFkZXJkaXZjbGFzcyB7XG5cbiAgYmFja2dyb3VuZDogIzM1NDU0NztcbiAgd2lkdGg6IDEwMCU7IGhlaWdodDogMzBweDtcbiAgcGFkZGluZzogNHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBib3JkZXItbGVmdDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICMzNTQ1NDc7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMjBweDtcbiAgcGFkZGluZzogNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4iXX0= */";

/***/ }),

/***/ 32206:
/*!******************************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.scss?ngResource ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".keeperdivclass {\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  z-index: 1000;\n}\n\n.contentdivclass {\n  background: blue;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%);\n}\n\n.menufilterbuttonclass {\n  padding: 2px;\n  padding-right: 4px;\n  cursor: pointer;\n  background: #7b6a58;\n  border-radius: 4px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UtbW9kYWwta2VlcGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSw4QkFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtBQURGOztBQUlBO0VBRUUsZ0JBQUE7RUFDQSxTQUFBO0VBQ0Esa0JBQUE7RUFDQSwwQkFBQTtBQUZGOztBQUtBO0VBRUUsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFIRiIsImZpbGUiOiJwYWdlLW1vZGFsLWtlZXBlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmtlZXBlcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XG4gIHBvc2l0aW9uOmFic29sdXRlO1xuICB6LWluZGV4OiAxMDAwO1xufVxuXG4uY29udGVudGRpdmNsYXNzIHtcblxuICBiYWNrZ3JvdW5kOiBibHVlO1xuICBsZWZ0OiA1MCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSk7XG59XG5cbi5tZW51ZmlsdGVyYnV0dG9uY2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgcGFkZGluZy1yaWdodDogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cbiJdfQ== */";

/***/ }),

/***/ 33720:
/*!************************************************************************!*\
  !*** ./src/app/components/pj-datepicker/pj-datepicker.scss?ngResource ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".datumdivclass {\n  padding: 4px;\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 3px;\n  font-size: 90%;\n  color: black;\n}\n\n.smalldatumclass {\n  cursor: pointer;\n  font-size: 90%;\n  color: black;\n}\n\n.smalldatumclass:hover {\n  text-decoration: underline;\n}\n\nion-datetime {\n  height: auto;\n  width: auto;\n  max-width: 350px;\n}\n\nion-modal {\n  --width: 290px;\n  --height: 382px;\n  --border-radius: 8px;\n}\n\nion-modal ion-datetime {\n  height: 382px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWRhdGVwaWNrZXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUVFLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtBQURGOztBQUlBO0VBRUUsZUFBQTtFQUNBLGNBQUE7RUFDQSxZQUFBO0FBRkY7O0FBS0E7RUFFRSwwQkFBQTtBQUhGOztBQVFBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBQUxGOztBQVFBO0VBQ0UsY0FBQTtFQUNBLGVBQUE7RUFDQSxvQkFBQTtBQUxGOztBQVFBO0VBQ0UsYUFBQTtBQUxGIiwiZmlsZSI6InBqLWRhdGVwaWNrZXIuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmRhdHVtZGl2Y2xhc3Mge1xuXG4gIHBhZGRpbmc6IDRweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDM2cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBjb2xvcjogYmxhY2s7XG59XG5cbi5zbWFsbGRhdHVtY2xhc3Mge1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1zaXplOiA5MCU7XG4gIGNvbG9yOiBibGFjaztcbn1cblxuLnNtYWxsZGF0dW1jbGFzczpob3ZlciB7XG5cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cblxuXG5pb24tZGF0ZXRpbWUge1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAgYXV0bztcbiAgbWF4LXdpZHRoOiAzNTBweDtcbn1cblxuaW9uLW1vZGFsIHtcbiAgLS13aWR0aDogMjkwcHg7XG4gIC0taGVpZ2h0OiAzODJweDtcbiAgLS1ib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbmlvbi1tb2RhbCBpb24tZGF0ZXRpbWUge1xuICBoZWlnaHQ6IDM4MnB4O1xufVxuIl19 */";

/***/ }),

/***/ 11303:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/pj-projektpunkteliste/pj-projektpunkteliste.component.scss?ngResource ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-progress-bar {\n  --background: #444444;\n  --progress-background: #c7d304;\n}\n\n.nobordertitelbuttonclass {\n  border-left-style: hidden !important;\n  border-right-style: hidden !important;\n  border-top-style: hidden !important;\n  color: #c7d304;\n  font-size: 120%;\n  font-weight: bold;\n}\n\n.nobordereintragbuttonclass {\n  border-left-style: hidden !important;\n  border-right-style: hidden !important;\n  border-bottom-style: hidden !important;\n}\n\n.leerdivclass {\n  width: 100%;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 120%;\n  font-weight: bold;\n}\n\n.statusdivclass {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 90%;\n  flex-wrap: wrap;\n  padding: 4px;\n  cursor: pointer;\n}\n\n.statusdivclass:hover {\n  text-decoration: underline;\n}\n\n.aufgabedivclass {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 3px;\n  font-size: 90%;\n  color: black;\n}\n\n.aufgabedivclass:hover {\n  text-decoration: underline;\n}\n\n.bemerkungdivclass {\n  padding: 4px;\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 3px;\n  font-size: 90%;\n}\n\n.bemerkungdivclass:hover {\n  text-decoration: underline;\n}\n\n.bemerkungspanclass {\n  font-size: 90%;\n  cursor: pointer;\n}\n\n.bemerkungspanclass:hover {\n  text-decoration: underline;\n}\n\n.startdatumdivclass {\n  padding: 4px;\n  width: 100%;\n  min-height: 36px;\n  height: 100%;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 3px;\n  font-size: 90%;\n  color: black;\n}\n\n.endedatumdivclass {\n  width: 100%;\n  min-height: 30px;\n  height: 100%;\n  padding: 4px;\n  display: flex;\n  cursor: pointer;\n  font-size: 90%;\n  justify-content: center;\n  align-items: center;\n}\n\n.endtagedivclass {\n  width: 100%;\n  min-height: 30px;\n  height: 100%;\n  padding: 4px;\n  display: flex;\n  cursor: pointer;\n  font-size: 90%;\n  justify-content: center;\n  align-items: center;\n}\n\n.protokollmarkedivclass {\n  padding: 2px;\n  border-radius: 3px;\n  font-size: 80%;\n  font-weight: bold;\n  color: white;\n  cursor: pointer;\n  display: flex;\n  height: 100%;\n  width: 30px;\n  justify-content: center;\n  align-items: center;\n}\n\n.addcicleclass {\n  border-radius: 50%;\n  width: 26px;\n  height: 26px;\n  background: #c7d304;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/*\n.addbuttondiv {\n\n  padding: 4px;\n  border-radius: 3px;\n  font-size: 90%;\n  color: white;\n  width: 140px;\n  display: flex;\n  background: green;\n  cursor: pointer;\n  justify-content: center; // horizontal\n  align-items: center; // vertikal\n}\n\n */\n\n.zustaendigdivemptyclass {\n  width: 50px;\n  height: 18px;\n  border-radius: 3px;\n  color: white;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #7b6a58;\n  color: white;\n  cursor: pointer;\n}\n\n.zustaendigdivfillclass {\n  width: 100%;\n  height: 100%;\n  min-height: 30px;\n  color: black;\n  font-size: 90%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.zustaendigdivfillclass:hover {\n  text-decoration: underline;\n  color: black;\n  font-size: 90%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3RwdW5rdGVsaXN0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHFCQUFBO0VBQ0EsOEJBQUE7QUFDRjs7QUFFQTtFQUVFLG9DQUFBO0VBQ0EscUNBQUE7RUFDQSxtQ0FBQTtFQUNBLGNBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFHQTtFQUVFLG9DQUFBO0VBQ0EscUNBQUE7RUFDQSxzQ0FBQTtBQURGOztBQUtBO0VBRUUsV0FBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtBQUhGOztBQU1BO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0FBSkY7O0FBT0E7RUFFRSwwQkFBQTtBQUxGOztBQVFBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7RUFDQSxZQUFBO0FBTkY7O0FBU0E7RUFFRSwwQkFBQTtBQVBGOztBQVVBO0VBRUUsWUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7QUFSRjs7QUFXQTtFQUVFLDBCQUFBO0FBVEY7O0FBWUE7RUFFRSxjQUFBO0VBQ0EsZUFBQTtBQVZGOztBQWFBO0VBRUUsMEJBQUE7QUFYRjs7QUFjQTtFQUVFLFlBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtBQVpGOztBQWVBO0VBRUUsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBYkY7O0FBZ0JBO0VBRUUsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBZEY7O0FBa0JBO0VBRUUsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLGVBQUE7RUFDQSxhQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBaEJGOztBQW1CQTtFQUVFLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBakJGOztBQW9CQTs7Ozs7Ozs7Ozs7Ozs7O0VBQUE7O0FBaUJBO0VBRUUsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0FBbkJGOztBQXVCQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBckJGOztBQXdCQTtFQUVFLDBCQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7QUF0QkYiLCJmaWxlIjoicGotcHJvamVrdHB1bmt0ZWxpc3RlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLXByb2dyZXNzLWJhciB7XG4gIC0tYmFja2dyb3VuZDogIzQ0NDQ0NDtcbiAgLS1wcm9ncmVzcy1iYWNrZ3JvdW5kOiAjYzdkMzA0O1xufVxuXG4ubm9ib3JkZXJ0aXRlbGJ1dHRvbmNsYXNzIHtcblxuICBib3JkZXItbGVmdC1zdHlsZTogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1yaWdodC1zdHlsZTogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIGJvcmRlci10b3Atc3R5bGU6IGhpZGRlbiAhaW1wb3J0YW50O1xuICBjb2xvcjogI2M3ZDMwNDtcbiAgZm9udC1zaXplOiAxMjAlO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLm5vYm9yZGVyZWludHJhZ2J1dHRvbmNsYXNzIHtcblxuICBib3JkZXItbGVmdC1zdHlsZTogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1yaWdodC1zdHlsZTogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1ib3R0b20tc3R5bGU6IGhpZGRlbiAhaW1wb3J0YW50O1xufVxuXG5cbi5sZWVyZGl2Y2xhc3Mge1xuXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAgICAgLy8gdmVydGlrYWxcbiAgZm9udC1zaXplOiAxMjAlO1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLnN0YXR1c2RpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIHBhZGRpbmc6IDRweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc3RhdHVzZGl2Y2xhc3M6aG92ZXIge1xuXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuXG4uYXVmZ2FiZWRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBjb2xvcjogYmxhY2s7XG59XG5cbi5hdWZnYWJlZGl2Y2xhc3M6aG92ZXIge1xuXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuXG4uYmVtZXJrdW5nZGl2Y2xhc3Mge1xuXG4gIHBhZGRpbmc6IDRweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDM2cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBmb250LXNpemU6IDkwJTtcbn1cblxuLmJlbWVya3VuZ2RpdmNsYXNzOmhvdmVyIHtcblxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuLmJlbWVya3VuZ3NwYW5jbGFzcyB7XG5cbiAgZm9udC1zaXplOiA5MCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmJlbWVya3VuZ3NwYW5jbGFzczpob3ZlciB7XG5cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbi5zdGFydGRhdHVtZGl2Y2xhc3Mge1xuXG4gIHBhZGRpbmc6IDRweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDM2cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBjb2xvcjogYmxhY2s7XG59XG5cbi5lbmRlZGF0dW1kaXZjbGFzcyB7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDMwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgcGFkZGluZzogNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uZW5kdGFnZWRpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogMzBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiA0cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1zaXplOiA5MCU7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG59XG5cblxuLnByb3Rva29sbG1hcmtlZGl2Y2xhc3Mge1xuXG4gIHBhZGRpbmc6IDJweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBmb250LXNpemU6IDgwJTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAzMHB4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uYWRkY2ljbGVjbGFzcyB7XG5cbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB3aWR0aDogMjZweDtcbiAgaGVpZ2h0OiAyNnB4O1xuICBiYWNrZ3JvdW5kOiAjYzdkMzA0O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4vKlxuLmFkZGJ1dHRvbmRpdiB7XG5cbiAgcGFkZGluZzogNHB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBjb2xvcjogd2hpdGU7XG4gIHdpZHRoOiAxNDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgYmFja2dyb3VuZDogZ3JlZW47XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbn1cblxuICovXG5cbi56dXN0YWVuZGlnZGl2ZW1wdHljbGFzcyB7XG5cbiAgd2lkdGg6ICA1MHB4O1xuICBoZWlnaHQ6IDE4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgY29sb3I6IHdoaXRlO1xuICBmb250LXNpemU6IDkwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgYmFja2dyb3VuZDogIzdiNmE1ODtcbiAgY29sb3I6IHdoaXRlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cblxuLnp1c3RhZW5kaWdkaXZmaWxsY2xhc3Mge1xuXG4gIHdpZHRoOiAgMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtaW4taGVpZ2h0OiAzMHB4O1xuICBjb2xvcjogYmxhY2s7XG4gIGZvbnQtc2l6ZTogOTAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxufVxuXG4uenVzdGFlbmRpZ2RpdmZpbGxjbGFzczpob3ZlciB7XG5cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIGNvbG9yOiBibGFjaztcbiAgZm9udC1zaXplOiA5MCU7XG59XG4iXX0= */";

/***/ }),

/***/ 32686:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-debug/common-debug.page.scss?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".menubuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi1kZWJ1Zy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7QUFGRiIsImZpbGUiOiJjb21tb24tZGVidWcucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbi5tZW51YnV0dG9uY2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogNTBweDtcbiAgcGFkZGluZzogMnB4O1xufVxuXG4iXX0= */";

/***/ }),

/***/ 97308:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.scss?ngResource ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "#container {\n  text-align: center;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n#container strong {\n  font-size: 20px;\n  line-height: 26px;\n}\n\n#container p {\n  font-size: 16px;\n  line-height: 22px;\n  color: #8c8c8c;\n  margin: 0;\n}\n\n#container a {\n  text-decoration: none;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi1laW5zdGVsbHVuZ2VuLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLFFBQUE7RUFDQSwyQkFBQTtBQUFGOztBQUdBO0VBQ0UsZUFBQTtFQUNBLGlCQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7RUFFQSxjQUFBO0VBRUEsU0FBQTtBQUZGOztBQUtBO0VBQ0UscUJBQUE7QUFGRiIsImZpbGUiOiJjb21tb24tZWluc3RlbGx1bmdlbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjY29udGFpbmVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG59XG5cbiNjb250YWluZXIgc3Ryb25nIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjZweDtcbn1cblxuI2NvbnRhaW5lciBwIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMjJweDtcblxuICBjb2xvcjogIzhjOGM4YztcblxuICBtYXJnaW46IDA7XG59XG5cbiNjb250YWluZXIgYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn0iXX0= */";

/***/ }),

/***/ 45936:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-error/common-error.page.scss?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb21tb24tZXJyb3IucGFnZS5zY3NzIn0= */";

/***/ }),

/***/ 16355:
/*!********************************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.scss?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".trennerdiv {\n  width: 100px;\n  height: 10px;\n  border-radius: 4px;\n  background: #7b6a58;\n  margin: 6px;\n}\n\n.trennerdivclass {\n  width: 1px;\n  min-height: 30px;\n  height: 100%;\n  background: silver;\n}\n\n.buttonclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 140px;\n  height: 140px;\n  cursor: pointer;\n  background: white;\n}\n\n.buttonbigclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 220px;\n  height: 220px;\n  cursor: pointer;\n  background: white;\n}\n\n.favlistedivclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid gray;\n  border-radius: 10px;\n  width: 400px;\n  cursor: pointer;\n  background: white;\n  overflow: auto;\n}\n\n.menubuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi1ob21lLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTtFQUVFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7QUFIRjs7QUFNQTtFQUVFLFVBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQUpGOztBQU9BO0VBRUUsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7QUFMRjs7QUFRQTtFQUVFLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0FBTkY7O0FBU0E7RUFFRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQVBGOztBQVVBO0VBRUUsYUFBQTtFQUNBLDJCQUFBO0VBQ0EsbUJBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0FBUkYiLCJmaWxlIjoiY29tbW9uLWhvbWUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuLnRyZW5uZXJkaXYge1xuXG4gIHdpZHRoOiAxMDBweDtcbiAgaGVpZ2h0OiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGJhY2tncm91bmQ6ICM3YjZhNTg7XG4gIG1hcmdpbjogNnB4O1xufVxuXG4udHJlbm5lcmRpdmNsYXNzIHtcblxuICB3aWR0aDogMXB4O1xuICBtaW4taGVpZ2h0OiAzMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQ6IHNpbHZlcjtcbn1cblxuLmJ1dHRvbmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBib3JkZXI6IDJweCBzb2xpZCBncmF5O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICB3aWR0aDogMTQwcHg7XG4gIGhlaWdodDogMTQwcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG59XG5cbi5idXR0b25iaWdjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgYm9yZGVyOiAycHggc29saWQgZ3JheTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgd2lkdGg6IDIyMHB4O1xuICBoZWlnaHQ6IDIyMHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xufVxuXG4uZmF2bGlzdGVkaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgYm9yZGVyOiAycHggc29saWQgZ3JheTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgd2lkdGg6IDQwMHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLm1lbnVidXR0b25jbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvLyBob3Jpem9udGFsXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIHZlcnRpa2FsXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiA1MHB4O1xuICBwYWRkaW5nOiAycHg7XG59XG5cbiJdfQ== */";

/***/ }),

/***/ 81595:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-login/common-login.page.scss?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".menubuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi1sb2dpbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFFRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7QUFGRiIsImZpbGUiOiJjb21tb24tbG9naW4ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbi5tZW51YnV0dG9uY2xhc3Mge1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICB3aWR0aDogMTAwJTtcbiAgbWluLWhlaWdodDogNTBweDtcbiAgcGFkZGluZzogMnB4O1xufVxuXG4iXX0= */";

/***/ }),

/***/ 95222:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-registrierung/common-registrierung.page.scss?ngResource ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".menubuttonclass {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  min-height: 50px;\n  padding: 2px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi1yZWdpc3RyaWVydW5nLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUVFLGFBQUE7RUFDQSwyQkFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsWUFBQTtBQUZGIiwiZmlsZSI6ImNvbW1vbi1yZWdpc3RyaWVydW5nLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4ubWVudWJ1dHRvbmNsYXNzIHtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDUwcHg7XG4gIHBhZGRpbmc6IDJweDtcbn1cblxuIl19 */";

/***/ }),

/***/ 64774:
/*!******************************************************************************!*\
  !*** ./src/app/pages/common-testseite/common-testseite.page.scss?ngResource ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "#container {\n  text-align: center;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n#container strong {\n  font-size: 20px;\n  line-height: 26px;\n}\n\n#container p {\n  font-size: 16px;\n  line-height: 22px;\n  color: #8c8c8c;\n  margin: 0;\n}\n\n#container a {\n  text-decoration: none;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi10ZXN0c2VpdGUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usa0JBQUE7RUFFQSxrQkFBQTtFQUNBLE9BQUE7RUFDQSxRQUFBO0VBQ0EsUUFBQTtFQUNBLDJCQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtFQUVBLGNBQUE7RUFFQSxTQUFBO0FBRkY7O0FBS0E7RUFDRSxxQkFBQTtBQUZGIiwiZmlsZSI6ImNvbW1vbi10ZXN0c2VpdGUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cbiNjb250YWluZXIgcCB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIycHg7XG5cbiAgY29sb3I6ICM4YzhjOGM7XG5cbiAgbWFyZ2luOiAwO1xufVxuXG4jY29udGFpbmVyIGEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59Il19 */";

/***/ }),

/***/ 83146:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.scss?ngResource ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpLW1pdGFyYmVpdGVybGlzdGUuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBSEo7O0FBT0E7RUFFRSxpQkFBQTtBQUxGIiwiZmlsZSI6ImZpLW1pdGFyYmVpdGVybGlzdGUuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLmluZm90YWJsZSB7XG5cbiAgdGQge1xuXG4gICAgZm9udC1zaXplOiA4MCU7XG4gICAgY29sb3I6ICM0NDQ0NDQ7XG4gIH1cbn1cblxuLmVyZ29uYW1ldGV4dGNsYXNzIHtcblxuICBmb250LXdlaWdodDogYm9sZDtcbn1cbiJdfQ== */";

/***/ }),

/***/ 28019:
/*!***************************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.scss?ngResource ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpLXN0YW5kb3J0ZWxpc3RlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0U7RUFFRSxjQUFBO0VBQ0EsY0FBQTtBQUhKOztBQU9BO0VBRUUsaUJBQUE7QUFMRiIsImZpbGUiOiJmaS1zdGFuZG9ydGVsaXN0ZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDgwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4uZXJnb25hbWV0ZXh0Y2xhc3Mge1xuXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuIl19 */";

/***/ }),

/***/ 84665:
/*!********************************************************************************!*\
  !*** ./src/app/pages/pj-aufgaben-liste/pj-aufgaben-liste.page.scss?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.keineintragclass {\n  width: 100%;\n  height: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  font-size: 120%;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n\n.datumkeeperclass {\n  width: 240px;\n  height: 100%;\n  left: 0px;\n  background: none;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n  padding: 6px;\n}\n\n.tagaufteilungkeeperdivclass {\n  border-top: 1px solid white;\n  width: 100%;\n  height: 100%;\n  background: silver;\n  color: white;\n  display: flex;\n  flex-direction: column;\n}\n\n.tagaufteilungeintragdivclass {\n  width: 100%;\n  color: white;\n  padding: 4px;\n  margin-bottom: 1px;\n  overflow: hidden;\n  font-size: 90%;\n  cursor: pointer;\n}\n\n.meintagstatusdivclass {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px;\n  color: white;\n  width: 100px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  border: 1px solid white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLWF1ZmdhYmVuLWxpc3RlLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBTUE7RUFFRSxXQUFBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxlQUFBO0FBSkY7O0FBT0E7RUFFRSxpQkFBQTtBQUxGOztBQVFBO0VBRUUsWUFBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLFlBQUE7QUFORjs7QUFTQTtFQUVFLDJCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFQRjs7QUFVQTtFQUVFLFdBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0VBQ0EsZUFBQTtBQVJGOztBQVdBO0VBRUUsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSx1QkFBQTtBQVRGIiwiZmlsZSI6InBqLWF1ZmdhYmVuLWxpc3RlLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbmZvdGFibGUge1xuXG4gIHRkIHtcblxuICAgIGZvbnQtc2l6ZTogODAlO1xuICAgIGNvbG9yOiAjNDQ0NDQ0O1xuICB9XG59XG5cbi5rZWluZWludHJhZ2NsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMTIwJTtcbn1cblxuLmVyZ29uYW1ldGV4dGNsYXNzIHtcblxuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmRhdHVta2VlcGVyY2xhc3Mge1xuXG4gIHdpZHRoOiAyNDBweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBsZWZ0OiAwcHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgLy8gaG9yaXpvbnRhbFxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvLyB2ZXJ0aWthbFxuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBwYWRkaW5nOiA2cHg7XG59XG5cbi50YWdhdWZ0ZWlsdW5na2VlcGVyZGl2Y2xhc3Mge1xuXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB3aGl0ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogc2lsdmVyO1xuICBjb2xvcjogd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi50YWdhdWZ0ZWlsdW5nZWludHJhZ2RpdmNsYXNzIHtcblxuICB3aWR0aDogMTAwJTtcbiAgY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nOiA0cHg7XG4gIG1hcmdpbi1ib3R0b206IDFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZm9udC1zaXplOiA5MCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLm1laW50YWdzdGF0dXNkaXZjbGFzcyB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8vIGhvcml6b250YWxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gdmVydGlrYWxcbiAgcGFkZGluZzogNHB4O1xuICBjb2xvcjogd2hpdGU7XG4gIHdpZHRoOiAxMDBweDtcbiAgbWFyZ2luLXRvcDogNHB4O1xuICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xufVxuXG5cbiJdfQ== */";

/***/ }),

/***/ 40325:
/*!**********************************************************************************!*\
  !*** ./src/app/pages/pj-favoriten-liste/pj-favoriten-liste.page.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwai1mYXZvcml0ZW4tbGlzdGUucGFnZS5zY3NzIn0= */";

/***/ }),

/***/ 52821:
/*!*************************************************************************!*\
  !*** ./src/app/pages/pj-projekt-liste/pj-projekt-liste.scss?ngResource ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb2pla3QtbGlzdGUuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFRTtFQUVFLGNBQUE7RUFDQSxjQUFBO0FBRko7O0FBTUE7RUFFRSxpQkFBQTtBQUpGIiwiZmlsZSI6InBqLXByb2pla3QtbGlzdGUuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbmZvdGFibGUge1xuXG4gIHRkIHtcblxuICAgIGZvbnQtc2l6ZTogODAlO1xuICAgIGNvbG9yOiAjNDQ0NDQ0O1xuICB9XG59XG5cbi5lcmdvbmFtZXRleHRjbGFzcyB7XG5cbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cblxuXG5cblxuXG5cblxuXG4iXX0= */";

/***/ }),

/***/ 97461:
/*!************************************************************************************!*\
  !*** ./src/app/pages/pj-protokolle-liste/pj-protokolle-liste.page.scss?ngResource ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".infotable td {\n  font-size: 80%;\n  color: #444444;\n}\n\n.ergonametextclass {\n  font-weight: bold;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBqLXByb3Rva29sbGUtbGlzdGUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVFO0VBRUUsY0FBQTtFQUNBLGNBQUE7QUFGSjs7QUFNQTtFQUVFLGlCQUFBO0FBSkYiLCJmaWxlIjoicGotcHJvdG9rb2xsZS1saXN0ZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5mb3RhYmxlIHtcblxuICB0ZCB7XG5cbiAgICBmb250LXNpemU6IDgwJTtcbiAgICBjb2xvcjogIzQ0NDQ0NDtcbiAgfVxufVxuXG4uZXJnb25hbWV0ZXh0Y2xhc3Mge1xuXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4iXX0= */";

/***/ }),

/***/ 33383:
/*!***********************************************!*\
  !*** ./src/app/app.component.html?ngResource ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n";

/***/ }),

/***/ 37919:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-auswahl/fi-mitarbeiter-auswahl.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Mitarbeiterauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n\n          <td style=\"width: 20px\"></td>\n          <td>\n            <div class=\"menufilterbuttonclass\" (click)=\"StandortfilterButtonClicked()\">\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td><ion-icon name=\"funnel-outline\"></ion-icon></td>\n                  <td [innerHTML]=\"GetStandortfiller()\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <div class=\"innerkeeperlisteclass\">\n\n            <ion-list *ngIf=\"Mitarbeiterliste && Anzeigeliste.length > 0\">\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Mitarbeiter of Anzeigeliste, let i = index\" (click)=\"MitrabeiterButtonClicked(Mitarbeiter)\">\n                <ion-grid class=\"maingridclass\">\n                  <ion-row  *ngIf=\"Mitarbeiterbuchstabenliste[i] !== ''\">\n                    <ion-col size=\"12\">\n                      <ion-text color=\"orange\"><b>{{Mitarbeiterbuchstabenliste[i]}}</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"12\">\n                      <div class=\"kontaktclass\">\n                        <table class=\"paddingsmalltable\" width=\"100%\">\n                          <tr>\n                            <td>\n                              <table cellspacing=\"0\" cellpadding=\"0\">\n                                <tr>\n                                  <td><checkbox-clon [Index]=\"i\" (CheckChanged)=\"CheckedChanged($event)\" [Checked]=\"Mitarbeiter.Selected\"></checkbox-clon></td>\n                                  <td *ngIf=\"!Mitarbeiter.Filtered\">\n                                    {{Mitarbeiter.Name}} {{Mitarbeiter.Vorname}} / {{Mitarbeiter.Kuerzel}}\n                                  </td>\n                                  <td *ngIf=\"Mitarbeiter.Filtered\">\n                                    <span>{{Mitarbeiter.Text_A}}</span><span style=\"color: green\">{{Mitarbeiter.Text_B}}</span><span>{{Mitarbeiter.Text_C}}</span> / {{Mitarbeiter.Kuerzel}}\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                <tr>\n                                  <td style=\"width: 28px\"></td>\n                                  <td class=\"ergonametextclass\">Stadort:</td><td>{{DBStandort.GetStandort(Mitarbeiter.StandortID)}}</td><td style=\"width: 20px\"></td>\n                                </tr>\n                              </table>\n                          </tr>\n                        </table>\n                      </div>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n            </ion-list>\n\n            <div *ngIf=\"Mitarbeiterliste && Anzeigeliste.length === 0\" class=\"emptymessageclass\">\n              keine EintrÃ¤ge unter diesem Filter vorhanden\n            </div>\n\n          </div>\n          <div class=\"innerkeeperalphabetclass\">\n            <alphabet-relative #SmallAlphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n                      [Buchstabenliste]=\"Mitarbeiteralphabet\"\n                      [Breite]=\"Alphapetbreite\"\n                      [Auswahl]=\"Mitarbeiteralphabetauswahl\"></alphabet-relative>\n          </div>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n";

/***/ }),

/***/ 46256:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/fi-mitarbeiter-editor/fi-mitarbeiter-editor.component.html?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Mitarbeitereditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DB.CurrentMitarbeiter\">\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"burnicklgruen\"><b>Mitarbeiter</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Vorname\" [Required]=\"true\" [MaxLength]=\"100\"  Titel=\"Vorname\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Name\" [Required]=\"true\" [MaxLength]=\"100\"  Titel=\"Name\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Kuerzel\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"10\"  Titel=\"MitarbeiterkÃ¼rzel\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [Enabled]=\"false\" [Clickable]=\"true\" [Value]=\"StandortDB.GetStandort(DB.CurrentMitarbeiter.StandortID)\" [DisabledColor]=\"'gray'\" (click)=\"StandortClicked()\"  Titel=\"Standort\"></input-clone>\n              </ion-col>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [Enabled]=\"false\" [Clickable]=\"true\" [Value]=\"DB.CurrentMitarbeiter.Fachbereich\" [DisabledColor]=\"'gray'\" (click)=\"FachbereichClicked()\"  Titel=\"Fachbereich\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [Inputtype]=\"'email'\" [Required]=\"true\" [MinHeight]=\"30\" [(Value)]=\"DB.CurrentMitarbeiter.Email\" Titel=\"Email\" [Enabled]=\"EmailinputEnabled\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"burnicklgruen\"><b>Kontakt</b></ion-text>\n              </ion-col>\n            </ion-row>\n\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Telefon\" Titel=\"Telefon\"></input-clone>\n              </ion-col>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DB.CurrentMitarbeiter.Mobil\" Titel=\"Mobil\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\"></ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentMitarbeiter._id !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"DeleteEnabled\" (CheckChanged)=\"LoeschenCheckboxChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!DeleteEnabled\" (click)=\"LoeschenButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag lÃ¶schen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n          </ion-grid>\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n          <!--\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <ion-button size=\"small\" color=\"rot\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon name=\"close-outline\"></ion-icon>\n                </ion-button>\n              <td style=\"width: 100%\"></td>\n              <td>\n                <ion-button [disabled]=\"Valid === false\" size=\"small\" color=\"gruen\" (click)=\"OkButtonClicked()\">\n                  <ion-icon name=\"checkmark-outline\"></ion-icon>\n                </ion-button>\n              </td>\n            </tr>\n          </table>\n          -->\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 41789:
/*!*************************************************************************************************!*\
  !*** ./src/app/components-page/fi-standort-editor/fi-standort-editor.component.html?ngResource ***!
  \*************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Standorteditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DB.CurrentStandort\">\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Standortname\" [(Value)]=\"DB.CurrentStandort.Standort\" [Required]=\"true\"  [MaxLength]=\"100\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"KÃ¼rzel\" [(Value)]=\"DB.CurrentStandort.Kuerzel\" [Required]=\"true\" [MinLength]=\"3\" [MaxLength]=\"10\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"StraÃe\" [(Value)]=\"DB.CurrentStandort.Strasse\" [Required]=\"true\" [MaxLength]=\"100\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"PLZ\" [Required]=\"true\" [MinLength]=\"5\" [MaxLength]=\"5\" [(Value)]=\"DB.CurrentStandort.PLZ\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"Ort\" [Required]=\"true\" [MaxLength]=\"100\" [(Value)]=\"DB.CurrentStandort.Ort\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\"><br><br></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <input-clone Titel=\"Telefon\" Inputtype=\"text\" [(Value)]=\"DB.CurrentStandort.Telefon\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col>\n                <input-clone Titel=\"Email\"  Inputtype=\"email\" [MaxLength]=\"255\" [Required]=\"true\" [(Value)]=\"DB.CurrentStandort.Email\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentStandort._id !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"CanDelete\" (CheckChanged)=\"CanDeleteCheckedChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!CanDelete\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag lÃ¶schen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n  </ion-grid>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <!--\n              <td *ngIf=\"DB.CurrentStandort._id !== null\">\n                <table width=\"180px\">\n                  <tr>\n                    <td>\n                      <checkbox-clon (CheckChanged)=\"CanDeleteCheckedChanged($event)\" [Checked]=\"CanDelete\"></checkbox-clon>\n                    </td>\n                    <td style=\"font-size: 90%; color: white;\">lÃ¶schen aktivieren</td>\n                    <td>\n                      <div class=\"rootbuttonclass\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon style=\"font-size: 28px\" [color]=\"CanDelete === true ? 'rot' : 'burnicklbraun'\" name=\"trash\"></ion-icon>\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              </td>\n              -->\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 44672:
/*!***********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-aufgaben-listefilter/pj-aufgaben-listefilter.component.html?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Aufgabenlistefilter) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div *ngIf=\"Mitarbeitersettings !== null\" class=\"contentinnerclass\">\n\n          <ion-radio-group [value]=\"Mitarbeitersettings.AufgabenTerminfiltervariante\" (ionChange)=\"SetAufgabenTerminfiltervariante($event)\">\n\n            <table class=\"paddingtable\">\n              <tr>\n                <td colspan=\"2\"><ion-text color=\"burnicklgruen\"><b>Fertigstellungstermin</b></ion-text></td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"null\" mode=\"md\"></ion-radio></td><td>Kein Filter</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.Faelligkeitsterminfiltervarianten.Nur_diese_Woche\" mode=\"md\"></ion-radio></td><td colspan=\"3\">Nur diese Woche ({{GetWochenstring()}})</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.Faelligkeitsterminfiltervarianten.Nur_diesen_Monat\" mode=\"md\"></ion-radio></td><td colspan=\"3\">Nur dieser Monat ({{GetMonatsstring()}})</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt\" mode=\"md\"></ion-radio></td><td>Bis zum Zeitpunkt</td>\n                <td><button-value-date [Buttontext]=\"'Datum'\"\n                                       [ElementID]=\"'terminbis'\"\n                                       [Datum]=\"GetDatum(Mitarbeitersettings.AufgabenTerminfilterEndewert)\"\n                                       [Enabled]=\"Mitarbeitersettings.AufgabenTerminfiltervariante === Const.Faelligkeitsterminfiltervarianten.Bis_zum_Zeitpunkt\"\n                                       (TimeChanged)=\"TerminEndeDatumChanged($event)\">\n                </button-value-date></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt\" mode=\"md\"></ion-radio></td><td>Seit dem Zeitpunkt</td>\n                <td><button-value-date [Buttontext]=\"'Datum'\"\n                                       [ElementID]=\"'terminseit'\"\n                                       [Datum]=\"GetDatum(Mitarbeitersettings.AufgabenTerminfilterStartwert)\"\n                                       [Enabled]=\"Mitarbeitersettings.AufgabenTerminfiltervariante === Const.Faelligkeitsterminfiltervarianten.Seit_dem_Zeitpunkt\"\n                                       (TimeChanged)=\"TerminStartDatumChanged($event)\">\n                </button-value-date></td><td></td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.Faelligkeitsterminfiltervarianten.Zeitspanne\" mode=\"md\"></ion-radio></td><td>Zeitspanne</td>\n                <td style=\"width: 200px\">\n                  <button-value-date [Buttontext]=\"'Startdatum'\"\n                                     [ElementID]=\"'terminspannestart'\"\n                                     [Datum]=\"GetDatum(Mitarbeitersettings.AufgabenTerminfilterStartwert)\"\n                                     [Enabled]=\"Mitarbeitersettings.AufgabenTerminfiltervariante === Const.Faelligkeitsterminfiltervarianten.Zeitspanne\"\n                                     (TimeChanged)=\"TerminStartDatumChanged($event)\">\n                  </button-value-date>\n                </td>\n                <td style=\"width: 200px\">\n                  <button-value-date [Buttontext]=\"'Enddatum'\"\n                                     [ElementID]=\"'terminspanneende'\"\n                                     [Datum]=\"GetDatum(Mitarbeitersettings.AufgabenTerminfilterEndewert)\"\n                                     [Enabled]=\"Mitarbeitersettings.AufgabenTerminfiltervariante === Const.Faelligkeitsterminfiltervarianten.Zeitspanne\"\n                                     (TimeChanged)=\"TerminEndeDatumChanged($event)\">\n                  </button-value-date>\n                </td>\n              </tr>\n            </table>\n\n          </ion-radio-group>\n\n\n\n        </div>\n\n      </ion-content>\n\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n";

/***/ }),

/***/ 23930:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-auswahl/pj-beteiligten-auswahl.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Beteiligteauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <div class=\"innerkeeperlisteclass\">\n\n            <ion-list *ngIf=\"Beteiligteliste && Anzeigeliste.length > 0\">\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Beteiligte of Anzeigeliste, let i = index\" (click)=\"BeteiligteButtonClicked(Beteiligte)\">\n                <ion-grid class=\"maingridclass\">\n                  <ion-row  *ngIf=\"Beteiligtebuchstabenliste[i] !== ''\">\n                    <ion-col size=\"12\">\n                      <ion-text color=\"orange\"><b>{{Beteiligtebuchstabenliste[i]}}</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"12\">\n                      <div class=\"kontaktclass\">\n                        <table class=\"paddingsmalltable\" width=\"100%\">\n                          <tr>\n                            <td>\n                              <table cellspacing=\"0\" cellpadding=\"0\">\n                                <tr>\n                                  <td><checkbox-clon [Index]=\"i\" (CheckChanged)=\"CheckedChanged($event)\" [Checked]=\"Beteiligte.Selected\"></checkbox-clon></td>\n                                  <td *ngIf=\"Beteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person\">\n                                    {{Beteiligte.Name}} {{Beteiligte.Vorname}} <span *ngIf=\"Beteiligte.Kuerzel !== ''\">/ {{Beteiligte.Kuerzel}}</span>\n                                    <br>\n                                  </td>\n                                  <td *ngIf=\"Beteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Firma\">\n                                    {{Beteiligte.Firma}}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td colspan=\"10\">\n                                    <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                      <tr>\n                                        <td *ngIf=\"Beteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person && Beteiligte.Firma !== ''\">\n                                          {{Beteiligte.Firma}}\n                                        </td>\n                                        <ng-container *ngIf=\"Beteiligte.Beteiligtentyp !== 0\">\n                                          <td *ngIf=\"Beteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person\" style=\"padding: 4px\"><div class=\"bullclass\"></div></td>\n                                          <td>{{DB.GetBeteiligtenFachbereichname(Beteiligte.Beteiligtentyp)}}</td>\n                                        </ng-container>\n                                        <ng-container *ngIf=\"Beteiligte.Email !== ''\">\n                                          <td *ngIf=\"Beteiligte.Beteiligtentyp !== 0\" style=\"padding: 4px\"><div class=\"bullclass\"></div></td>\n                                          <td>{{Beteiligte.Email}}</td>\n                                        </ng-container>\n                                      </tr>\n                                    </table>\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n            </ion-list>\n\n            <div *ngIf=\"Beteiligteliste && Anzeigeliste.length === 0\" class=\"emptymessageclass\">\n              keine EintrÃ¤ge vorhanden\n            </div>\n\n          </div>\n          <div class=\"innerkeeperalphabetclass\">\n            <alphabet-relative #SmallAlphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n                      [Buchstabenliste]=\"Beteiligtealphabet\"\n                      [Breite]=\"Alphapetbreite\"\n                      [Auswahl]=\"Beteiligtealphabetauswahl\"></alphabet-relative>\n          </div>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n";

/***/ }),

/***/ 19226:
/*!*******************************************************************************************************!*\
  !*** ./src/app/components-page/pj-beteiligten-editor/pj-beteiligten-editor.component.html?ngResource ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Beteiligteneditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DBBeteiligte.CurrentBeteiligte\">\n            <ion-row>\n              <ion-col size=\"6\">\n                <input-clone [MinHeight]=\"46\" [Value]=\"DBProjekt.CurrentProjekt.Projektname\" Titel=\"Projekt\" [DisabledColor]=\"'#444444'\" [Enabled]=\"false\"></input-clone>\n              </ion-col>\n              <ion-col size=\"6\">\n                <input-clone [DisabledColor]=\"'#444444'\"\n                             [Value]=\"DBBeteiligte.GetBeteiligtenFachbereichname(DBBeteiligte.CurrentBeteiligte.Beteiligtentyp)\" Titel=\"Fachbereich\"\n                             [Enabled]=\"false\"\n                             [Clickable]=\"true\" (click)=\"FachbereichClickedEvent.emit()\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"primary\"><b>EIntragtyp</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"6\">\n                <ion-radio-group [value]=\"DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp\" (ionChange)=\"BeteiligtetypChanged($event)\">\n                  <table class=\"paddingtable\">\n                    <tr>\n                      <td><ion-radio [value]=\"Const.Beteiligteneintragtypen.Person\" mode=\"md\"></ion-radio></td>\n                      <td>Person</td>\n                      <td style=\"width: 20px\"></td>\n                      <td><ion-radio [value]=\"Const.Beteiligteneintragtypen.Firma\" mode=\"md\"></ion-radio></td>\n                      <td>Firma / Projektmail</td>\n                    </tr>\n                  </table>\n                </ion-radio-group>\n              </ion-col>\n            </ion-row>\n            <ng-container *ngIf=\"DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp === this.Const.Beteiligteneintragtypen.Person\">\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"primary\"><b>Anrede</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col size=\"6\">\n                  <ion-radio-group [value]=\"DBBeteiligte.CurrentBeteiligte.Anrede\" (ionChange)=\"GeschlechtChanged($event)\">\n                    <table class=\"paddingtable\">\n                      <tr>\n                        <td><ion-radio [value]=\"Const.Anredevariante.Frau\" mode=\"md\"></ion-radio></td>\n                        <td>Frau</td>\n                        <td style=\"width: 20px\"></td>\n                        <td><ion-radio [value]=\"Const.Anredevariante.Herr\" mode=\"md\"></ion-radio></td>\n                        <td>Herr</td>\n                        <td style=\"width: 20px\"></td>\n                        <td><ion-radio [value]=\"Const.Anredevariante.Unbekannt\" mode=\"md\"></ion-radio></td>\n                        <td>Unbekannt</td>\n                      </tr>\n                    </table>\n                  </ion-radio-group>\n                </ion-col>\n              </ion-row>\n\n            </ng-container>\n\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"primary\"><b>{{DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person ? 'Person' : 'Firma'}}</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row [hidden]=\"DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Firma\">\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Vorname\" Titel=\"Vorname\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [Required]=\"true\" [MaxLength]=\"100\" [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Name\" Titel=\"Name\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [Required]=\"true\" [MaxLength]=\"100\" [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Firma\" [Titel]=\"'Firma'\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row [hidden]=\"DBBeteiligte.CurrentBeteiligte.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person\">\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone  [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Kuerzel\" Titel=\"KÃ¼rzel\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"primary\"><b>Kontakt</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone  [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Telefon\" Titel=\"Telefon\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n\n                xxxx\n                <input-clone [Inputtype]=\"'email'\" [MaxLength]=\"255\" [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Email\" Titel=\"Email\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n\n\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"primary\"><b>Anschrift</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Strasse\" Titel=\"Strasse\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DBBeteiligte.CurrentBeteiligte.PLZ\"  Titel=\"PLZ\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n              <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                <input-clone [(Value)]=\"DBBeteiligte.CurrentBeteiligte.Ort\"  Titel=\"Ort\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n              </ion-col>\n            </ion-row>\n\n            <ion-row *ngIf=\"DBBeteiligte.CurrentBeteiligte.BeteiligtenID !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"CanDelete\" (CheckChanged)=\"CanDeleteCheckedChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!CanDelete\" (click)=\"DeleteButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag lÃ¶schen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n          </ion-grid>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 55551:
/*!*****************************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-auswahl/pj-favoriten-auswahl.component.html?ngResource ***!
  \*****************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Favoritenauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div  class=\"contentinnerclass\">\n\n          <ion-list *ngIf=\"Pool.Mitarbeiterdaten !== null\">\n            <ion-radio-group [value]=\"DBProjekte.CurrentFavorit !== null ? DBProjekte.CurrentFavorit.FavoritenID : Const.NONE\">\n\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" (click)=\"FavoritButtonClicked(null)\">\n                <ion-grid class=\"maingridclass\">\n                  <ion-row>\n                    <ion-col size=\"12\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-radio [value]=\"Const.NONE\"></ion-radio></td>\n                          <td>\n                            <ion-text color=\"burnicklgruen\">\n                              <b>Keine Auswahl</b>\n\n                            </ion-text>\n                          </td>\n                        </tr>\n                      </table>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Favorit of Pool.Mitarbeiterdaten.Favoritenliste, let i = index\"  (click)=\"FavoritButtonClicked(Favorit)\">\n                <ion-grid class=\"maingridclass\">\n                  <ion-row>\n                    <ion-col size=\"12\">\n                      <table class=\"paddingsmalltable\">\n                        <tr>\n                          <td><ion-radio [value]=\"Favorit.FavoritenID\"></ion-radio></td>\n                          <td>\n                            <ion-text color=\"burnicklgruen\">\n                              <b>{{Favorit.Name}}</b>\n\n                            </ion-text>\n                          </td>\n                        </tr>\n                      </table>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row *ngIf=\"Favorit.Projekteliste.length > 0\">\n                    <ion-col>\n                      <table class=\"paddingtable\" width=\"100%\">\n                        <tr style=\"font-weight: bold;\">\n                          <td>Nummer</td>\n                          <td>KÃ¼rzel</td>\n                          <td>Projektname</td>\n                          <td>Ort</td>\n                          <td>Standort</td>\n                        </tr>\n                        <tr *ngFor=\"let Projket of Datenliste[i]\">\n                          <td>{{Projket.Projektnummer}}</td>\n                          <td>{{Projket.Projektkurzname}}</td>\n                          <td>{{Projket.Projektname}}</td>\n                          <td>{{Projket.Ort}}</td>\n                          <td>{{GetStandortname(Projket.StandortID)}}</td>\n                        </tr>\n                      </table>\n\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n\n            </ion-radio-group>\n          </ion-list>\n\n\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 20129:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-favoriten-editor/pj-favoriten-editor.component.html?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Favoriteneditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div *ngIf=\"DBProjekte.CurrentFavorit\" class=\"contentinnerclass\">\n\n          <div class=\"contentinnerheaderclass\">\n            <ion-grid>\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"burnicklgruen\"><b>Favorit</b></ion-text>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col>\n                  <input-clone [Required]=\"true\" [MaxLength]=\"100\" Titel=\"Name\" Inputtype=\"text\" [(Value)]=\"DBProjekte.CurrentFavorit.Name\" (TextChanged)=\"TextChanged($event)\"></input-clone>\n                </ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col>\n                  <ion-text color=\"burnicklgruen\"><b>Projekteliste</b></ion-text>\n                </ion-col>\n              </ion-row>\n            </ion-grid>\n          </div>\n          <div class=\"contentinnercontentclass\">\n            <div class=\"paddingdivclass\">\n              <div class=\"borderdivclass\">\n                <div class=\"projektelisteclass\">\n\n                  <ion-list >\n                    <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Projekt of Projektliste\">\n                      <ion-grid>\n                        <ion-row>\n                          <ion-col size=\"12\">\n                              <table class=\"paddingsmalltable\" width=\"100%\">\n                                <tr>\n                                  <td>\n                                    <table cellspacing=\"0\" cellpadding=\"0\">\n                                      <tr>\n                                        <td>\n                                          {{Projekt.Projektname}} / {{Projekt.Projektkurzname}}\n                                        </td>\n                                      </tr>\n                                    </table>\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td>\n                                    <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                      <tr>\n                                        <td class=\"ergonametextclass\">Projektnummer:</td><td>{{Projekt.Projektnummer}}</td>\n                                        <td style=\"width: 20px\"></td>\n                                        <td class=\"ergonametextclass\">Stadort:</td><td>{{DBStandort.GetStandort(Projekt.StandortID)}}</td>\n                                      </tr>\n                                    </table>\n                                </tr>\n                              </table>\n                          </ion-col>\n                        </ion-row>\n                      </ion-grid>\n                    </ion-item>\n                  </ion-list>\n\n\n\n\n\n\n                </div>\n                <div class=\"projektebuttonclass\">\n                  <table>\n                    <tr>\n                      <td>\n                        <!--\n                        <ion-fab slot=\"fixed\">\n                        -->\n                          <ion-fab-button size=\"small\" color=\"burnicklgruen\" style=\"--padding-bottom: 0px\" (click)=\"EditProjekteButtonClicked()\">\n                            <ion-icon color=\"schwarz\" name=\"list-outline\" style=\"font-size: 22px\"></ion-icon>\n                          </ion-fab-button>\n                        <!--\n                        </ion-fab>\n                        -->\n                      </td>\n                      <td>Projektauswahl</td>\n                    </tr>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 67385:
/*!***************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-bauteileditor/pj-gebaeude-bauteileditor.component.html?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Bauteileditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n            <ion-grid *ngIf=\"DB.CurrentBauteil !== null\">\n              <ion-row>\n                <ion-col><ion-text color=\"burnicklgruen\"><b>Bauteil</b></ion-text></ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col><input-clone [(Value)]=\"DB.CurrentBauteil.Bauteilname\" [Required]=\"true\" [MaxLength]=\"100\" Titel=\"Bauteilname\" (TextChanged)=\"TextChanged($event)\"></input-clone></ion-col>\n              </ion-row>\n              <ion-row>\n                <ion-col><input-clone [Value]=\"DB.CurrentBauteil.Listenposition.toString()\" [Required]=\"true\" [Inputtype]=\"'number'\" Titel=\"Listenposition\"  (TextChanged)=\"ListenpositionChangedHandler($event)\"></input-clone></ion-col>\n              </ion-row>\n            </ion-grid>\n\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 87312:
/*!*****************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-geschosseditor/pj-gebaeude-geschosseditor.component.html?ngResource ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Geschosseditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid *ngIf=\"DB.CurrentGeschoss !== null && this.DB.CurrentBauteil !== null\">\n            <ion-row>\n              <ion-col><ion-text color=\"burnicklgruen\"><b>{{DB.CurrentBauteil.Bauteilname}}</b></ion-text></ion-col>\n            </ion-row>\n\n            <ion-row>\n              <ion-col><input-clone [Required]=\"true\" [MaxLength]=\"100\" [Titel]=\"'Geschossname'\" [(Value)]=\"DB.CurrentGeschoss.Geschossname\" (TextChanged)=\"TextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col><input-clone [Required]=\"true\" [MaxLength]=\"10\" [Titel]=\"'Kurzbezeichnung'\" [(Value)]=\"DB.CurrentGeschoss.Kurzbezeichnung\" (TextChanged)=\"TextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col><input-clone [Required]=\"true\" [Titel]=\"'Listenposition'\" [Inputtype]=\"'number'\" [Value]=\"DB.CurrentGeschoss.Listenposition.toString()\" (TextChanged)=\"ListenpostionTextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentGeschoss.GeschossID !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"DeleteEnabled\" (CheckChanged)=\"LoeschenCheckboxChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!DeleteEnabled\" (click)=\"LoeschenButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag lÃ¶schen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n\n          </ion-grid>\n\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 53636:
/*!***********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumauswahl/pj-gebaeude-raumauswahl.component.html?ngResource ***!
  \***********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Raumauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <div *ngIf=\"DB.CurrentProjekt !== null\" class=\"strukturkeeperdiv\">\n\n                <div class=\"strukturbauteildiv\">\n                  <div class=\"strukturbauteilupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>Bauteile</b></ion-text>\n                  </div>\n                  <div class=\"strukturbauteilmiddlediv\">\n                    <ng-container *ngIf=\"DB.CurrentProjekt.Bauteilliste.length > 0\">\n                      <ion-radio-group [value]=\"DBGebaeude.CurrentBauteilindex\" (ionChange)=\"BauteilIndexChanged($event)\">\n\n                        <table class=\"paddingtable\">\n                          <tr>\n                            <td style=\"width: 30px\" align=\"center\">\n                              <ion-radio [value]=\"null\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td colspan=\"10\">keine Auswahl</td>\n                          </tr>\n                          <tr  *ngFor=\"let Bauteil of DB.CurrentProjekt.Bauteilliste; let Bauteilindex = index\">\n                            <td style=\"width: 26px\" align=\"center\">\n                              <ion-radio [value]=\"Bauteilindex\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td style=\"width: auto\">\n                              <div class=\"bauteildivclass\">\n                                <table style=\"width: 100%\">\n                                  <tr>\n                                    <td><ion-text>{{Bauteil.Bauteilname}}</ion-text></td><td style=\"text-align: right\">{{Bauteil.Geschossliste.length}}</td>\n                                  </tr>\n                                </table>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                      </ion-radio-group>\n                      <abstand-element-fixed></abstand-element-fixed>\n                    </ng-container>\n                  </div>\n\n                </div>\n\n                <div  *ngIf=\"DB.CurrentProjekt.Bauteilliste.length > 0 && DBGebaeude.CurrentBauteilindex !== null\" class=\"strukturgeschossldiv\">\n                  <div class=\"strukturgeschossupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>Geschosse</b></ion-text>\n                  </div>\n                  <div class=\"strukturgeschossmiddlediv\">\n                      <ion-radio-group [value]=\"DBGebaeude.CurrentGeschossindex\" (ionChange)=\"GeschossIndexChanged($event)\">\n                        <table class=\"paddingtable\">\n                          <tr>\n                            <td style=\"width: 30px\" align=\"center\">\n                              <ion-radio [value]=\"null\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td colspan=\"10\">keine Auswahl</td>\n                          </tr>\n                          <tr *ngFor=\"let Geschoss of DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste; let Geschossindex = index\">\n                            <td style=\"width: 30px\" align=\"center\">\n                              <ion-radio [value]=\"Geschossindex\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td>\n                              <div class=\"bauteildivsmallclass\">\n                                <ion-text><b>{{Geschoss.Kurzbezeichnung !== '' ? Geschoss.Kurzbezeichnung : '---'}}</b></ion-text>\n                              </div>\n                            </td>\n                            <td style=\"width: auto\">\n                              <div class=\"bauteilmediumdivclass\">\n                                <table style=\"width: 100%\">\n                                  <tr>\n                                    <td><ion-text>{{Geschoss.Geschossname}}</ion-text></td>\n                                  </tr>\n                                </table>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                      </ion-radio-group>\n                      <abstand-element-fixed></abstand-element-fixed>\n\n                  </div>\n                </div>\n                <div *ngIf=\"DBGebaeude.CurrentGeschoss !== null\" class=\"strukturraeumediv\">\n                  <div class=\"strukturraumupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>RÃ¤ume</b></ion-text>\n                  </div>\n                  <div class=\"strukturraummiddlediv\">\n\n                    <ion-radio-group [value]=\"DBGebaeude.CurrentRaumindex\" (ionChange)=\"RaumIndexChanged($event)\">\n                      <table class=\"paddingtable\">\n                        <tr>\n                          <td style=\"width: 30px\" align=\"center\">\n                            <ion-radio [value]=\"null\" mode=\"md\"></ion-radio>\n                          </td>\n                          <td colspan=\"10\">keine Auswahl</td>\n                        </tr>\n                        <tr *ngFor=\"let Raum of DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste[DBGebaeude.CurrentGeschossindex].Raumliste; let Raumindex = index\">\n\n                          <td style=\"width: 30px\" align=\"center\">\n                            <ion-radio [value]=\"Raumindex\" mode=\"md\"></ion-radio>\n                          </td>\n                          <td>\n                            <div class=\"bauteildivsmallclass\">\n                              <ion-text><b>{{Raum.Raumnummer !== '' ? Raum.Raumnummer : '---'}}</b></ion-text>\n                            </div>\n                          </td>\n                          <td style=\"width: auto\">\n                            <div class=\"bauteilmediumdivclass\">\n                              <ion-text>{{Raum.Raumname}}</ion-text>\n                            </div>\n                          </td>\n\n                        </tr>\n                        <tr>\n                          <td style=\"height: 100px\" colspan=\"10\"></td>\n                        </tr>\n                      </table>\n                    </ion-radio-group>\n\n                  </div>\n\n                </div>\n\n              </div>\n\n        </div>\n\n      </ion-content>\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n";

/***/ }),

/***/ 19257:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-gebaeude-raumeditor/pj-gebaeude-raumeditor.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Raumeditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div *ngIf=\"DB.CurrentBauteil !== null && DB.CurrentGeschoss !== null && DB.CurrentRaum !== null\" class=\"contentinnerclass\">\n\n          <ion-grid>\n            <ion-row>\n              <ion-col><ion-text color=\"burnicklgruen\"><b>{{DB.CurrentBauteil.Bauteilname + ' &rarr; ' + DB.CurrentGeschoss.Geschossname}}</b></ion-text></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col><input-clone [Required]=\"true\" [MaxLength]=\"100\" [Titel]=\"'Raumname'\" [(Value)]=\"DB.CurrentRaum.Raumname\" (TextChanged)=\"TextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col><input-clone  [Required]=\"true\" [MaxLength]=\"20\" [Titel]=\"'Raumnummer'\" [(Value)]=\"DB.CurrentRaum.Raumnummer\" (TextChanged)=\"TextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col><input-clone [Required]=\"true\" [Inputtype]=\"'number'\" [Titel]=\"'Listenposition'\" [Value]=\"DB.CurrentRaum.Listenposition.toString()\" (TextChanged)=\"ListenpostionTextChanged($event)\"></input-clone></ion-col>\n            </ion-row>\n            <ion-row *ngIf=\"DB.CurrentRaum.RaumID !== null\">\n              <ion-col>\n                <table>\n                  <tr>\n                    <td><checkbox-clon [Checked]=\"DeleteEnabled\" (CheckChanged)=\"LoeschenCheckboxChanged($event)\"></checkbox-clon></td>\n                    <td style=\"width: 6px\"></td>\n                    <td>\n                      <ion-button size=\"small\" color=\"rot\" [disabled]=\"!DeleteEnabled\" (click)=\"LoeschenButtonClicked()\">\n                        <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                        <ion-text>Eintrag lÃ¶schen</ion-text>\n                      </ion-button>\n                    </td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 36091:
/*!*************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-kostengruppen-auswahl/pj-kostengruppen-auswahl.component.html?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Kostengruppenauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <table *ngIf=\"DB.CurrentProjektpunkt !== null\" class=\"paddingtable\">\n            <tr>\n              <td style=\"width: 33%\"><ion-text color=\"burnicklgruen\"><b>1. Ebene</b></ion-text></td>\n              <td style=\"width: 33%\"><ion-text *ngIf=\"DB.CurrentProjektpunkt.Oberkostengruppe  !== null\" color=\"burnicklgruen\"><b>2. Ebene</b></ion-text></td>\n              <td style=\"width: 33%\"><ion-text *ngIf=\"DB.CurrentProjektpunkt.Hauptkostengruppe !== null\" color=\"burnicklgruen\"><b>3. Ebene</b></ion-text></td>\n            </tr>\n            <tr>\n              <td valign=\"top\">\n\n                <ion-radio-group [value]=\"DB.CurrentProjektpunkt.Oberkostengruppe\" (ionChange)=\"OberkostengruppeChanged($event)\">\n\n                  <table class=\"paddingtable\">\n                    <tr>\n                      <td><ion-radio [value]=\"null\" mode=\"md\"></ion-radio></td>\n                      <td colspan=\"2\"><b>keine Festlegung</b></td>\n                    </tr>\n                    <tr *ngFor=\"let Obergruppe of this.Oberkostengruppenliste\">\n                      <td valign=\"top\"><ion-radio [value]=\"Obergruppe.Kostengruppennummer\" mode=\"md\"></ion-radio></td>\n                      <td valign=\"top\"><b>{{Obergruppe.Kostengruppennummer}}</b></td>\n                      <td valign=\"top\">{{Obergruppe.Bezeichnung}}</td>\n                    </tr>\n                  </table>\n\n                </ion-radio-group>\n\n              </td>\n              <td valign=\"top\">\n\n                <ion-radio-group *ngIf=\"DB.CurrentProjektpunkt.Oberkostengruppe !== null\"\n                                 [value]=\"DB.CurrentProjektpunkt.Hauptkostengruppe\"\n                                 (ionChange)=\"HauptkostengruppeChanged($event)\">\n                  <table  class=\"paddingtable\">\n                    <tr>\n                      <td><ion-radio [value]=\"null\" mode=\"md\"></ion-radio></td>\n                      <td colspan=\"2\"><b>keine Festlegung</b></td>\n                    </tr>\n                    <tr *ngFor=\"let Obergruppe of this.Hauptkostengruppenliste\">\n                      <td valign=\"top\"><ion-radio [value]=\"Obergruppe.Kostengruppennummer\" mode=\"md\"></ion-radio></td>\n                      <td valign=\"top\"><b>{{Obergruppe.Kostengruppennummer}}</b></td>\n                      <td valign=\"top\">{{Obergruppe.Bezeichnung}}</td>\n                    </tr>\n                  </table>\n\n                </ion-radio-group>\n\n              </td>\n              <td valign=\"top\">\n                <ion-radio-group *ngIf=\"DB.CurrentProjektpunkt.Hauptkostengruppe !== null\"\n                                 [value]=\"DB.CurrentProjektpunkt.Unterkostengruppe\"\n                                 (ionChange)=\"UnterkostengruppeChanged($event)\">\n                  <table  class=\"paddingtable\">\n                    <tr>\n                      <td><ion-radio [value]=\"null\" mode=\"md\"></ion-radio></td>\n                      <td colspan=\"2\"><b>keine Festlegung</b></td>\n                    </tr>\n                    <tr *ngFor=\"let Obergruppe of this.Unterkostengruppenliste\">\n                      <td valign=\"top\"><ion-radio [value]=\"Obergruppe.Kostengruppennummer\" mode=\"md\"></ion-radio></td>\n                      <td valign=\"top\"><b>{{Obergruppe.Kostengruppennummer}}</b></td>\n                      <td valign=\"top\">{{Obergruppe.Bezeichnung}}</td>\n                    </tr>\n                  </table>\n\n                </ion-radio-group>\n\n              </td>\n            </tr>\n          </table>\n\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelClickedEvent.emit()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkClickedEvent.emit()\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n";

/***/ }),

/***/ 43741:
/*!*****************************************************************************************************!*\
  !*** ./src/app/components-page/pj-meinewoche-editor/pj-meinewoche-editor.component.html?ngResource ***!
  \*****************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Meinewocheeditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\" #ContentDiv>\n          <div *ngIf=\"ShowZeitansatzAuswahl === true\" class=\"timepickerclass\"\n               [style.left.px]=\"ZeitansatzPosX\" [style.top.px]=\"ZeitansatzPosY\">\n\n            <table>\n              <tr>\n                <td style=\"width: 160px\" valign=\"top\">\n                  <ion-radio-group [value]=\"Stundenansatz.toString()\" (ionChange)=\"ZeitansatzStundenChanged($event)\">\n\n                    <table class=\"paddingtable\">\n                      <tr><td colspan=\"4\"><ion-text color=\"burnicklgruen\"><b>Stunden</b></ion-text></td></tr>\n                      <tr><td><ion-radio value=\"1\"></ion-radio></td><td>1</td><td><ion-radio value=\"2\"></ion-radio></td><td>2</td><td><ion-radio value=\"3\"></ion-radio></td><td>3</td></tr>\n                      <tr><td><ion-radio value=\"4\"></ion-radio></td><td>4</td><td><ion-radio value=\"5\"></ion-radio></td><td>5</td><td><ion-radio value=\"6\"></ion-radio></td><td>6</td></tr>\n                      <tr><td><ion-radio value=\"7\"></ion-radio></td><td>7</td><td><ion-radio value=\"8\"></ion-radio></td><td>8</td><td><ion-radio value=\"0\"></ion-radio></td><td>0</td></tr>\n                    </table>\n\n                  </ion-radio-group>\n\n\n                </td>\n                <td valign=\"top\">\n\n                  <ion-radio-group [value]=\"Minutenansatz.toString()\" (ionChange)=\"ZeitansatzMinutenChanged($event)\">\n\n                    <table class=\"paddingtable\">\n                      <tr><td colspan=\"2\"><ion-text color=\"burnicklgruen\"><b>Minuten</b></ion-text></td></tr>\n                      <tr><td><ion-radio value=\"0\"></ion-radio></td><td>0</td></tr>\n                      <tr><td><ion-radio value=\"15\"></ion-radio></td><td>15</td></tr>\n                      <tr><td><ion-radio value=\"30\"></ion-radio></td><td>30</td></tr>\n                      <tr><td><ion-radio value=\"45\"></ion-radio></td><td>45</td></tr>\n                    </table>\n\n                  </ion-radio-group>\n                </td>\n              </tr>\n              <tr>\n                <td colspan=\"2\">\n                  <div class=\"timepickerfooterclass\">\n                    <div class=\"rootbuttonclass\" (click)=\"TimepickerOkButtonClickedHandler()\">\n                      <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"checkmark-outline\"></ion-icon>\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            </table>\n\n\n          </div>\n\n          <ion-grid *ngIf=\"DB.CurrentMeinewoche !== null\">\n            <ion-row>\n              <ion-col size=\"12\">\n                <table *ngIf=\"DBProjekte.CurrentProjekt !== null && DBProjektpunkte.CurrentProjektpunkt !== null\" class=\"paddingtable\">\n                  <tr>\n                    <td  style=\"vertical-align: top\">\n                      <div class=\"projectcircleclass\"\n                           [style.background]=\"DBProjekte.GetProjektfarbeByName(DBProjekte.CurrentProjekt.Projektfarbe).Background\">\n                      </div>\n                    </td>\n                    <td style=\"vertical-align: top\"><b>{{DBProjekte.CurrentProjekt.Projektkurzname}}:</b></td>\n                    <td style=\"vertical-align: top\" [innerHTML]=\"DBProjektpunkte.CurrentProjektpunkt.Aufgabe\"></td>\n                  </tr>\n                </table>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <table class=\"paddingsmalltable\" style=\"width: 100%\">\n                  <tr>\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Montagseinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Montag')\"></checkbox-clon></td>\n                          <td>Montag</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Montag')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Montagsstunden, DB.CurrentMeinewoche.Montagsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n                    </td>\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Dienstagseinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Dienstag')\"></checkbox-clon></td>\n                          <td>Dienstag</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Dienstag')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Dienstagsstunden, DB.CurrentMeinewoche.Dienstagsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n                    </td>\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Mittwochsweinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Mittwoch')\"></checkbox-clon></td>\n                          <td>Mittwoch</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Mittwoch')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Mittwochsstunden, DB.CurrentMeinewoche.Mittwochsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n                    </td>\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Donnerstagseinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Donnerstag')\"></checkbox-clon></td>\n                          <td>Donnerstag</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Donnerstag')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Donnerstagsstunden, DB.CurrentMeinewoche.Donnerstagsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n\n                    </td>\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Freitagseinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Freitag')\"></checkbox-clon></td>\n                          <td>Freitag</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Freitag')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Freitagsstunden, DB.CurrentMeinewoche.Freitagsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n\n                    </td>\n                    <!--\n                    <td [style.width.px]=\"Tagbreite\">\n\n                      <table>\n                        <tr>\n                          <td><checkbox-clon [Checked]=\"DB.CurrentMeinewoche.Samstagseinsatz\" (CheckChanged)=\"TagCheckChangedHandler($event, 'Samstag')\"></checkbox-clon></td>\n                          <td>Samstag</td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <div (click)=\"ZeitansatzClicked($event,'Samstag')\" class=\"zeitansatzbuttonclass\">\n                              {{GetZeitansatzstring(DB.CurrentMeinewoche.Samstagsstunden, DB.CurrentMeinewoche.Samstagsminuten)}}\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n\n                    </td>\n                    -->\n\n                  </tr>\n                  <tr>\n                    <td>\n                      <div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">\n                        <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Montag']\" class=\"tagaufteilungeintragdivclass\"\n                             [style.background]=\"GetProjektpunktFarbe(Punkt).Background\"\n                             [style.color]=\"GetProjektpunktFarbe(Punkt).Foreground\"\n                             [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                             [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\">\n                        </div>\n                      </div>\n                    </td>\n                    <td>\n                      <div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">\n                        <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Dienstag']\" class=\"tagaufteilungeintragdivclass\"\n                             [style.background]=\"GetProjektpunktFarbe(Punkt).Background\"\n                             [style.color]=\"GetProjektpunktFarbe(Punkt).Foreground\"\n                             [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                             [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\">\n                          <table style=\"width: 100%\">\n                            <tr>\n                              <td></td>\n                            </tr>\n                          </table>\n                        </div>\n                      </div>\n                    </td>\n                    <td>\n                      <div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">\n                        <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Mittwoch']\" class=\"tagaufteilungeintragdivclass\"\n                             [style.background]=\"GetProjektpunktFarbe(Punkt).Background\"\n                             [style.color]=\"GetProjektpunktFarbe(Punkt).Foreground\"\n                             [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                             [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\">\n                        </div>\n                      </div>\n                    </td>\n                    <td>\n                      <div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">\n                        <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Donnerstag']\" class=\"tagaufteilungeintragdivclass\"\n                             [style.background]=\"GetProjektpunktFarbe(Punkt).Background\"\n                             [style.color]=\"GetProjektpunktFarbe(Punkt).Foreground\"\n                             [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                             [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\">\n                        </div>\n                      </div>\n                    </td>\n                    <td>\n                      <div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">\n                        <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Freitag']\" class=\"tagaufteilungeintragdivclass\"\n                             [style.background]=\"GetProjektpunktFarbe(Punkt).Background\"\n                             [style.color]=\"GetProjektpunktFarbe(Punkt).Foreground\"\n                             [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                             [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\">\n                        </div>\n                      </div>\n                    </td>\n                    <!--\n                    <td><div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">{{Resthoehe}}</div></td>\n                    -->\n                  </tr>\n                </table>\n\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n\n\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelClickedEvent.emit()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClickedHandler()\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"save-outline\"></ion-icon>\n                </div>\n\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n";

/***/ }),

/***/ 78644:
/*!***********************************************************************************************!*\
  !*** ./src/app/components-page/pj-projekt-editor/pj-projekt-editor.component.html?ngResource ***!
  \***********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Projekteditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n              <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"AllgemeinMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"reader-outline\" [color]=\"Bereich === Bereiche.Allgemein ? 'burnicklgruen' : 'weis'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Allgemein ? Basics.Farben.Burnicklgruen : 'white'\">Allgemein</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"BeteiligteMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"people-outline\" [color]=\"Bereich === Bereiche.Beteiligte ? 'burnicklgruen' : 'weis'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Beteiligte ? Basics.Farben.Burnicklgruen : 'white'\">Projektbeteiligte</td>\n                      <td *ngIf=\"DB.CurrentProjekt.Beteiligtenliste.length > 0\" [style.color]=\"Bereich === Bereiche.Beteiligte ? Basics.Farben.Burnicklgruen : 'white'\">[{{DB.CurrentProjekt.Beteiligtenliste.length}}]</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"StrukturMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"home-outline\" [color]=\"Bereich === Bereiche.Gebaeudestruktur ? 'burnicklgruen' : 'weis'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Gebaeudestruktur ? Basics.Farben.Burnicklgruen : 'white'\">GebÃ¤udestruktur</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ng-container [ngSwitch]=\"Bereich\">\n\n\n            <table *ngSwitchCase=\"Bereiche.Allgemein\">\n                <tr>\n                  <td valign=\"top\">\n                    <div class=\"contentleftinnerclass\">\n                      <ion-grid *ngIf=\"DB.CurrentProjekt\">\n                        <ion-row>\n                          <ion-col>\n                            <ion-text color=\"burnicklgruen\"><b>Projekt</b></ion-text>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\" [Required]=\"true\" [MaxLength]=\"100\" Titel=\"Projektname\" [(Value)]=\"DB.CurrentProjekt.Projektname\"></input-clone>\n                          </ion-col>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\" [Required]=\"true\" [MaxLength]=\"20\" Titel=\"Projektnummer\" [(Value)]=\"DB.CurrentProjekt.Projektnummer\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\" [Enabled]=\"DB.CurrentProjekt._id === null\" [Required]=\"true\" [MaxLength]=\"20\" Titel=\"Projektkurzname\" [Value]=\"DB.CurrentProjekt.Projektkurzname\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone [Value]=\"DB.CurrentProjekt.Zeitpunkt\" [Enabled]=\"false\" Titel=\"Startdatum\" [DisabledColor]=\"'black'\" [Clickable]=\"true\"></input-clone>\n                          </ion-col>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (click)=\"StandortClicked()\" [Value]=\"DBStandort.GetStandort(DB.CurrentProjekt.StandortID)\" [Enabled]=\"false\" Titel=\"Standort\" [DisabledColor]=\"'black'\" [Clickable]=\"true\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n\n                        <ion-row>\n                          <ion-col>\n                            <ion-text color=\"burnicklgruen\"><b>Projektanschrift</b></ion-text>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\"Titel=\"Strasse\" [(Value)]=\"DB.CurrentProjekt.Strasse\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\"Titel=\"PLZ\"  [(Value)]=\"DB.CurrentProjekt.PLZ\"></input-clone>\n                          </ion-col>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (TextChanged)=\"TextChanged($event)\"Titel=\"Ort\"  [(Value)]=\"DB.CurrentProjekt.Ort\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <ion-text color=\"burnicklgruen\"><b>Projektleitung</b></ion-text>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (click)=\"ProjektleiterClicked()\"\n                                         [Value]=\"DBMitarbeiter.GetMitarbeitername(DB.CurrentProjekt.ProjektleiterID)\"\n                                         [Enabled]=\"false\" Titel=\"Projektleiter\" [DisabledColor]=\"'black'\" [Clickable]=\"true\"></input-clone>\n                          </ion-col>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (click)=\"StellvertreterClicked()\"\n                                         [Value]=\"DBMitarbeiter.GetMitarbeitername(DB.CurrentProjekt.StellvertreterID)\"\n                                         [Enabled]=\"false\" Titel=\"Stellvertreter\" [DisabledColor]=\"'black'\" [Clickable]=\"true\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <ion-text color=\"burnicklgruen\"><b>Projektstatus</b></ion-text>\n                          </ion-col>\n                        </ion-row>\n\n                        <ion-row>\n                          <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                            <input-clone (click)=\"StatusClicked()\"\n                                         [Value]=\"DB.CurrentProjekt.Status\"\n                                         [Enabled]=\"false\" Titel=\"Status\"\n                                         [DisabledColor]=\"DB.GetProjektstatuscolor(DB.CurrentProjekt.Status)\"\n                                         [Clickable]=\"true\"></input-clone>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row *ngIf=\"DB.CurrentProjekt._id !== null\">\n                          <ion-col>\n                            <table>\n                              <tr>\n                                <td><checkbox-clon [Checked]=\"DeleteEnabled\" (CheckChanged)=\"LoeschenCheckboxChanged($event)\"></checkbox-clon></td>\n                                <td style=\"width: 6px\"></td>\n                                <td>\n                                  <ion-button size=\"small\" color=\"rot\" [disabled]=\"!DeleteEnabled\" (click)=\"LoeschenButtonClicked()\">\n                                    <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                                    <ion-text>Eintrag lÃ¶schen</ion-text>\n                                  </ion-button>\n                                </td>\n                              </tr>\n                            </table>\n                          </ion-col>\n                        </ion-row>\n\n                      </ion-grid>\n\n                    </div>\n\n                  </td>\n                  <td>\n                    <ion-radio-group [value]=\"DB.CurrentProjekt.Projektfarbe\" (ionChange)=\"ProjektfarbeChangedHandler($event)\">\n                      <ion-grid *ngIf=\"DB.CurrentProjekt\">\n                        <ion-row>\n                          <ion-col>\n                            <ion-text color=\"burnicklgruen\"><b>Projektfarbe</b></ion-text>\n                          </ion-col>\n                        </ion-row>\n                        <ion-row>\n                          <ion-col>\n                            <table class=\"paddingtable\">\n                              <tr *ngFor=\"let Farbe of DB.Projektfarbenliste\">\n                                <td>\n                                  <ion-radio [value]=\"Farbe.Name\"></ion-radio>\n                                </td>\n                                <td>\n                                  <div style=\"width: 40px; height: 40px; border-radius: 4px;\" [style.background]=\"Farbe.Background\"></div>\n                                </td>\n                              </tr>\n                            </table>\n                          </ion-col>\n                        </ion-row>\n                      </ion-grid>\n                    </ion-radio-group>\n                  </td>\n                </tr>\n              </table>\n\n            <div *ngSwitchCase=\"Bereiche.Beteiligte\" class=\"contentrightinnerclass\">\n            <!-- Projektbeteiligtenliste -->\n              <div class=\"projektbeteiligtenheaderclass\">\n                <ion-grid *ngIf=\"DB.CurrentProjekt\">\n                  <ion-row>\n                    <ion-col>\n                      <ion-text color=\"burnicklgruen\"><b>Projektbeteiligte</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </div>\n              <div class=\"projektbeteiligtencontentclass\">\n                <!--\n                <div class=\"projektbeteiligtencontentframeclass\">\n                -->\n                  <!--\n                  <div class=\"beteiligtelisteclass\">\n                  -->\n\n                    <ion-list class=\"ion-no-padding\">\n                      <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Beteiligt of Beteiligtenliste, let i = index\" (click)=\"BeteiligteButtonClicked(Beteiligt)\">\n                        <table class=\"paddingsmalltable\" width=\"100%\">\n                          <tr>\n                            <td>\n                              <table>\n                                <tr>\n                                  <td style=\"padding-top: 3px;font-size: 90%\">\n                                    <ng-container *ngIf=\"Beteiligt.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person\">\n                                      {{DBBeteiligte.GetBeteiligtenvorname(Beteiligt)}} {{Beteiligt.Name}}\n                                    </ng-container>\n                                    <ng-container *ngIf=\"Beteiligt.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Firma\">\n                                      {{Beteiligt.Firma}}\n                                    </ng-container>\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"height: 3px\"></td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                <tr>\n                                  <td *ngIf=\"Beteiligt.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person && Beteiligt.Firma !== ''\">\n                                    {{Beteiligt.Firma}}\n                                  </td>\n                                  <ng-container *ngIf=\"Beteiligt.Beteiligtentyp !== 0\">\n                                    <td *ngIf=\"Beteiligt.Beteiligteneintragtyp === Const.Beteiligteneintragtypen.Person\" style=\"padding: 4px\"><div class=\"bullclass\"></div></td>\n                                    <td>{{DBBeteiligte.GetBeteiligtenFachbereichname(Beteiligt.Beteiligtentyp)}}</td>\n                                  </ng-container>\n                                  <ng-container *ngIf=\"Beteiligt.Email !== ''\">\n                                    <td *ngIf=\"Beteiligt.Beteiligtentyp !== 0\" style=\"padding: 4px\"><div class=\"bullclass\"></div></td>\n                                    <td>{{Beteiligt.Email}}</td>\n                                  </ng-container>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"height: 4px\"></td>\n                          </tr>\n                        </table>\n                      </ion-item>\n\n                    </ion-list>\n\n                    <table *ngIf=\"Beteiligtenliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n                      <tr>\n                        <td style=\"height: 60px; text-align: center; vertical-align: center\">\n                          keine EintrÃ¤ge vorhanden\n                        </td>\n                      </tr>\n                    </table>\n\n                    <table>\n                      <tr>\n                        <td>\n                          <ion-button size=\"small\" [color]=\"'burnicklbraun'\"\n                                      (click)=\"AddBeteiligteButtonClicked()\">\n                            <ion-icon name=\"add-circle-outline\" color=\"weiss\" slot=\"start\"></ion-icon>\n                            <ion-text color=\"weiss\">Neuer Eintrag</ion-text>\n                          </ion-button>\n                        </td>\n                      </tr>\n                    </table>\n\n                  <!--\n                  </div>\n                  -->\n                <!--\n                </div>\n                -->\n              </div>\n          </div>\n\n            <ng-container *ngSwitchCase=\"Bereiche.Gebaeudestruktur\">\n              <div *ngIf=\"DB.CurrentProjekt !== null\" class=\"strukturkeeperdiv\">\n\n                <div class=\"strukturbauteildiv\">\n                  <div class=\"strukturbauteilupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>Bauteile</b></ion-text>\n                  </div>\n                  <div class=\"strukturbauteilmiddlediv\">\n                    <ng-container *ngIf=\"DB.CurrentProjekt.Bauteilliste.length > 0\">\n                      <ion-radio-group [value]=\"DBGebaeude.CurrentBauteilindex\" (ionChange)=\"BauteilIndexChanged($event)\">\n                        <table class=\"paddingtable\">\n                          <tr *ngFor=\"let Bauteil of DB.CurrentProjekt.Bauteilliste; let Bauteilindex = index\">\n                            <td style=\"width: 26px\" align=\"center\">\n                              <ion-radio [value]=\"Bauteilindex\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td style=\"width: auto\">\n                              <div class=\"bauteildivclass\" (click)=\"EditBauteilClickedEvent.emit(Bauteil)\">\n                                <table style=\"width: 100%\">\n                                  <tr>\n                                    <td><ion-text>{{Bauteil.Bauteilname}}</ion-text></td><td style=\"text-align: right\">{{Bauteil.Geschossliste.length}}</td>\n                                  </tr>\n                                </table>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                      </ion-radio-group>\n                      <abstand-element-fixed></abstand-element-fixed>\n                    </ng-container>\n                  </div>\n                  <div class=\"strukturbauteillowerdiv\">\n                    <ion-button color=\"burnicklgruen\" size=\"small\" (click)=\"AddBauteilClickedEvent.emit()\">\n                      <ion-icon color=\"burnicklbraun\" name=\"add-circle-outline\"></ion-icon>\n                    </ion-button>\n                  </div>\n                </div>\n                <div  *ngIf=\"DB.CurrentProjekt.Bauteilliste.length > 0 && DBGebaeude.CurrentBauteilindex !== null\" class=\"strukturgeschossldiv\">\n                  <div class=\"strukturgeschossupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>Geschosse</b></ion-text>\n                  </div>\n                  <div class=\"strukturgeschossmiddlediv\">\n                    <ng-container *ngIf=\"DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste.length > 0\">\n                      <ion-radio-group [value]=\"DBGebaeude.CurrentGeschossindex\" (ionChange)=\"GeschossIndexChanged($event)\">\n                        <table class=\"paddingtable\">\n                          <tr *ngFor=\"let Geschoss of DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste; let Geschossindex = index\">\n                            <td style=\"width: 30px\" align=\"center\">\n                              <ion-radio [value]=\"Geschossindex\" mode=\"md\"></ion-radio>\n                            </td>\n                            <td>\n                              <div class=\"bauteildivsmallclass\">\n                                <ion-text><b>{{Geschoss.Kurzbezeichnung !== '' ? Geschoss.Kurzbezeichnung : '---'}}</b></ion-text>\n                              </div>\n                            </td>\n                            <td style=\"width: auto\">\n                              <div class=\"bauteilmediumdivclass\" (click)=\"EditGeschossClickedEvent.emit(Geschoss)\">\n                                <table style=\"width: 100%\">\n                                  <tr>\n                                    <td><ion-text>{{Geschoss.Geschossname}}</ion-text></td>\n                                  </tr>\n                                </table>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                      </ion-radio-group>\n                      <abstand-element-fixed></abstand-element-fixed>\n                    </ng-container>\n                    <table *ngIf=\"DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste.length === 0\" class=\"paddingtable\">\n                      <tr>\n                        <td>Keine Geschosse eingetragen</td>\n                      </tr>\n                    </table>\n                  </div>\n                  <div class=\"strukturgeschosslowerdiv\">\n                    <ion-button color=\"burnicklgruen\" size=\"small\" (click)=\"AddGeschossClickedEvent.emit()\">\n                      <ion-icon color=\"burnicklbraun\" name=\"add-circle-outline\"></ion-icon>\n                    </ion-button>\n                  </div>\n                </div>\n                <div *ngIf=\"DBGebaeude.CurrentGeschoss !== null\" class=\"strukturraeumediv\">\n                  <div class=\"strukturraumupperdiv\">\n                    <ion-text color=\"burnicklgruen\"><b>RÃ¤ume</b></ion-text>\n                  </div>\n                  <div class=\"strukturraummiddlediv\">\n                    <ng-container *ngIf=\"DBGebaeude.CheckGeschossHasRaumliste() === true\">\n                          <table class=\"paddingtable\">\n                            <tr *ngFor=\"let Raum of DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste[DBGebaeude.CurrentGeschossindex].Raumliste; let Raumindex = index\">\n\n                              <td>\n                                <div class=\"bauteildivsmallclass\">\n                                  <ion-text><b>{{Raum.Raumnummer !== '' ? Raum.Raumnummer : '---'}}</b></ion-text>\n                                </div>\n                              </td>\n                              <td style=\"width: auto\">\n                                <div class=\"bauteilmediumdivclass\"  (click)=\"EditRaumClickedEvent.emit(Raum)\">\n                                  <ion-text>{{Raum.Raumname}}</ion-text>\n                                </div>\n                              </td>\n\n                              <ng-container *ngIf=\"ShowRaumVerschieber === true\">\n                                <td>\n                                  <ion-icon [style.cursor]=\"Raumindex > 0 ? 'pointer' : 'default'\" style=\"cursor: pointer\" name=\"chevron-up-circle\"\n                                            [color]=\"Raumindex > 0 ? 'gruen' : '#444444'\"\n                                            (click)=\"RaumUpButtonClicked(Raumindex)\" style=\"font-size: 24px\"></ion-icon>\n                                </td>\n                                <td>\n                                  <ion-icon [style.cursor]=\"Raumindex < DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste[DBGebaeude.CurrentGeschossindex].Raumliste.length - 1 ? 'pointer' : 'default'\" style=\"cursor: pointer\" name=\"chevron-down-circle\"\n                                            [color]=\"Raumindex < DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste[DBGebaeude.CurrentGeschossindex].Raumliste.length - 1 ? 'gruen' : '#444444'\"\n                                            (click)=\"RaumDownButtonClicked(Raumindex)\" style=\"font-size: 24px\"></ion-icon>\n                                </td>\n                              </ng-container>\n\n\n                            </tr>\n                            <tr>\n                              <td colspan=\"10\">\n                                <table  *ngIf=\"DB.CurrentProjekt.Bauteilliste[DBGebaeude.CurrentBauteilindex].Geschossliste[DBGebaeude.CurrentGeschossindex].Raumliste.length > 1\" class=\"paddingtable\" style=\"float: left\">\n                                  <tr>\n                                    <td><checkbox-clon [Checked]=\"ShowRaumVerschieber\" (CheckChanged)=\"RaumVerschiebenCheckChanged()\"></checkbox-clon></td>\n                                    <td>RÃ¤ume verschieben</td>\n                                  </tr>\n                                </table>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td style=\"height: 100px\" colspan=\"10\"></td>\n                            </tr>\n                          </table>\n                      <br>\n\n\n                    </ng-container>\n\n\n                    <table *ngIf=\"DBGebaeude.CheckGeschossHasRaumliste() === false\" class=\"paddingtable\">\n                      <tr>\n                        <td>Keine RÃ¤ume eingetragen</td>\n                      </tr>\n                    </table>\n\n\n                  </div>\n                  <div class=\"strukturraumlowerdiv\">\n                    <ion-button color=\"burnicklgruen\" size=\"small\" (click)=\"AddRaumClickedEvent.emit()\">\n                      <ion-icon color=\"burnicklbraun\" name=\"add-circle-outline\"></ion-icon>\n                    </ion-button>\n                  </div>\n\n                </div>\n\n              </div>\n\n            </ng-container>\n\n\n\n          </ng-container>\n\n        </div>\n\n      </ion-content>\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\">\n\n              <!--\n              <table>\n                <tr>\n                  <td>\n                    CurrentBauteilindex:<br>\n                    {{DBGebaeude.CurrentBauteilindex}}\n                  </td>\n                  <td>\n                    CurrentGeschossindex:<br>\n                    {{DBGebaeude.CurrentGeschossindex}}\n                  </td>\n                  <td>\n                    CurrentRaumindex:<br>\n                    {{DBGebaeude.CurrentRaumindex}}\n                  </td>\n                </tr>\n              </table>\n\n              -->\n\n\n            </td>\n              <td>\n\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n";

/***/ }),

/***/ 93073:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projekte-auswahl/pj-projekte-auswahl.component.html?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%;\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Projekteauswahl) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table>\n            <tr>\n              <td>\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n                    <td [style.color]=\"'white'\">{{Titel}}</td>\n                  </tr>\n                </table>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menufilterbuttonclass\" (click)=\"StandortfilterButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"funnel-outline\"></ion-icon></td>\n                      <td [innerHTML]=\"GetStandortfiller()\"></td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <div class=\"listekeeperclass\">\n\n            <ion-list class=\"ion-no-padding\" *ngIf=\"Projekteliste && Anzeigeliste.length > 0\">\n              <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Projekt of Anzeigeliste, let i = index\">\n                <ion-grid>\n                  <ion-row  *ngIf=\"Projektebuchstabenliste[i] !== ''\">\n                    <ion-col size=\"12\">\n                      <ion-text color=\"orange\"><b>{{Projektebuchstabenliste[i]}}</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"12\">\n\n                        <table class=\"paddingsmalltable\" width=\"100%\">\n                          <tr>\n                            <td>\n                              <table cellspacing=\"0\" cellpadding=\"0\">\n                                <tr>\n                                  <td><checkbox-clon [Index]=\"i\" (CheckChanged)=\"CheckedChanged($event)\" [Checked]=\"Projekt.Selected\"></checkbox-clon></td>\n                                  <td *ngIf=\"!Projekt.Filtered\">\n                                    {{Projekt.Projektname}} / {{Projekt.Projektkurzname}}\n                                  </td>\n                                  <td *ngIf=\"Projekt.Filtered\">\n                                    <span>{{Projekt.Text_A}}</span><span style=\"color: green\">{{Projekt.Text_B}}</span><span>{{Projekt.Text_C}}</span> / {{Projekt.Projektkurzname}}\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td>\n                              <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                <tr>\n                                  <td style=\"width: 28px\"></td>\n                                  <td class=\"ergonametextclass\">Projektnummer:</td><td>{{Projekt.Projektnummer}}</td>\n                                  <td style=\"width: 20px\"></td>\n                                  <td class=\"ergonametextclass\">Stadort:</td><td>{{DBStandort.GetStandort(Projekt.StandortID)}}</td>\n                                </tr>\n                              </table>\n                          </tr>\n                        </table>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n              </ion-item>\n            </ion-list>\n\n            <div *ngIf=\"Projekteliste && Anzeigeliste.length === 0\" class=\"emptymessageclass\">\n              keine EintrÃ¤ge unter diesem Filter vorhanden\n            </div>\n\n            <abstand-element-fixed></abstand-element-fixed>\n\n          </div>\n          <div class=\"alphabetkeeperclass\">\n            <alphabet-relative #SmallAlphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n                      [Buchstabenliste]=\"Projektealphabet\"\n                      [Breite]=\"Alphapetbreite\"\n                      [Auswahl]=\"Projektealphabetauswahl\"></alphabet-relative>\n          </div>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"checkmark-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n";

/***/ }),

/***/ 75642:
/*!***************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-date-kw-picker/pj-projektpunkt-date-kw-picker.html?ngResource ***!
  \***************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.ProjektpunktDateKwPicker) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n        <div class=\"contentinnerclass\">\n\n          <table class=\"paddingtable\" *ngIf=\"DBProjektpunkte.CurrentProjektpunkt !== null\">\n            <tr>\n              <td valign=\"top\">\n                <table>\n                  <tr>\n                    <td style=\"padding-top: 4px; padding-bottom: 12px\">\n                      <ion-text color=\"burnicklgruen\"><b>Termin</b></ion-text>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <ion-radio-group [value]=\"Terminvariante\" (ionChange)=\"TerminStatusChangedHandler($event)\">\n                        <div style=\"overflow: auto\">\n                          <table class=\"paddingtable\">\n                            <tr>\n                              <td><ion-radio [value]=\"Terminvarianten.Stichtag\" mode=\"md\"></ion-radio></td>\n                              <td>Stichtag</td>\n                            </tr>\n                            <tr>\n                              <td><ion-radio [value]=\"Terminvarianten.Kalenderwoche\" mode=\"md\"></ion-radio></td>\n                              <td>Kalenderwoche</td>\n                            </tr>\n                          </table>\n                        </div>\n                      </ion-radio-group>\n                    </td>\n                  </tr>\n                  <tr *ngIf=\"Terminvariante === Terminvarianten.Stichtag\">\n                    <td>\n                      <ion-datetime color=\"burnicklgruen\" style=\"--background: #7b6a58; color: white; border: 1px solid gray;\" first-day-of-week=\"1\" size=\"fixed\"  presentation=\"date\"  [value]=\"GetDatum()\" (ionChange)=\"StichtagChangedEvent($event)\"></ion-datetime>\n                    </td>\n                  </tr>\n                  <tr *ngIf=\"Terminvariante === Terminvarianten.Kalenderwoche\">\n                    <td>\n                      <div style=\"background: #7b6a58; color: white; padding: 4px; width: 350px\">\n\n                        <table class=\"paddingtable\" width=\"100%\">\n                          <tr>\n                            <td colspan=\"8\" style=\"padding-top: 4px; padding-bottom: 6px; padding-left: 10px\">\n\n                              <table width=\"100%\">\n                                <tr>\n                                  <td style=\"font-size: 120%; color: silver\">{{GetEndemonatname()}}</td>\n                                  <td style=\"width: 90px\">\n\n                                    <table>\n                                      <tr>\n                                        <td><ion-icon (click)=\"KalenderwocheMonatRueckwaerts()\" style=\"color: darkgray; font-size: 24px; cursor: pointer\" name=\"chevron-back-outline\"></ion-icon></td>\n                                        <td style=\"width: 30px;\"></td>\n                                        <td><ion-icon (click)=\"KalenderwocheMonatVorwaerts()\" style=\"color: darkgray; font-size: 24px; cursor: pointer\" name=\"chevron-forward-outline\"></ion-icon></td>\n                                      </tr>\n                                    </table>\n\n                                  </td>\n                                </tr>\n                              </table>\n\n                            </td>\n                          </tr>\n                          <tr style=\"text-align: center; color: darkgray\">\n                            <td>KW</td>\n                            <td>Mo</td>\n                            <td>Di</td>\n                            <td>Mi</td>\n                            <td>Do</td>\n                            <td>Fr</td>\n                            <td>Sa</td>\n                            <td>So</td>\n                          </tr>\n                          <tr *ngFor=\"let Tageliste of Kalendertageliste; let wocheindex = index\" style=\"text-align: center\">\n                            <td style=\"height: 40px\">\n                              <div (click)=\"KalenderwocheClicked($event, Tageliste[6])\" class=\"kwdivclass\" [style.background]=\"CheckKalenderwoche(Tageliste[wocheindex].Kalenderwoche) === true ? '#c7d304' : 'none'\">\n                                {{Tageliste[wocheindex].Kalenderwoche}}\n                              </div>\n                            </td>\n                            <td *ngFor=\"let Tag of Tageliste\" [style.color]=\"Tag.Hauptmonat === true ? 'white' : 'darkgray'\">\n                              {{Tag.Tagnummer}}\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 92085:
/*!*********************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-editor/pj-projektpunkt-editor.component.html?ngResource ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Projektpunteditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <div class=\"headerkeeperdiv\">\n            <div class=\"headerleftdiv\">\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td style=\"width: 4px\"></td>\n                  <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n                  <td [style.color]=\"'white'\">{{Titel}}</td>\n                </tr>\n              </table>\n            </div>\n            <div class=\"headerrightdiv\">\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td style=\"text-align: right; color: white\">{{DBProjekt.CurrentProjekt !== null ? DBProjekt.CurrentProjekt.Projektname : 'Projekt unbekannt' }}</td>\n                </tr>\n                <tr>\n                  <td style=\"text-align: right; color: white\">\n                    {{DBProtokoll.GetProtokollByID(DB.CurrentProjektpunkt.ProtokollID) !== null ? DBProtokoll.GetProtokollByID(DB.CurrentProjektpunkt.ProtokollID).Titel : '' }}\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-grid  *ngIf=\"DB.CurrentProjektpunkt !== null\" class=\"maingridclass\">\n            <ion-row>\n              <ion-col size=\"6\">\n\n                <ion-grid>\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.ProtokollID !== null\">\n                    <ion-col size=\"3\">\n\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"3\">\n                      <button-value-date [Datum]=\"GetStartdatum()\"\n                                         [Buttontext]=\"DB.CurrentProjektpunkt.Status !== Const.Projektpunktstatustypen.Festlegung.Name ? 'Startdatum' : 'Datum'\" [ElementID]=\"'start-datum'\" (TimeChanged)=\"StartdatumChanged($event)\"></button-value-date>\n                    </ion-col>\n                    <ion-col size=\"3\" *ngIf=\"DB.CurrentProjektpunkt.Status !== Const.Projektpunktstatustypen.Festlegung.Name && DB.CurrentProjektpunkt.Status !== Const.Projektpunktstatustypen.Protokollpunkt.Name\">\n                      <button-value (ButtonClicked)=\"TerminButtonClicked.emit()\" [Wert_A]=\"GetTerminWert()\" [Buttontext]=\"DB.CurrentProjektpunkt.EndeKalenderwoche === null ? 'Termin' : 'Kalenderwoche'\">\n\n                      </button-value>\n                      <!--\n                      <button-value-date [Datum]=\"GetEndedatum()\" [Buttontext]=\"'Endedatum'\" [ElementID]=\"'ende-datum'\" (TimeChanged)=\"EndedatumChanged($event)\"></button-value-date>\n                      -->\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"3\" *ngIf=\"Pool.Mitarbeiterdaten !== null\">\n                      <button-value [Buttontext]=\"'Fachbereich'\" [Wert_A]=\"DB.CurrentProjektpunkt.Fachbereich\" (ButtonClicked)=\"FachbereichClicked.emit()\"></button-value>\n                    </ion-col>\n                    <ion-col size=\"3\">\n                      <button-value [Buttontext]=\"'Status'\"\n                                    [Wert_A]=\"DB.GetProjektpunktstusByName(DB.CurrentProjektpunkt.Status).Displayname\" [Buttoncolor]=\"Basics.Farben.Burnicklbraun\"\n                                    [Buttonvaluecolor]=\"DB.GetStatuscolor(DB.CurrentProjektpunkt)\" [Enabled]=\"StatusbuttonEnabled\" (ButtonClicked)=\"StatusClicked.emit()\"></button-value>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <ion-col size=\"6\">\n                      <button-value [Buttontext]=\"'Kostengruppe'\"\n                                    [Wert_A]=\"KostenService.GetKostengruppenname(this.DB.CurrentProjektpunkt)\" (ButtonClicked)=\"KostengruppeClicked.emit()\"></button-value>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <ion-col size=\"6\">\n                      <button-value [Buttontext]=\"'GebÃ¤udeteil'\"\n                                    [Wert_A]=\"DBGebaeude.GetGebaeudeteilname(DBProjekt.CurrentProjekt, DB.CurrentProjektpunkt)\" (ButtonClicked)=\"GebaeudeteilClicked.emit()\"></button-value>\n                    </ion-col>\n                  </ion-row>\n\n                  <ion-row>\n                    <ion-col size=\"3\">\n                      <input-clone [MinHeight]=\"44\" [Lines]=\"GetLinienanzahl()\"\n                                   [Clickable]=\"true\" [Enabled]=\"false\" Titel=\"ZustÃ¤ndig Extern\" [Value]=\"GetZustaendigExternListe()\" (click)=\"ZustaendigExternClicked.emit()\"></input-clone>\n                    </ion-col>\n                    <ion-col size=\"3\">\n                      <input-clone [MinHeight]=\"44\" [Lines]=\"GetLinienanzahl()\"\n                                   [Clickable]=\"true\" [Enabled]=\"false\" Titel=\"ZustÃ¤ndig Intern\" [Value]=\"GetZustaendigInternListe()\"\n                                   (click)=\"ZustaendigInternClicked.emit()\"></input-clone>\n                    </ion-col>\n                  </ion-row>\n\n                  <ion-row [hidden]=\"true\">\n                    <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                      <input-clone Titel=\"Aufgabennummer\" [(Value)]=\"DB.CurrentProjektpunkt.Nummer\"></input-clone>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col>\n                      <ion-text color=\"burnicklgruen\"><b>Thema</b></ion-text>\n                    </ion-col>\n                  </ion-row>\n                  <ion-row>\n                    <ion-col size=\"6\">\n\n                        <ion-textarea [value]=\"DB.CurrentProjektpunkt.Aufgabe\" auto-grow style=\"border: 1px solid #444444; min-height: 140px\" (ionChange)=\"AufgabeTextChangedHandler($event)\"></ion-textarea>\n\n                        <!--\n                        <editor\n                          [apiKey]=\"'7hvzif1s8dafhu40z0kjgpw1y4zwc2p5cokjkfox946qpfjc'\"\n                          [init]=\"Editorconfig\" [id]=\"'Maineditor'\"\n                          [(ngModel)]=\"DB.CurrentProjektpunkt.Aufgabe\"\n                          (onNodeChange)=\"AufgabeTextChangedHandler($event)\"\n                          (onChange)=\"AufgabeTextChangedHandler($event)\"\n                          (onPaste)=\"AufgabeTextChangedHandler($event)\" (onCut)=\"AufgabeTextChangedHandler($event)\"\n                          (onKeyPress)=\"AufgabeTextChangedHandler($event)\">\n                        </editor>\n                        -->\n\n\n\n                    </ion-col>\n                  </ion-row>\n\n                  <ion-row  *ngIf=\"DB.CurrentProjektpunkt.Status !== Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <table class=\"paddingtable\">\n                      <tr>\n                        <td>\n\n                          <checkbox-clon [Checked]=\"DB.CurrentProjektpunkt.Meilenstein\" (CheckChanged)=\"MeilensteinCheckChanged($event)\"></checkbox-clon>\n\n                        </td><td>Meilenstein</td>\n                      </tr>\n                    </table>\n\n                  </ion-row>\n\n                  <!--\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.Meilenstein\">\n                    <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                      <button-value [Buttontext]=\"'Vorlauf'\"\n                                    [Wert_A]=\"Vorlaufliste[Vorlaufindex]\"\n                                    (ButtonClicked)=\"VorlaufButtonClicked()\"></button-value>\n                    </ion-col>\n                  </ion-row>\n                  -->\n\n                  <ion-row  *ngIf=\"DB.CurrentProjektpunkt.Status !== Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                      <ion-radio-group [value]=\"DB.CurrentProjektpunkt.Zeitansatzeinheit\" (ionChange)=\"ZeitansatzeinheitChanged($event)\">\n                        <table>\n                          <tr>\n                            <td style=\"padding: 2px\">\n                              <input-clone Titel=\"Zeitansatz\"\n                                           [Value]=\"DB.CurrentProjektpunkt.Zeitansatz.toString()\" (TextChanged)=\"ZeitansatzChangedHandler($event)\">\n                              </input-clone>\n                            </td>\n                            <td style=\"width: 8px\"></td>\n                            <td><ion-radio [value]=\"Const.Zeitansatzeinheitvarianten.Minuten\"></ion-radio></td><td style=\"padding-left: 6px\">Minuten</td>\n                            <td style=\"width: 30px\"></td>\n                            <td><ion-radio [value]=\"Const.Zeitansatzeinheitvarianten.Stunden\"></ion-radio></td><td style=\"padding-left: 6px\">Stunden</td>\n                            <td style=\"width: 30px\"></td>\n                            <td><ion-radio [value]=\"Const.Zeitansatzeinheitvarianten.Tage\"></ion-radio></td><td style=\"padding-left: 6px\">Tage</td>\n                          </tr>\n                        </table>\n                      </ion-radio-group>\n                    </ion-col>\n                  </ion-row>\n\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                      <table class=\"paddingtable\">\n                        <tr>\n                          <td>\n                            <checkbox-clon [Checked]=\"DB.CurrentProjektpunkt.OpenFestlegung\" (CheckChanged)=\"OpenFestlegungCheckChanged($event)\"></checkbox-clon>\n                          </td><td>Festlegung offen</td>\n                        </tr>\n                      </table>\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n\n              </ion-col>\n              <ion-col>\n\n                <ion-grid>\n                  <ion-row *ngIf=\"DB.CurrentProjektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <ion-col size=\"6\">\n\n                      <!--\n\n                      <lop-liste-gebaeudestruktur-picker\n                        [Textcolor]=\"'black'\"\n                        [ShowBorder]=\"false\"\n                        (AddFerstlegungskategorie)=\"AddFerstlegungskategorieHandler($event)\">\n                      </lop-liste-gebaeudestruktur-picker>\n\n                      -->\n\n                    </ion-col>\n                  </ion-row>\n                </ion-grid>\n\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <ion-text color=\"burnicklgruen\"><b>{{DB.CurrentProjektpunkt.Anmerkungenliste.length > 1 ? 'Anmerkungen' : 'Anmerkung'}}</b></ion-text>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n\n                <table class=\"paddingsmalltable\" width=\"100%\">\n                  <tr *ngFor=\"let Eintrag of DB.CurrentProjektpunkt.Anmerkungenliste; let i = index\">\n                    <td style=\"width: 120px\">\n                      <button-value-date-small\n                        [Buttontext]=\"GetAnmerkungdatum(Eintrag.Zeitstempel, i)\" [ElementID]=\"'anmerkungdatum_' + i.toString()\"></button-value-date-small>\n                    </td>\n                    <td style=\"width: auto\">\n                      <ion-textarea  [autoGrow]=\"true\" style=\"border: 1px solid black; border-radius: 4px; margin: 0px\" (ionChange)=\"AnmerkungTextChangedHandler($event, i)\" [value]=\"Eintrag.Anmerkung\"></ion-textarea>\n                    </td>\n                    <td style=\"width: 50px\"><ion-button (click)=\"DeleteAnmerkungClicked(i)\" color=\"rot\" size=\"small\"><ion-icon name=\"trash\"></ion-icon></ion-button></td>\n                  </tr>\n                  <tr>\n                    <td colspan=\"3\">\n                      <ion-button size=\"small\" color=\"burnicklgruen\" (click)=\"AddAnmerkungClicked()\">\n                        <ion-icon name=\"add-circle-outline\" slot=\"icon-only\"></ion-icon>\n                      </ion-button>\n                    </td>\n                  </tr>\n\n                </table>\n\n\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n\n\n\n        </div>\n\n\n        <div *ngIf=\"DB.CurrentProjektpunkt._id !== null\" style=\"position: absolute; width: 100%; height: 60px; background: none; left: 0px; bottom: 0px; padding: 6px\">\n          <table>\n            <tr>\n              <td><checkbox-clon [Checked]=\"DeleteEnabled\" (CheckChanged)=\"CanDeleteCheckedChanged($event)\"></checkbox-clon></td>\n              <td style=\"width: 6px\"></td>\n              <td>\n                <ion-button size=\"small\" color=\"rot\" [disabled]=\"!DeleteEnabled\" (click)=\"DeleteButtonClicked()\">\n                  <ion-icon name=\"trash-outline\" style=\"font-size: 20px\"></ion-icon>\n                  <ion-text>Eintrag lÃ¶schen</ion-text>\n                </ion-button>\n              </td>\n            </tr>\n          </table>\n\n        </div>\n\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n";

/***/ }),

/***/ 35884:
/*!*********************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-projektpunkt-statusdate-picker/pj-projektpunkt-statusdate-picker.html?ngResource ***!
  \*********************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.ProjektpunktStatusDatePicker) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header-center>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header-center>\n      </ion-header>\n\n      <ion-content>\n        <div class=\"contentinnerclass\">\n\n          <table class=\"paddingtable\" *ngIf=\"DBProjektpunkte.CurrentProjektpunkt !== null\">\n            <tr>\n              <td style=\"padding-bottom: 4px\"><ion-text color=\"burnicklgruen\"><b>Status</b></ion-text></td>\n              <td></td>\n\n              <td rowspan=\"2\" *ngIf=\"DBProjektpunkte.CurrentProjektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\" valign=\"top\">\n\n\n                <!--\n                <lop-liste-gebaeudestruktur-picker [Windowhoehe]=\"GetWindowHeight() - 90\" (AddFerstlegungskategorie)=\"AddFerstlegungskategorieHandler($event)\"></lop-liste-gebaeudestruktur-picker>\n                -->\n              </td>\n            </tr>\n            <tr>\n              <td valign=\"top\">\n                <table>\n                  <tr>\n                    <td>\n\n                      <ion-radio-group [value]=\"Status\" (ionChange)=\"StatusChangedHandler($event)\">\n                        <div style=\"overflow: auto\">\n                          <table class=\"paddingtable\">\n                            <tr>\n                              <td><ion-radio [value]=\"Const.Projektpunktstatustypen.Offen.Name\" mode=\"md\"></ion-radio></td>\n                              <td>{{Const.Projektpunktstatustypen.Offen.Displayname}}</td>\n                              <td style=\"width: 12px\"></td>\n                              <td><ion-radio [value]=\"Const.Projektpunktstatustypen.Ruecklauf.Name\" mode=\"md\"></ion-radio></td>\n                              <td>{{Const.Projektpunktstatustypen.Ruecklauf.Displayname}}</td>\n                            </tr>\n                            <tr>\n                              <td><ion-radio [value]=\"Const.Projektpunktstatustypen.Geschlossen.Name\" mode=\"md\"></ion-radio></td>\n                              <td>{{Const.Projektpunktstatustypen.Geschlossen.Displayname}}</td>\n                              <td style=\"width: 12px\"></td>\n                              <td><ion-radio *ngIf=\"ShowProtokollpunkte === true\"[value]=\"Const.Projektpunktstatustypen.Festlegung.Name\" mode=\"md\"></ion-radio></td>\n                              <td><span *ngIf=\"ShowProtokollpunkte === true\">{{Const.Projektpunktstatustypen.Festlegung.Displayname}}</span></td>\n                            </tr>\n                            <tr>\n                              <td><ion-radio [value]=\"Const.Projektpunktstatustypen.Bearbeitung.Name\" mode=\"md\"></ion-radio></td>\n                              <td>{{Const.Projektpunktstatustypen.Bearbeitung.Displayname}}</td>\n                              <td style=\"width: 12px\"></td>\n                              <td><ion-radio *ngIf=\"ShowProtokollpunkte === true\" [value]=\"Const.Projektpunktstatustypen.Protokollpunkt.Name\" mode=\"md\"></ion-radio></td>\n                              <td><span      *ngIf=\"ShowProtokollpunkte === true\">{{Const.Projektpunktstatustypen.Protokollpunkt.Displayname}}</span></td>\n                            </tr>\n\n\n\n                            <!--\n\n                            <ng-container *ngFor=\"let Status of Projektpunkteservice.Statustypenliste\">\n                              <tr *ngIf=\"Status.Name === Const.Projektpunktstatustypen.Protokollpunkt.Name && ShowProtokollpunkte === true\">\n                                <td>\n                                  <ion-radio [value]=\"Status.Name\"></ion-radio>\n                                </td>\n                                <td style=\"color: white; width: 200px; font-size: 90%\">\n                                  {{Status.Displayname}}\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"Status.Name !== Const.Projektpunktstatustypen.Protokollpunkt.Name\">\n                                <td>\n                                  <ion-radio [value]=\"Status.Name\"></ion-radio>\n                                </td>\n                                <td>\n                                  {{Status.Displayname}}\n                                </td>\n                              </tr>\n                            </ng-container>\n                            -->\n\n                          </table>\n                        </div>\n                      </ion-radio-group>\n\n\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style=\"padding-top: 4px; padding-bottom: 12px\">\n                      <ion-text color=\"burnicklgruen\"><b>Termin</b></ion-text>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <ion-radio-group [value]=\"Terminvariante\" (ionChange)=\"TerminStatusChangedHandler($event)\">\n                        <div style=\"overflow: auto\">\n                          <table class=\"paddingtable\">\n                            <tr>\n                              <td><ion-radio [value]=\"Terminvarianten.Stichtag\" mode=\"md\"></ion-radio></td>\n                              <td>Stichtag</td>\n                            </tr>\n                            <tr>\n                              <td><ion-radio [value]=\"Terminvarianten.Kalenderwoche\" mode=\"md\"></ion-radio></td>\n                              <td>Kalenderwoche</td>\n                            </tr>\n                          </table>\n                        </div>\n                      </ion-radio-group>\n                    </td>\n                  </tr>\n                  <tr *ngIf=\"Terminvariante === Terminvarianten.Stichtag\">\n                    <td>\n                      <ion-datetime color=\"burnicklgruen\" style=\"--background: #7b6a58; color: white; border: 1px solid gray;\" first-day-of-week=\"1\" size=\"fixed\"  presentation=\"date\"  [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"StichtagChangedEvent($event)\"></ion-datetime>\n                    </td>\n                  </tr>\n                  <tr *ngIf=\"Terminvariante === Terminvarianten.Kalenderwoche\">\n                    <td>\n                      <div style=\"background: #7b6a58; color: white; padding: 4px; width: 350px\">\n\n                        <table class=\"paddingtable\" width=\"100%\">\n                          <tr>\n                            <td colspan=\"8\" style=\"padding-top: 4px; padding-bottom: 6px; padding-left: 10px\">\n\n                              <table width=\"100%\">\n                                <tr>\n                                  <td style=\"font-size: 120%; color: silver\">{{GetEndemonatname()}}</td>\n                                  <td style=\"width: 90px\">\n\n                                    <table>\n                                      <tr>\n                                        <td><ion-icon (click)=\"KalenderwocheMonatRueckwaerts()\" style=\"color: darkgray; font-size: 24px; cursor: pointer\" name=\"chevron-back-outline\"></ion-icon></td>\n                                        <td style=\"width: 30px;\"></td>\n                                        <td><ion-icon (click)=\"KalenderwocheMonatVorwaerts()\" style=\"color: darkgray; font-size: 24px; cursor: pointer\" name=\"chevron-forward-outline\"></ion-icon></td>\n                                      </tr>\n                                    </table>\n\n                                  </td>\n                                </tr>\n                              </table>\n\n                            </td>\n                          </tr>\n                          <tr style=\"text-align: center; color: darkgray\">\n                            <td>KW</td>\n                            <td>Mo</td>\n                            <td>Di</td>\n                            <td>Mi</td>\n                            <td>Do</td>\n                            <td>Fr</td>\n                            <td>Sa</td>\n                            <td>So</td>\n                          </tr>\n                          <tr *ngFor=\"let Tageliste of Kalendertageliste; let wocheindex = index\" style=\"text-align: center\">\n                            <td style=\"height: 40px\">\n                              <div (click)=\"KalenderwocheClicked($event, Tageliste[6])\" class=\"kwdivclass\" [style.background]=\"CheckKalenderwoche(Tageliste[wocheindex].Kalenderwoche) === true ? '#c7d304' : 'none'\">\n                                {{Tageliste[wocheindex].Kalenderwoche}}\n                              </div>\n                            </td>\n                            <td *ngFor=\"let Tag of Tageliste\" [style.color]=\"Tag.Hauptmonat === true ? 'white' : 'darkgray'\">\n                              {{Tag.Tagnummer}}\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n\n          <!--\n\n              <table class=\"paddingtable\">\n                <tr>\n                  <td>\n\n                  </td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td valign=\"top\" style=\"color: white\">\n                    <table>\n                      <tr>\n                        <td>\n\n                          <ion-radio-group [value]=\"Status\" (ionChange)=\"StatusChangedHandler($event)\">\n                            <table class=\"paddingtable\" style=\"color: white;\">\n                              <ng-container *ngFor=\"let Status of Projektpunkteservice.Statustypenliste\">\n                                <tr *ngIf=\"Status.Name === Const.Projektpunktstatustypen.Protokollpunkt.Name && ShowProtokollpunkte === true\">\n                                  <td>\n                                    <ion-radio [value]=\"Status.Name\"></ion-radio>\n                                  </td>\n                                  <td style=\"color: white; width: 200px; font-size: 90%\">\n                                    {{Status.Displayname}}\n                                  </td>\n                                </tr>\n                                <tr *ngIf=\"Status.Name !== Const.Projektpunktstatustypen.Protokollpunkt.Name\">\n                                  <td>\n                                    <ion-radio [value]=\"Status.Name\"></ion-radio>\n                                  </td>\n                                  <td>\n                                    {{Status.Displayname}}\n                                  </td>\n                                </tr>\n                              </ng-container>\n                            </table>\n                          </ion-radio-group>\n\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <ion-text color=\"primary\"><b>Datum</b></ion-text>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <ion-datetime first-day-of-week=\"1\" size=\"fixed\"  presentation=\"date\" style=\"--background: black; color: white; border: 1px solid gray\" [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedEvent($event)\"></ion-datetime>\n                        </td>\n                      </tr>\n                    </table>\n\n                  </td>\n                  <td *ngIf=\"Projektpunkteservice.Projektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                    <div style=\"width: 1px; background: #444444\" [style.max-height.px]=\"GetWindowHeight() - 90\"></div>\n                  </td>\n                  <td *ngIf=\"Projektpunkteservice.Projektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\" valign=\"top\">\n\n                    <lop-liste-gebaeudestruktur-picker [Windowhoehe]=\"GetWindowHeight() - 90\" (AddFerstlegungskategorie)=\"AddFerstlegungskategorieHandler($event)\"></lop-liste-gebaeudestruktur-picker>\n\n                  </td>\n\n                </tr>\n                <tr>\n                  <td colspan=\"10\" align=\"right\" style=\"padding-right: 12px\">\n                    <ion-button size=\"small\" color=\"gruen\" (click)=\"FertigButtonClicked($event)\">Fertig</ion-button>\n                  </td>\n                </tr>\n              </table>\n\n              -->\n\n        </div>\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 72379:
/*!***************************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-editor/pj-protokoll-editor.component.html?ngResource ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Protokolleditor) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n              <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"AllgemeinMenuButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"reader-outline\" [color]=\"Bereich === Bereiche.Allgemein ? 'burnicklgruen' : 'weis'\"></ion-icon></td>\n                      <td [style.color]=\"Bereich === Bereiche.Allgemein ? Basics.Farben.Burnicklgruen : 'white'\">Allgemein</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"Valid === true ? ThemenlisteMenuButtonClicked() : null\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"list-outline\" [color]=\"GetThemenlisteIconcolor()\"></ion-icon></td>\n                      <td [style.color]=\"GetThemenlisteTextcolor()\">Themenliste</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ng-container [ngSwitch]=\"Bereich\">\n\n            <ng-container *ngSwitchCase=\"Bereiche.Allgemein\">\n\n              <ion-grid>\n                <ion-row>\n                  <ion-col size=\"3\">\n                    <ion-text color=\"burnicklgruen\"><b>{{DBProjekte.CurrentProjekt !== null ? DBProjekte.CurrentProjekt.Projektname : 'Projekt unbekannt' }}</b></ion-text>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <input-clone [(Value)]=\"DB.CurrentProtokoll.Titel\" [Titel]=\"'Titel'\" [Required]=\"true\" [MaxLength]=\"150\" (TextChanged)=\"TextChangedHandler()\"></input-clone>\n                  </ion-col>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <input-clone [(Value)]=\"DB.CurrentProtokoll.Protokollnummer\" [Titel]=\"'Protokollnummer'\" [Required]=\"true\" [MaxLength]=\"150\"  (TextChanged)=\"TextChangedHandler()\"></input-clone>\n                  </ion-col>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <input-clone [(Value)]=\"DB.CurrentProtokoll.Besprechungsort\" [Titel]=\"'Besprechungsort'\" [Required]=\"true\" [MaxLength]=\"20\" (TextChanged)=\"TextChangedHandler()\"></input-clone>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col>\n                    <span *ngIf=\"DB.CurrentProtokoll.Protokollnummer === ''\" style=\"font-size: 90%; color: gray;\">Letzte Protokollnummer {{DB.GetLetzteProtokollnummer()}}</span>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <button-value-date [Datum]=\"GetDatum()\" [Buttontext]=\"'Datum'\" [ElementID]=\"'datum'\" (TimeChanged)=\"DatumChanged($event)\" [ShowKW]=\"true\"></button-value-date>\n                  </ion-col>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <button-value [Buttontext]=\"'Leistungsphase'\"\n                                  [Wert_A]=\"DB.CurrentProtokoll.Leistungsphase !== Const.NONE ? DB.CurrentProtokoll.Leistungsphase : 'unbekannt'\"\n                                  (ButtonClicked)=\"LeistungsphaseButtonClicked()\"></button-value>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <button-value-time [Uhrzeit]=\"GetStartzeit()\" [Buttontext]=\"'Start'\" [ElementID]=\"'Startpicker'\" (TimeChanged)=\"StartzeitChanged($event)\"></button-value-time>\n                  </ion-col>\n                  <ion-col [size]=\"Tools.GetButtonvalueSize()\">\n                    <button-value-time [Uhrzeit]=\"GetEndezeit()\" [Buttontext]=\"'Ende'\" [ElementID]=\"'Endepicker'\" (TimeChanged)=\"EndezeitChanged($event)\"></button-value-time>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"6\">\n                    <input-clone [MinHeight]=\"44\" [Lines]=\"DB.CurrentProtokoll.BeteiligtInternIDListe.length\"\n                                 [Clickable]=\"true\" [Enabled]=\"false\" Titel=\"Teilnehmer Intern\" [Value]=\"GetTeamteilnehmerliste()\" (click)=\"TeamteilnehmerClicked.emit()\"></input-clone>\n                  </ion-col>\n                  <ion-col size=\"6\">\n                    <input-clone [MinHeight]=\"44\" [Lines]=\"DB.CurrentProtokoll.BeteiligExternIDListe.length\"\n                                 [Clickable]=\"true\" [Enabled]=\"false\" Titel=\"Teilnehmer Extern\" [Value]=\"GetBeteiligteteilnehmerliste()\"\n                                 (click)=\"BeteiligteteilnehmerClicked.emit()\"></input-clone>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col [size]=\"12\">\n                    <input-clone [(Value)]=\"DB.CurrentProtokoll.Notizen\" [Titel]=\"'Notizen'\" [Lines]=\"6\" (TextChanged)=\"TextChangedHandler()\"></input-clone>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n\n            </ng-container>\n            <ng-container *ngSwitchCase=\"Bereiche.Themenliste\">\n\n              <div style=\"width: 100%; overflow: hidden\" [style.height.px]=\"Gesamthoehe\">\n\n                <div style=\"width: 100%;\" [style.height.px]=\"Titelhoehe\">\n                  <ion-grid>\n                    <ion-row>\n                      <ion-col size=\"3\">\n                        <ion-text color=\"burnicklgruen\"><b>{{DBProjekte.CurrentProjekt !== null ? DBProjekte.CurrentProjekt.Projektname : 'Projekt unbekannt' }}</b></ion-text>\n                      </ion-col>\n                    </ion-row>\n                    <ion-row>\n                      <ion-col size=\"3\">\n                        <ion-text color=\"burnicklgruen\">\n                          <b>\n                            {{DB.CurrentProtokoll.Titel}} &bull; {{GetDatum().format('DD.MM.YYYY')}}\n                          </b>\n                        </ion-text>\n                      </ion-col>\n                    </ion-row>\n                  </ion-grid>\n                </div>\n                <div style=\"width: 100%; display: flex; justify-content: center; align-items: flex-end;\" [style.height.px]=\"Listeheaderhoehe\">\n                  <table class=\"listeheaderclass\" style=\"color: black\">\n                    <tr>\n                      <td style=\"width: 30px; text-align: center\"><b>Nr.</b></td>\n                      <td style=\"width: 600px\"><b>Beschreibung</b></td>\n                      <td style=\"width: 90px\"><b>Termin</b></td>\n                      <td style=\"width: 110px\"><b>Status</b></td>\n                      <td style=\"width: 100px; text-align: center\"><b>ZustÃ¤ndig</b></td>\n                    </tr>\n                  </table>\n                </div>\n\n                <div style=\"width: 100%; display: flex; justify-content: center; align-items: flex-start; overflow: auto\" [style.height.px]=\"Listehoehe\">\n\n                  <table  style=\"width: 100%\">\n                    <tr *ngFor=\"let Projektpunkt of Punkteliste;\">\n                      <td>\n                        <div (click)=\"ProtokollpunktClicked.emit(Projektpunkt)\" style=\"width: 100%; display: flex; justify-content: center; align-items: flex-start;\">\n\n                          <table class=\"docinnertablespezial\">\n                            <tr>\n                              <td style=\"width: 30px\" align=\"center\" valign=\"middle\">\n\n                                <!-- Nummer -->\n\n                                <table class=\"nobordersmalltable\">\n                                  <tr>\n                                    <td style=\"text-align: center; font-size: 90%\">{{Projektpunkt.Nummer}}</td>\n                                  </tr>\n                                </table>\n                              </td>\n                              <td valign=\"top\" style=\"height: inherit; width: 600px\">\n\n                                <!-- Aufgabe --->\n\n                                <table class=\"nobordersmalltable\" style=\"width: 100%;\">\n                                  <tr>\n                                    <td>\n                                      <div  class=\"aufgabedivclass\">\n\n                                        <table style=\"font-size: 90%\">\n                                          <tr *ngIf=\"Projektpunkt.Status === Const.Projektpunktstatustypen.Festlegung.Name\">\n                                            <td  style=\"color: #FF9333; font-weight: bold; vertical-align: top; min-width: 20px\">{{KostenService.GetKostengruppenname(Projektpunkt)}}</td>\n                                          </tr>\n                                          <tr>\n                                            <td [innerHTML]=\"Tools.FormatLinebreaks(Projektpunkt.Aufgabe) | safe: 'html'\"></td>\n                                          </tr>\n                                        </table>\n\n\n                                      </div>\n\n                                    </td>\n                                  </tr>\n                                </table>\n\n                              </td>\n                              <td style=\"height: inherit; width: 90px\">\n\n                                <!-- Termin -->\n\n                                <div style=\"height: 100%; padding: 6px;\" *ngIf=\"Projektpunkt.Status !== Const.Projektpunktstatustypen.Protokollpunkt.Name &&\n                                    Projektpunkt.Status !== Const.Projektpunktstatustypen.Festlegung.Name &&\n                                    Projektpunkt.Status !== Const.Projektpunktstatustypen.Geschlossen.Name &&\n                                    Projektpunkt.Status !== Const.Projektpunktstatustypen.Protokollpunkt.Name\"\n                                     [style.background]=\"DBProjektpunkte.GetFaelligBackground(Projektpunkt)\">\n\n                                  <table width=\"100%\" class=\"nobordersmalltable\">\n                                    <tr>\n                                      <td style=\"font-size: 90%; text-align: center\" [style.color]=\"DBProjektpunkte.CheckProjektpunktFaellig(Projektpunkt) === Const.Faelligkeitsstatus.Nicht_faellig ? 'black' : 'white'\">\n                                        {{GetTermindatum(Projektpunkt)}}\n                                      </td>\n                                    </tr>\n                                  </table>\n\n                                </div>\n\n                              </td>\n                              <td style=\"width: 110px\">\n\n                                <!-- Status -->\n\n                                <div class=\"statusdivclass\"\n                                     [style.background]=\"DBProjektpunkte.GetProjektpunktstusByName(Projektpunkt.Status).Color\"\n                                     (click)=\"ProjektpunktStatusClicked(Projektpunkt)\">\n                                  {{DBProjektpunkte.GetProjektpunktstusByName(Projektpunkt.Status).Displayname}}\n                                </div>\n\n                              </td>\n\n                              <td style=\"height: inherit; width: 100px\">\n\n                                <!-- ZustÃ¤ndig -->\n\n                                <table class=\"nobordersmalltable\" style=\"width: 100%\">\n                                  <tr  *ngFor=\"let ZustaendigID of Projektpunkt.ZustaendigeInternIDListe\">\n                                    <td style=\"text-align: center; color: black; font-size: 90%\">\n                                      {{GetZustaendigInternName(ZustaendigID)}}\n                                    </td>\n                                  </tr>\n                                  <tr *ngIf=\"Projektpunkt.ZustaendigeExternIDListe.length > 0 && Projektpunkt.ZustaendigeInternIDListe.length > 0\">\n                                    <td style=\"text-align: center; font-size: 180%; font-weight: bold\">&bull;</td>\n                                  </tr>\n                                  <tr *ngFor=\"let ZustaendigID of Projektpunkt.ZustaendigeExternIDListe\">\n                                    <td style=\"text-align: center; color: black; font-size: 90%\">\n                                      {{GetZustaendigExternName(ZustaendigID)}}\n                                    </td>\n                                  </tr>\n                                </table>\n                              </td>\n\n                            </tr>\n                          </table>\n\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n\n                        <ion-grid>\n                          <ion-row>\n                            <ion-col>\n                              <ion-button size=\"small\" [color]=\"Valid === true ? 'burnicklbraun' : 'grau'\"\n                                          (click)=\"Valid === true ? AddProtokollpunktClicked.emit() : null\">\n                                <ion-icon name=\"add-circle-outline\" color=\"weiss\" slot=\"start\"></ion-icon>\n                                <ion-text color=\"weiss\">Neuer Eintrag</ion-text>\n                              </ion-button>\n                            </ion-col>\n                          </ion-row>\n                          <ion-row>\n                            <ion-col>\n                              <div *ngIf=\"CheckOkButtonEnabled()\" class=\"savestatusdivclass\" [style.background]=\"ProtokollSaved === true ? 'green' : 'red'\"></div>\n                            </ion-col>\n                          </ion-row>\n                        </ion-grid>\n\n                      </td>\n                    </tr>\n                  </table>\n\n\n                </div>\n              </div>\n\n            </ng-container>\n\n          </ng-container>\n\n\n\n\n          </div>\n\n      </ion-content>\n\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <!--\n              <td *ngIf=\"Bereich === Bereiche.Themenliste\">\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? AddProtokollpunktClicked.emit() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"add-circle-outline\"></ion-icon>\n                </div>\n              </td>\n              -->\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"Valid === true ? OkButtonClicked() : null\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"Valid === true ? 'burnicklgruen' : 'burnicklbraun'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n";

/***/ }),

/***/ 17931:
/*!*************************************************************************************************************!*\
  !*** ./src/app/components-page/pj-protokoll-listefilter/pj-protokoll-listefilter.component.html?ngResource ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none; width: 100%; height: 100%\">\n  <div  class=\"keeperdivclass\" [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Protokolllistefilter) ? 'rgba(0, 0, 0, 0.5)' : 'none'\" (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td style=\"width: 4px\"></td>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"contentinnerclass\">\n\n          <ion-radio-group [value]=\"DB.Zeitfiltervariante\" (ionChange)=\"DB.SetZeitspannenfilter($event)\">\n\n            <table class=\"paddingtable\">\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"Const.NONE\" mode=\"md\"></ion-radio></td><td>Kein Filter</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Dieser_Monat\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(0)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Letzter_Monat\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(1)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Vorletzter_Monat\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(2)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Vor_drei_Monaten\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(3)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Vor_vier_Monaten\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(4)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Vor_fuenf_Monaten\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(5)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Vor_sechs_Monaten\" mode=\"md\"></ion-radio></td><td colspan=\"3\">{{GetMonatsstring(6)}}</td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Bis_zum_Zeitpunkt\" mode=\"md\"></ion-radio></td><td>Bis zum Zeitpunkt</td>\n                <td><button-value-date [Buttontext]=\"'Enddatum'\" [Datum]=\"DB.MaxDatum\"></button-value-date></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Seit_dem_Zeitpunkt\" mode=\"md\"></ion-radio></td><td>Seit dem Zeitpunkt</td>\n                <td><button-value-date [Buttontext]=\"'Startdatum'\" [Datum]=\"DB.MinDatum\"></button-value-date></td><td></td>\n              </tr>\n              <tr>\n                <td style=\"height: 44px\"><ion-radio [value]=\"DB.Zeitfiltervarianten.Zeitspanne\" mode=\"md\"></ion-radio></td><td>Zeitspanne</td>\n                <td style=\"width: 200px\"><button-value-date [Buttontext]=\"'Startdatum'\" [Datum]=\"DB.Startdatumfilter\"></button-value-date></td>\n                <td style=\"width: 200px\"><button-value-date [Buttontext]=\"'Enddatum'\" [Datum]=\"DB.Enddatumfilter                                                                                                                                                                                                                                                                  \"></button-value-date></td>\n              </tr>\n            </table>\n\n          </ion-radio-group>\n\n\n\n        </div>\n\n      </ion-content>\n\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" [color]=\"'burnicklgruen'\" name=\"save-outline\"></ion-icon>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n\n\n\n\n";

/***/ }),

/***/ 96914:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/abstand-element-fixed/abstand-element-fixed.component.html?ngResource ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div style=\"height: 400px; width: 100%\"></div>\n";

/***/ }),

/***/ 8448:
/*!********************************************************************************!*\
  !*** ./src/app/components/alphabet-relative/alphabet-relative.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div [ngStyle]=\"Style\" class=\"alphabetclass\">\n\n\n  <div *ngFor=\"let Buchstabe of Filterliste; let i = index\" class=\"alphabetitem\"\n        (click)=\"AlphabetClickedHandler(Buchstabe)\">\n       <ion-badge style=\"background: none; border: 2px solid\" [style.color]=\"Buchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'white'\"\n                  [style.border-color]=\"Buchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : this.Basics.Farben.Burnicklgrau\">\n          {{Buchstabe}}\n       </ion-badge>\n  </div>\n\n</div>\n\n<!--\nBuchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'none'\"\n                  -->\n";

/***/ }),

/***/ 41245:
/*!**************************************************************!*\
  !*** ./src/app/components/alphabet/alphabet.html?ngResource ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"alphabetclass\" [ngStyle]=\"Style\">\n  <div *ngFor=\"let Buchstabe of Filterliste; let i = index\" class=\"alphabetitem\"\n        (click)=\"AlphabetClickedHandler(Buchstabe)\">\n       <ion-badge style=\"background: none; border: 2px solid\" [style.color]=\"Buchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'white'\"\n                  [style.border-color]=\"Buchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : this.Basics.Farben.Burnicklgrau\">\n          {{Buchstabe}}\n       </ion-badge>\n  </div>\n</div>\n\n<!--\nBuchstabe === Auswahl ? this.Basics.Farben.Burnicklgruen : 'none'\"\n                  -->\n";

/***/ }),

/***/ 88402:
/*!**************************************************************************!*\
  !*** ./src/app/components/auswahl-dialog/auswahl-dialog.html?ngResource ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div [style.z-index]=\"ZIndex\" style=\"position: absolute; top: 0px; left: 0px; background: none;  width: 100%; height: 100%\">\n  <div class=\"keeperdivclass\"\n       [style.background]=\"Displayservice.ShowOpacity(Displayservice.Dialognamen.Auswahldialog) === true ? 'rgba(0, 0, 0, 0.5)' : 'none'\"\n       (click)=\"ContentClicked($event)\">\n    <div class=\"contentdivclass\"\n         [style.width.px]=\"Dialogbreite\"\n         [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n      <ion-header>\n        <page-header>\n          <table class=\"paddingsmalltable\">\n            <tr>\n              <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n              <td [style.color]=\"'white'\">{{Titel}}</td>\n            </tr>\n          </table>\n\n        </page-header>\n      </ion-header>\n\n      <ion-content>\n\n        <div class=\"innerkeeperclass\">\n          <ion-radio-group [value]=\"Auswahlindex\" (ionChange)=\"IndexChangedHandler($event)\">\n            <table class=\"paddingtable\">\n              <tr>\n                <td colspan=\"3\" style=\"height: 6px\"></td>\n              </tr>\n              <tr *ngFor=\"let Eintrag of Auswahlliste; let i = index\">\n                <td>\n                  <ion-radio [value]=\"Eintrag.Index\" mode=\"md\"></ion-radio>\n                </td>\n                <td style=\"font-weight: bold\" [innerHTML]=\"Eintrag.FirstColumn   | safe : 'html'\"></td>\n                <td                           [innerHTML]=\"Eintrag.SecoundColumn | safe : 'html'\"></td>\n              </tr>\n              <tr>\n                <td colspan=\"3\" style=\"height: 6px\"></td>\n              </tr>\n            </table>\n          </ion-radio-group>\n        </div>\n\n      </ion-content>\n\n      <ion-footer>\n        <page-footer>\n          <table class=\"paddingsmalltable\" width=\"100%\">\n            <tr>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"CancelButtonClicked()\">\n                  <ion-icon style=\"font-size: 32px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n                </div>\n\n              <td style=\"width: 100%\"></td>\n              <td>\n\n                <div class=\"rootbuttonclass\" (click)=\"OkButtonClicked()\">\n                  <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"save-outline\"></ion-icon>\n                </div>\n\n              </td>\n            </tr>\n          </table>\n        </page-footer>\n      </ion-footer>\n\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ 76151:
/*!********************************************************************************************!*\
  !*** ./src/app/components/button-value-date-small/button-value-date-small.html?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div class=\"buttonclass\" tappable  [id]=\"ElementID\"  [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\">\n\n\n    <div class=\"infokeeperclass\" [style.background]=\"InnerBackgroundcolor\">\n\n      <table>\n        <tr>\n          <td style=\"color: white\" [innerHTML]=\"Buttontext\"></td>\n        </tr>\n      </table>\n\n    </div>\n\n</div>\n<!--\n<ion-button *ngIf=\"ToolboxDesign === false\" [id]=\"ElementID\" [size]=\"Buttonsize\" [color]=\"Enabled ? Basics.Ionicfarben.Blau : Basics.Ionicfarben.GRAU\">{{Buttontext}}</ion-button>\n-->\n<ion-modal [trigger]=\"ElementID\">\n  <ng-template>\n    <ion-content force-overscroll=\"false\">\n\n      <!--\n      monthNames=\"Januar, Februar, MÃ¤rz, April, Mai, Juni, Juli, August, September, Oktober, November, Dezember\"\n      monthShortNames=\"Jan., Feb., Mrz., Apr., Mai, Jun., Jul., Aug., Sep., Okt., Nov., Dez.\" first-day-of-week=\"1\"\n      [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedHandler($event)\"\n      -->\n        <ion-datetime #DatePicker\n                      locale=\"de-DE\"\n                      showDefaultButtons=\"true\"\n                      doneText=\"Fertig\"\n                      cancelText=\"Abbrechen\"\n                      [min]=\"Minimumstring\"\n                      [max]=\"Maximumstring\"\n                      presentation=\"date\" [value]=\"Datum.format('YYYY-MM-DD')\" color=\"burnicklgruen\" (ionChange)=\"DateChangedHandler($event)\">\n        </ion-datetime>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n\n";

/***/ }),

/***/ 58213:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-date/button-value-date.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div class=\"buttonclass\" tappable  [id]=\"ElementID\"  [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\">\n\n  <div style=\"height: 100%; width: 60%;\">\n    <div class=\"buttontextclass\">\n      <table class=\"paddingtable\" cellspacing=\"0\" cellpadding=\"0\">\n        <tr>\n          <td height=\"100%\" valign=\"middle\">\n            <ion-text color=\"weiss\">{{Buttontext}}</ion-text>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"outerinfokeeperclass\">\n    <div class=\"infokeeperclass\" [style.background]=\"InnerBackgroundcolor\">\n\n      <table>\n        <tr>\n          <td style=\"color: white\">{{Datum !== null ? Datum.format('DD.MM.YYYY') : '------'}}</td>\n          <ng-container *ngIf=\"ShowKW\">\n            <td style=\"width: 16px; text-align: center; font-size: 26px\">&bull;</td>\n            <td>KW{{Datum.isoWeek()}}</td>\n          </ng-container>\n        </tr>\n      </table>\n\n    </div>\n  </div>\n</div>\n<!--\n<ion-button *ngIf=\"ToolboxDesign === false\" [id]=\"ElementID\" [size]=\"Buttonsize\" [color]=\"Enabled ? Basics.Ionicfarben.Blau : Basics.Ionicfarben.GRAU\">{{Buttontext}}</ion-button>\n-->\n<ion-modal [trigger]=\"Enabled === true ? ElementID : null\">\n  <ng-template>\n    <ion-content force-overscroll=\"false\">\n\n      <!--\n      monthNames=\"Januar, Februar, MÃ¤rz, April, Mai, Juni, Juli, August, September, Oktober, November, Dezember\"\n      monthShortNames=\"Jan., Feb., Mrz., Apr., Mai, Jun., Jul., Aug., Sep., Okt., Nov., Dez.\" first-day-of-week=\"1\"\n      [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedHandler($event)\"\n      -->\n        <ion-datetime #DatePicker\n                      locale=\"de-DE\"\n                      showDefaultButtons=\"true\"\n                      doneText=\"Fertig\"\n                      cancelText=\"Abbrechen\"\n                      [min]=\"Minimumstring\"\n                      [max]=\"Maximumstring\"\n                      presentation=\"date\" [value]=\"Datum.format('YYYY-MM-DD')\" color=\"burnicklgruen\" (ionChange)=\"DateChangedHandler($event)\">\n        </ion-datetime>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n\n";

/***/ }),

/***/ 13907:
/*!********************************************************************************!*\
  !*** ./src/app/components/button-value-time/button-value-time.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"buttonclass\" [id]=\"ElementID\" [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\" (click)=\"ButtonClickedHandler()\">\n\n  <div style=\"height: 100%; width: 60%;\">\n    <div class=\"buttontextclass\">\n      <table class=\"paddingtable\" cellspacing=\"0\" cellpadding=\"0\">\n        <tr>\n          <td height=\"100%\" valign=\"middle\">\n            <ion-text color=\"weiss\">{{Uhrzeit !== null ? Buttontext : 'Uhrzeit nicht definiert'}}</ion-text>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"outerinfokeeperclass\">\n    <div class=\"infokeeperclass\" [style.background]=\"InnerBackgroundcolor\">\n\n      <span style=\"color: white\">{{Uhrzeit.format('HH:mm')}}</span>\n\n    </div>\n  </div>\n</div>\n\n<ngx-material-timepicker class=\"timepicker\" #Timepicker\n                         [cancelBtnTmpl]=\"cancelButtonTemplate\"\n                         [confirmBtnTmpl]=\"okButtonTemplate\"\n                         [disableAnimation]=\"true\"\n                         [format]=\"24\" (timeSet)=\"CancelButtonClicked()\" [defaultTime]=\"Uhrzeit.format('HH:mm')\"\n                         (timeChanged)=\"TimeChangedHandler($event)\"   (submit)=\"CancelButtonClicked()\" (click)=\"CancelButtonClicked()\" (cancel)=\"CancelButtonClicked()\"></ngx-material-timepicker>\n\n<ng-template #cancelButtonTemplate>\n  <div class=\"cancelbuttonclass\">\n    <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"close-outline\"></ion-icon>\n  </div>\n  <!--\n  -->\n</ng-template>\n\n<ng-template #okButtonTemplate>\n  <div class=\"okbuttonclass\">\n    <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"save-outline\"></ion-icon>\n  </div>\n\n</ng-template>\n\n<!--\n\n<ion-modal [trigger]=\"ElementID\">\n  <ng-template>\n    <ion-content force-overscroll=\"false\">\n\n\n      <ion-datetime #DatePicker\n                    locale=\"de-DE\"\n                    showDefaultButtons=\"true\"\n                    doneText=\"Fertig\"\n                    cancelText=\"Abbrechen\"\n                    [min]=\"GetMinUhrzeit()\"\n                    [max]=\"GetMaxUhrzeit()\"\n                    [value]=\"GetUhrzeit()\"\n                    presentation=\"time\" (ionChange)=\"TimeChangedHandler($event)\">\n      </ion-datetime>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n-->\n";

/***/ }),

/***/ 31661:
/*!**********************************************************************!*\
  !*** ./src/app/components/button-value/button-value.html?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div class=\"buttonclass\" tappable (click)=\"ButtonClickedHandler()\" [style.background]=\"Enabled ? Buttoncolor : Basics.Farben.ButtongrauDisabled\">\n    <div style=\"height: 100%; width: 60%;\">\n        <div class=\"buttontextclass\">\n            <table class=\"paddingtable\" cellspacing=\"0\" cellpadding=\"0\">\n                <tr>\n                    <td height=\"100%\" valign=\"middle\">\n                        <ion-text color=\"weiss\">{{Buttontext}}</ion-text>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class=\"outerinfokeeperclass\">\n        <div class=\"infokeeperclass\" [style.background]=\"Buttonvaluecolor\">\n            <table *ngIf=\"Wert_B === ''\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                    <td [innerHTML]=\"Wert_A_String\" align=\"center\"></td>\n                </tr>\n            </table>\n            <table  *ngIf=\"Wert_B !== ''\" width=\"100%\">\n                <tr>\n                    <td align=\"center\" [innerHTML]=\"Wert_A_String\"></td>\n                </tr>\n                <tr>\n                    <td align=\"center\" class=\"ergotextclass\" [innerHTML]=\"Wert_B\"></td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n\n\n\n";

/***/ }),

/***/ 92442:
/*!**********************************************************************************!*\
  !*** ./src/app/components/checkbox-clon/checkbox-clon.component.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"keeperdivclass\" [style.background]=\"Background\" (click)=\"DivClickedHnadler($event)\">\n  <img [hidden]=\"!Checked\" [src]=\"ImgSource\" style=\"width: 18px; height: 18px\">\n</div>\n";

/***/ }),

/***/ 17121:
/*!********************************************************************************************!*\
  !*** ./src/app/components/input-clone-keeper/input-clone-keeper.component.html?ngResource ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "Valid: {{Valid}}\n<ng-content>\n\n</ng-content>\n";

/***/ }),

/***/ 54327:
/*!******************************************************************************!*\
  !*** ./src/app/components/input-clone/input-clone.component.html?ngResource ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div class=\"framedivclass\"\n     [style.cursor]=\"Clickable === true ? 'pointer' : 'default'\"\n     [style.min-height.px]=\"MinHeight\"\n     [style.border]=\"Enabled === true ? Valid === true ? OkBorder : RequiredBorder : DisabledBorder\">\n  <table width=\"100%\">\n    <tr *ngIf=\"Titel !== null && Titel !== ''\">\n      <td class=\"uppercellclass\">{{Titel}}</td>\n      <td style=\"text-align: right\" [hidden]=\"Clickable === false\"><ion-icon color=\"burnicklgruen\" name=\"list-outline\" style=\"font-size: 20px\"></ion-icon></td>\n    </tr>\n    <tr *ngIf=\"Lines === 1\">\n      <td class=\"lowercellclass\" colspan=\"2\">\n        <ion-input *ngIf=\"Enabled === true\" [type]=\"Inputtype\"\n                   [debounce]=\"Debouncetime\"\n                    autocomplete=\"off\"\n                   [value]=\"Value\"\n                   (ionChange)=\"TextChangedHandler($event)\"></ion-input>\n        <ion-label *ngIf=\"Enabled === false\">{{Value}}</ion-label>\n      </td>\n    </tr>\n    <tr *ngIf=\"Lines !== 1\">\n      <td class=\"lowercellclass\" colspan=\"2\">\n        <ion-textarea *ngIf=\"Enabled === true\"  [debounce]=\"Debouncetime\" [value]=\"Value\" [rows]=\"Lines\" (ionChange)=\"TextChangedHandler($event)\"></ion-textarea>\n        <div *ngIf=\"Enabled === false\" [style.height.px]=\"Lines * 18\" [innerHTML]=\"Tools.FormatLinebreaks(Value)\"></div>\n      </td>\n    </tr>\n  </table>\n</div>\n";

/***/ }),

/***/ 70098:
/*!********************************************************************!*\
  !*** ./src/app/components/page-footer/page-footer.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageFooterFrameDiv class=\"keeperclass\">\n    <ng-content></ng-content>\n</div>\n\n";

/***/ }),

/***/ 77853:
/*!**********************************************************************************!*\
  !*** ./src/app/components/page-header-center/page-header-center.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageHeaderDiv class=\"keeperdivclass\">\n  <ng-content></ng-content>\n</div>\n";

/***/ }),

/***/ 75941:
/*!****************************************************************************************!*\
  !*** ./src/app/components/page-header-menu/page-header-menu.component.html?ngResource ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<ng-container *ngIf=\"AuthService.IsAuthenticated\">\n  <table style=\"width: 100%\">\n    <tr>\n      <td style=\"width: 100%\">\n\n        <!-- Erste Menuezeile --->\n\n        <table>\n          <tr>\n            <td style=\"width: 10px\"></td>\n            <td>\n              <div class=\"menubuttonclass\"\n                   (mouseenter)=\"HomeMouseOver = true\"\n                   (mouseleave)=\"HomeMouseOver = false\"\n                   (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Home)\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon name=\"home-outline\"\n                                [color]=\"HomeMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.Weiss\">\n                      </ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n            <!--\n            <td style=\"width: 10px\"></td>\n            <td>\n              <div class=\"menubuttonclass\" (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Debug)\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon name=\"bug-outline\"\n                                [color]=\"GetMainMenueColor(Menuservice.MainMenuebereiche.Debug)\">\n                      </ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n            <td style=\"width: 10px\"></td>\n            <td>\n              <div class=\"menubuttonclass\" (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Einstellungen)\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon name=\"settings-outline\"\n                                [color]=\"GetMainMenueColor(Menuservice.MainMenuebereiche.Einstellungen)\">\n                      </ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n            <td style=\"width: 20px\"></td>\n            <td>\n              <div class=\"menubuttonclass\" (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Firma)\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon name=\"apps-outline\" [color]=\"GetMainMenueColor(Menuservice.MainMenuebereiche.Firma)\"></ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n            <td style=\"width: 20px\"></td>\n            <td>\n              <div class=\"menubuttonclass\" (click)=\"MainMenueButtonClicked(Menuservice.MainMenuebereiche.Projekte)\">\n                <table class=\"paddingsmalltable\">\n                  <tr>\n                    <td>\n                      <ion-icon name=\"airplane-outline\" [color]=\"GetMainMenueColor(Menuservice.MainMenuebereiche.Projekte)\"></ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n            -->\n            <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n\n              <td *ngIf=\"ShowStandorttitle === true\">\n                <div class=\"menubuttonclass\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"location-outline\" [color]=\"Basics.Ionicfarben.BurnicklGruen\"></ion-icon></td>\n                      <td [style.color]=\"'#c7d304'\">Standorte</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n              <td *ngIf=\"ShowMitarbeitertitle === true\">\n                <div class=\"menubuttonclass\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"people-outline\" [color]=\"Basics.Ionicfarben.BurnicklGruen\"></ion-icon></td>\n                      <td [style.color]=\"'#c7d304'\">Mitarbeiter</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td *ngIf=\"ShowProjektetitle === true\">\n                <div class=\"menubuttonclass\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"business-outline\" [color]=\"Basics.Ionicfarben.BurnicklGruen\"></ion-icon></td>\n                      <td [style.color]=\"'#c7d304'\">Projekte</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td *ngIf=\"ShowFavoritentitle === true\">\n                <div class=\"menubuttonclass\" (click)=\"FirmaMenueButtonClicked(Menuservice.FirmaMenuebereiche.Favoriten)\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"bookmarks-outline\" [color]=\"Basics.Ionicfarben.BurnicklGruen\"></ion-icon></td>\n                      <td [style.color]=\"'#c7d304'\">Favoriten</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n            <!--\n            {{Menuservice.MainMenuebereich}}\n            -->\n\n            <ng-container *ngIf=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Projekte\">\n              <td>\n                <div  class=\"menubuttonclass\" (click)=\"ProjekteMenueButtonClicked(Menuservice.ProjekteMenuebereiche.LOPListe)\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"list-outline\" [color]=\"GetProjekteMenueIconcolor(Menuservice.ProjekteMenuebereiche.LOPListe)\"></ion-icon></td>\n                      <td style=\"white-space: nowrap;\" [style.color]=\"GetProjekteMenueFontcolor(Menuservice.ProjekteMenuebereiche.LOPListe)\">LOP Liste</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"ProjekteMenueButtonClicked(Menuservice.ProjekteMenuebereiche.Protokolle)\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"book-outline\" [color]=\"GetProjekteMenueIconcolor(Menuservice.ProjekteMenuebereiche.Protokolle)\"></ion-icon></td>\n                      <td [style.color]=\"GetProjekteMenueFontcolor(Menuservice.ProjekteMenuebereiche.Protokolle)\">Protokolle</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menubuttonclass\" (click)=\"ProjekteMenueButtonClicked(Menuservice.ProjekteMenuebereiche.Festlegungen)\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"file-tray-full-outline\" [color]=\"GetProjekteMenueIconcolor(Menuservice.ProjekteMenuebereiche.Festlegungen)\"></ion-icon></td>\n                      <td [style.color]=\"GetProjekteMenueFontcolor(Menuservice.ProjekteMenuebereiche.Festlegungen)\">Festlegungen</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n\n              <!--\n\n               *ngIf=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Projekte\"\n              -->\n\n\n              <ng-container>\n                <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n                <td>\n                  <div style=\"height: auto; padding: 4px;\" [style.width.px]=\"Projektauswahlbreite\">\n\n                    <table style=\" width: 100%;\">\n                      <tr *ngFor=\"let zi of [].constructor(this.DBProjekte.FavoritenZeilenanzahl); let zindex = index\">\n\n                        <td *ngFor=\"let si of [].constructor(this.DBProjekte.FavoritenSpaltenanzahl); let sindex = index\" style=\"padding: 2px\" [style.width.%]=\"DBProjekte.FavoritenCellbreite\">\n                          <ng-container *ngIf=\"DBProjekte.Projektauswahlsettings[zindex][sindex] !== null\">\n                            <div *ngIf=\"DBProjekte.Projektauswahlsettings[zindex][sindex].ShowInLOPListeOnly === false ||\n                                        (DBProjekte.Projektauswahlsettings[zindex][sindex].ShowInLOPListeOnly === true &&\n                                        Menuservice.ProjekteMenuebereich === Menuservice.ProjekteMenuebereiche.LOPListe)\" class=\"buttonclass\"\n                                 (click)=\"FavoritenClickedHandler(DBProjekte.Projektauswahlsettings[zindex][sindex])\"\n                                 [style.border-color]=\"GetProjektbuttoncolor(DBProjekte.Projektauswahlsettings[zindex][sindex])\">\n                              <table>\n                                <tr>\n                                  <td *ngIf=\"DBProjekte.Projektauswahlsettings[zindex][sindex].Background !== Const.NONE\">\n                                    <div style=\"width: 18px; height: 18px; border-radius: 50%\" [style.background]=\"DBProjekte.Projektauswahlsettings[zindex][sindex].Background\"></div>\n                                  </td>\n                                  <td>\n                                    <table [style.color]=\"GetProjektbuttoncolor(DBProjekte.Projektauswahlsettings[zindex][sindex])\">\n                                      <tr>\n                                        <td align=\"center\">{{DBProjekte.Projektauswahlsettings[zindex][sindex].Projektkuerzel}}</td>\n                                      </tr>\n                                      <tr *ngIf=\"(sindex !== 0 && zindex === 0) || (zindex > 0)\">\n                                        <td align=\"center\"style=\"font-size: 85%;\">\n                                          <table class=\"paddingtable\">\n                                            <tr>\n                                              <td>\n                                                {{DBProjekte.Projektauswahlsettings[zindex][sindex].Projektnummer}}\n                                              </td>\n                                              <td *ngIf=\"DBProjekte.Projektauswahlsettings[zindex][sindex].Projektpunkteanzahl > 0\">\n                                                [{{DBProjekte.Projektauswahlsettings[zindex][sindex].Projektpunkteanzahl}}]\n                                              </td>\n                                            </tr>\n                                          </table>\n                                        </td>\n                                      </tr>\n                                    </table>\n\n                                  </td>\n                                </tr>\n                              </table>\n\n                            </div>\n\n                          </ng-container>\n                        </td>\n                      </tr>\n                    </table>\n\n                  </div>\n                </td>\n              </ng-container>\n\n            </ng-container>\n            <ng-container *ngIf=\"ShowSuchleiste\">\n              <td style=\"width: 20px\"></td>\n              <td>\n                <ion-searchbar #Suchleiste placeholder=\"Suche\"></ion-searchbar>\n              </td>\n            </ng-container>\n            <ng-container *ngIf=\"ShowSandortfilter\">\n              <td style=\"width: 20px\"></td>\n              <td>\n                <div class=\"menufilterbuttonclass\" (click)=\"StandortButtonClicked()\">\n                  <table class=\"paddingsmalltable\">\n                    <tr>\n                      <td><ion-icon name=\"funnel-outline\"></ion-icon></td>\n                      <td>{{DBStandort.GetStandortfiller()}}</td>\n                    </tr>\n                  </table>\n                </div>\n              </td>\n\n            </ng-container>\n          </tr>\n        </table>\n\n\n      </td>\n    </tr>\n\n    <!--\n\n    Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Projekte &&\n\n    --->\n\n    <ng-container *ngIf=\"Menuservice.ProjekteMenuebereich === Menuservice.ProjekteMenuebereiche.LOPListe && DBProjekte.CurrentFavoritprojektindex === 3000\">\n\n      <tr>\n        <td style=\"padding-left: 8px; padding-right: 8px\">\n          <div style=\"width: 100%; height: 1px; background: white\"></div>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <table>\n            <tr>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Montag {{DBMitarbeiter.GetMeinewocheStunden('Montag')}}</div>\n              </td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Dienstag {{DBMitarbeiter.GetMeinewocheStunden('Dienstag')}}</div>\n              </td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Mittwoch {{DBMitarbeiter.GetMeinewocheStunden('Mittwoch')}}</div>\n              </td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Donnerstag {{DBMitarbeiter.GetMeinewocheStunden('Donnerstag')}}</div>\n              </td>\n              <td style=\"width: 1px; background: white\"></td>\n              <td [style.width.px]=\"Tagbreite\">\n                <div class=\"wocheheaderdivclass\" [style.height.px]=\"Wochentaghoehe\">Freitag {{DBMitarbeiter.GetMeinewocheStunden('Freitag')}}</div>\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n\n\n    </ng-container>\n\n    <ng-container *ngIf=\"Menuservice.MainMenuebereich === Menuservice.MainMenuebereiche.Projekte && Menuservice.ProjekteMenuebereich === Menuservice.ProjekteMenuebereiche.LOPListe && DBProjekte.CurrentFavoritprojektindex !== 3000\">\n      <tr>\n        <td style=\"padding-left: 8px; padding-right: 8px\">\n          <div style=\"width: 100%; height: 1px; background: white\"></div>\n        </td>\n      </tr>\n      <tr>\n        <td> <!--  style=\"padding: 4px\" -->\n\n          <div style=\"width: 100%; height: 100%; background: none\">\n\n            <!-- Zweite Menuezeile --->\n\n            <table *ngIf=\"DBProjekte.CurrentProjekt !== null && DBProjekte.CurrentFavoritprojektindex !== 3000\" class=\"paddingtable\">\n              <tr>\n                <td style=\"width: 360px;\">\n                  <button-value [Buttontext]=\"GetZeitfilterButtontext()\"\n                                (ButtonClicked)=\"ZeitspaneClickedHandler(Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Filter_Zeitspanne)\"\n                                [Wert_A]=\"GetZeitfilterButtonwert()\"></button-value>\n                </td>\n                <ng-container *ngIf=\"DBProjekte.CurrentFavoritprojektindex !== 1500\">\n                  <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div>\n                  <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowOffen\"  (CheckChanged)=\"StatusFilterChanged($event, Const.Projektpunktstatustypen.Offen.Name)\"></checkbox-clon></td>\n                  <td><div class=\"statusvaianteclass\" style=\"background: teal;\">Offen</div></td><td style=\"width: 6px\"></td>\n                  <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowGeschlossen\" (CheckChanged)=\"StatusFilterChanged($event, Const.Projektpunktstatustypen.Geschlossen.Name)\"></checkbox-clon></td>\n                  <td><div class=\"statusvaianteclass\" style=\"background: #c7d304;\">Geschlossen</div></td><td style=\"width: 6px\"></td>\n                  <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowBearbeitung\" (CheckChanged)=\"StatusFilterChanged($event, Const.Projektpunktstatustypen.Bearbeitung.Name)\"></checkbox-clon></td>\n                  <td><div class=\"statusvaianteclass\" style=\"background: #616A6B;\">In Bearbeitung</div></td><td style=\"width: 6px\"></td>\n                  <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowRuecklauf\"   (CheckChanged)=\"StatusFilterChanged($event, Const.Projektpunktstatustypen.Ruecklauf.Name)\"></checkbox-clon></td>\n                  <td><div class=\"statusvaianteclass\" style=\"background: #0020C2;\">RÃ¼cklauf ausstehend</div></td><td style=\"width: 6px\"></td>\n                  <!--\n                  <td><checkbox-clon  [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowMeilensteinOnly\" (CheckChanged)=\"StatusFilterChanged($event, 'Meilenstein')\"></checkbox-clon></td>\n                  <td><div class=\"statusvaianteclass\" style=\"background: purple;\">Nur Meilensteine anzeigen</div></td><td style=\"width: 6px\"></td>\n                  -->\n                </ng-container>\n\n                <!--\n                [Checked]=\"DBProjekte.CurrentProjekt.Aufgabenlistefilter.FilterShowFaelligOnly\"\n                <td><checkbox-clon (CheckChanged)=\"StatusFilterShowFaelligOnlyChanged($event)\"></checkbox-clon></td>\n                <td><div class=\"statusvaianteclass\" style=\"background: red;\">Nur fÃ¤llige Aufgaben</div></td>\n                -->\n              </tr>\n            </table>\n\n\n          </div>\n\n        </td>\n      </tr>\n    </ng-container>\n\n\n    <!--\n    <tr *ngIf=\"AuthService.IsAuthenticated === true\">\n      <td colspan=\"20\" style=\"padding: 2px\">{{AuthService.ActiveUsername}} </td>\n    </tr>\n    -->\n\n  </table>\n\n</ng-container>\n\n\n\n\n";

/***/ }),

/***/ 1423:
/*!********************************************************************!*\
  !*** ./src/app/components/page-header/page-header.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div #PageHeaderDiv class=\"keeperdivclass\">\n  <ng-content></ng-content>\n  <div *ngIf=\"Pool.ShowProgress\" class=\"loadingdivclass\">\n\n    <table width=\"100%\">\n      <tr>\n        <td>\n          <div class=\"headerdivclass\">\n            Projektdaten werden geladen\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <div class=\"contentdivclass\">\n\n            <table class=\"paddingtable\" width=\"100%\">\n              <tr>\n                <td style=\"text-align: center; color: black\">\n                  {{Pool.ProgressMessage}}\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <ion-progress-bar [value]=\"Pool.CurrentProgressValue / Pool.MaxProgressValue\"></ion-progress-bar>\n                </td>\n              </tr>\n            </table>\n\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <div style=\"background: #354547; width: 100%; height: 20px\">\n\n          </div>\n        </td>\n      </tr>\n    </table>\n\n\n  </div>\n</div>\n";

/***/ }),

/***/ 1357:
/*!******************************************************************************************!*\
  !*** ./src/app/components/page-modal-keeper/page-modal-keeper.component.html?ngResource ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div  class=\"keeperdivclass\" (click)=\"ContentClicked($event)\">\n  <div class=\"contentdivclass\"\n       [style.width.px]=\"Dialogbreite\"\n       [style.height.px]=\"Dialoghoehe\" [style.top.px]=\"PositionY\" (click)=\"ContentClicked($event)\">\n    <ion-header>\n      <page-header>\n        <table class=\"paddingsmalltable\">\n          <tr>\n            <td><ion-icon [name]=\"Iconname\" color=\"burnicklgruen\"></ion-icon></td>\n            <td [style.color]=\"'white'\">{{Titel}}</td>\n          </tr>\n        </table>\n\n        <ng-container *ngIf=\"ShowSandortfilter\">\n          <td style=\"width: 20px\"></td>\n          <td>\n            <div class=\"menufilterbuttonclass\" (click)=\"StandortfilterButtonClicked()\">\n              <table class=\"paddingsmalltable\">\n                <tr>\n                  <td><ion-icon name=\"funnel-outline\"></ion-icon></td>\n                  <td [innerHTML]=\"DBStandort.GetStandortfiller()\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n\n        </ng-container>\n      </page-header>\n    </ion-header>\n\n    <ion-content>\n        <ng-content>\n\n        </ng-content>\n    </ion-content>\n\n    <ion-footer>\n      <page-header>\n        <table class=\"paddingsmalltable\" width=\"100%\">\n          <tr>\n            <td>\n              <ion-button size=\"small\" color=\"rot\" (click)=\"CancelButtonClicked()\">\n                <ion-icon name=\"close-outline\"></ion-icon>\n              </ion-button>\n            <td style=\"width: 100%\"></td>\n            <td>\n              <ion-button [disabled]=\"OkButtonEneabled === false\" size=\"small\" color=\"gruen\" (click)=\"OkButtonClicked()\">\n                <ion-icon name=\"checkmark-outline\"></ion-icon>\n              </ion-button>\n            </td>\n          </tr>\n        </table>\n      </page-header>\n    </ion-footer>\n\n  </div>\n</div>\n\n\n\n\n";

/***/ }),

/***/ 64403:
/*!************************************************************************!*\
  !*** ./src/app/components/pj-datepicker/pj-datepicker.html?ngResource ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<div *ngIf=\"Smallsize === false\" class=\"datumdivclass\" tappable  [id]=\"ElementID\"  [style.background]=\"Background\" [style.color]=\"Color\" (click)=\"DateClickedHandler($event)\">\n  {{Datum.format(Smalldate === false ? 'DD.MM.YYYY' : 'DD.MM.YY')}}\n</div>\n<span class=\"smalldatumclass\" *ngIf=\"Smallsize === true\"  [id]=\"ElementID\"  [style.background]=\"Background\" [style.color]=\"Color\" (click)=\"DateClickedHandler($event)\">\n  {{Datum.format(Smalldate === false ? 'DD.MM.YYYY' : 'DD.MM.YY')}}\n</span>\n\n<!--\n<ion-button *ngIf=\"ToolboxDesign === false\" [id]=\"ElementID\" [size]=\"Buttonsize\" [color]=\"Enabled ? Basics.Ionicfarben.Blau : Basics.Ionicfarben.GRAU\">{{Buttontext}}</ion-button>\n-->\n\n<ion-popover [trigger]=\"ElementID\" show-backdrop=\"false\">\n  <ng-template>\n        <ion-datetime #DatePicker\n                      locale=\"de-DE\"\n                      showDefaultButtons=\"true\"\n                      doneText=\"Fertig\"\n                      cancelText=\"Abbrechen\"\n                      [min]=\"Minimumstring\"\n                      [max]=\"Maximumstring\"\n                      presentation=\"date\" [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedHandler($event)\">\n        </ion-datetime>\n  </ng-template>\n      <!--\n    <ion-content force-overscroll=\"false\">\n    </ion-content>\n\n      monthNames=\"Januar, Februar, MÃ¤rz, April, Mai, Juni, Juli, August, September, Oktober, November, Dezember\"\n      monthShortNames=\"Jan., Feb., Mrz., Apr., Mai, Jun., Jul., Aug., Sep., Okt., Nov., Dez.\" first-day-of-week=\"1\"\n      [value]=\"Datum.format('YYYY-MM-DD')\" (ionChange)=\"DateChangedHandler($event)\"\n      -->\n</ion-popover>\n\n";

/***/ }),

/***/ 25641:
/*!**************************************************************************************************!*\
  !*** ./src/app/components/pj-projektpunkteliste/pj-projektpunkteliste.component.html?ngResource ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<table *ngIf=\"Settings !== null && Projekt !== null\" style=\"width: 100%\" class=\"docinnertable\">\n  <tr *ngIf=\"ShowProjektnamen === true\">\n    <td colspan=\"20\" class=\"nobordertitelbuttonclass\">\n      {{Projekt.Projektname}}\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 70px; text-align: center\"><b>Debug</b></td>\n    <td *ngIf=\"Settings.AufgabenShowNummer\" style=\"min-width: 20px; text-align: center\"><b>Nr</b></td>\n    <td *ngIf=\"Settings.AufgabenShowStartdatum\" style=\"min-width: 60px; text-align: center\"><b>Start</b></td>\n    <!--\n    <td *ngIf=\"Settings.AufgabenShowMeintag\" style=\"width: 90px; text-align: center\"><b>Meintag</b></td>\n    -->\n    <td *ngIf=\"Settings.AufgabenShowMeinewoche\" style=\"width: 90px; text-align: center\"><b>Meine Woche</b></td>\n    <td *ngIf=\"Settings.AufgabenShowMeilensteine\" style=\"width: 90px; text-align: center\"><b>Meilenstein</b></td>\n    <td *ngIf=\"Settings.AufgabenShowAufgabe\" style=\"min-width: 300px;\"><b>Aufgabe</b></td>\n    <td *ngIf=\"Settings.AufgabenShowBemerkung\" style=\"min-width: 334px\"><b>Anmerkungen</b></td>\n    <td *ngIf=\"Settings.AufgabenShowFortschritt\" style=\"min-width: 40px; text-align: center\"><b>Fortschritt</b></td>\n    <td *ngIf=\"Settings.AufgabenShowZeitansatz\" style=\"min-width: 40px; text-align: center\"><b>Zeitansatz</b></td>\n    <td *ngIf=\"Settings.AufgabenShowTermin\" style=\"min-width: 40px;\" align=\"center\">\n      <table class=\"nobordertable\">\n        <tr>\n          <td>\n            <div style=\"cursor: pointer\" (click)=\"TerminFilterAufsteigendClickedHandler()\">\n              <ion-icon style=\"font-size: 26px\" name=\"caret-up-circle-outline\" [color]=\"Settings.AufgabenSortiermodus === Const.AufgabenSortiermodusvarianten.TermineAufsteigend ? 'burnicklgruen' : 'grau'\"></ion-icon>\n            </div>\n          </td>\n          <td><b>Termin</b></td>\n          <td>\n            <div style=\"cursor: pointer\" (click)=\"TerminFilterAbsteigendClickedHandler()\">\n              <ion-icon style=\"font-size: 26px\" name=\"caret-down-circle-outline\" [color]=\"Settings.AufgabenSortiermodus === Const.AufgabenSortiermodusvarianten.TermineAbsteigend  ? 'burnicklgruen' : 'grau'\"></ion-icon>\n            </div>\n          </td>\n        </tr>\n      </table>\n    </td>\n    <td *ngIf=\"Settings.AufgabenShowTage\" style=\"min-width: 66px; text-align: center\"><b>Tage</b></td>\n    <td *ngIf=\"Settings.AufgabenShowZustaendig\" style=\"min-width: 66px; text-align: center\"><b>ZustÃ¤ndig</b></td>\n    <td *ngIf=\"Settings.AufgabenShowStatus\" style=\"width: 100px; text-align: center\"><b>Status</b></td>\n    <td *ngIf=\"Settings.AufgabenShowStatus\" style=\"width: 36px; text-align: center\"></td>\n  </tr>\n\n  <ng-container *ngFor=\"let Projektpunkt of Datenliste; let i = index\">\n    <tr *ngIf=\"CheckFilterEnabled ? Database.CheckFilter(Projektpunkt, ShowMeintag) : true\" style=\"height: 1px\">\n      <td align=\"center\"><div class=\"zustaendigdivemptyclass\" (click)=\"DebugButtonClicked($event, Projektpunkt)\">Print</div></td>\n      <td *ngIf=\"Settings.AufgabenShowNummer\" style=\"text-align: center; font-size: 90%\">{{Projektpunkt.Nummer}}</td>\n      <td *ngIf=\"Settings.AufgabenShowStartdatum\" style=\"height: inherit\">\n          <pj-datepicker [ElementID]=\"Datepickerprefix + '_start_' + Projektpunkt._id\" [Projektp unkt]=\"Projektpunkt\" [Smalldate]=\"true\" [Smallsize]=\"true\"\n                             [Datum]=\"GetStartdatum(Projektpunkt)\" (TimeChanged)=\"StartDatumChangedHandler($event)\" (DateClicked)=\"DateClickedHandler()\">\n          </pj-datepicker>\n      </td>\n      <!--\n      <td *ngIf=\"Settings.AufgabenShowMeintag\" style=\"height: inherit\">\n        <div class=\"statusdivclass\" [style.background]=\"Database.GetMeintagCheckstatus(Projektpunkt) === 'ON' ? '#444444' : 'white'\" (click)=\"MeintagDivClicked($event, Projektpunkt)\">\n          <checkbox-clon [Checked]=\"Database.GetMeintagCheckstatus(Projektpunkt) === 'ON'\" (CheckChanged)=\"MeintagDivClicked($event, Projektpunkt)\"></checkbox-clon>\n        </div>\n      </td>\n      -->\n      <td *ngIf=\"Settings.AufgabenShowMeinewoche\" style=\"height: inherit\" align=\"center\">\n\n        <div *ngIf=\"Database.CheckIsMeinewoche(Projektpunkt) === false\" class=\"zustaendigdivemptyclass\" (click)=\"MeineWocheZuweisenClickedHandler(Projektpunkt)\">Setzen</div>\n        <div *ngIf=\"Database.CheckIsMeinewoche(Projektpunkt) === true\" class=\"zustaendigdivfillclass\" [innerHTML]=\"GetMeineWocheTage(Projektpunkt)\" (click)=\"MeineWocheBearbeitenClickedHandler(Projektpunkt)\"></div>\n\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowMeilensteine\" style=\"height: inherit\">\n        <div class=\"statusdivclass\" [style.background]=\"Projektpunkt.Meilensteinstatus === 'ON' ? 'purple' : 'white'\" (click)=\"MeilensteinDivClicked($event, Projektpunkt)\">\n          <checkbox-clon [Checked]=\"Projektpunkt.Meilensteinstatus === 'ON'\" (CheckChanged)=\"MeilensteinDivClicked($event, Projektpunkt)\"></checkbox-clon>\n        </div>\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowAufgabe\" style=\"height: inherit\">\n\n        <table  class=\"nobordertable\" style=\"width: 100%\">\n          <tr>\n            <td style=\"height: inherit\">\n              <div class=\"aufgabedivclass\" (click)=\"AufgabeClickedHandler(Projektpunkt)\" [innerHTML]=\"Tools.FormatLinebreaks(Projektpunkt.Aufgabe) | safe : 'html'\"></div>\n            </td>\n            <td style=\"height: inherit; width: 30px\">\n              <table>\n                <tr *ngIf=\"Projektpunkt.ProtokollID !== null\" style=\"height: inherit;\">\n                  <td style=\" width: 30px\">\n                    <div class=\"protokollmarkedivclass\" [style.background]=\"'green'\" (click)=\"ProtokollMarkeClicked(Projektpunkt)\">P</div>\n                  </td>\n                </tr>\n                <tr *ngIf=\"Projektpunkt.NotizenID !== null \" style=\"height: inherit; \">\n                  <td style=\"width: 30px\">\n                    <div class=\"protokollmarkedivclass\" [style.background]=\"'green'\" (click)=\"NotizMarkeClickedHandler(Projektpunkt)\">N</div>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <tr *ngIf=\"Projektpunkt.ProtokollID !== Const.NONE\">\n\n          </tr>\n        </table>\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowBemerkung\">\n\n        <div *ngIf=\"ShowAddNewDetail(Projektpunkt) === true && Projektpunkt.Anmerkungenliste.length === 0\"\n             (click)=\"AddAnmerkungClickedHandler(Projektpunkt)\" class=\"rootbuttonsmallclass\">\n          <ion-icon name=\"add-circle-outline\" slot=\"icon-only\" color=\"weiss\"></ion-icon>\n        </div>\n\n        <table *ngIf=\"Projektpunkt.Anmerkungenliste.length !== 0\" style=\"width:100%\" class=\"nobordersmalltable\">\n          <tr>\n            <td>\n\n              <table style=\"width: 100%;\" class=\"nobordersmalltable\">\n                <tr *ngFor=\"let Anmerkung of Projektpunkt.Anmerkungenliste; let Detailindex = index;\">\n                  <td>\n\n                    <table *ngIf=\"Anmerkung.LiveEditor === false\"  style=\"width: 100%;\">\n                      <tr>\n                        <td style=\"width: 100%;\">\n                          <div style=\"width: 100%\" class=\"bemerkungdivclass\" (click)=\"EditAnmerkungClickedHandler(Projektpunkt, Anmerkung)\" [innerHTML]=\"Anmerkung.Anmerkung | safe : 'html'\"></div>\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"Projektpunkt.Anmerkungenliste.length > 1 && Detailindex < Projektpunkt.Anmerkungenliste.length - 1\">\n                        <td colspan=\"2\"><div style=\"height: 1px; background: silver; width: 100%\"></div></td>\n                      </tr>\n                    </table>\n\n\n                    <table *ngIf=\"Anmerkung.LiveEditor === true\"  style=\"width: 100%;\">\n                      <tr>\n                        <td style=\"width: auto\" rowspan=\"3\">\n                          <ion-textarea style=\"border: 1px solid #7b6a58\" auto-grow placeholder=\"Neue Bemerkung hier\" style=\"width: 100%; min-height: 90px; font-size: 90%;\"\n                                        [value]=\"Anmerkung.Anmerkung\" (ionChange)=\"AnmerkungTextChangedHandler($event, Detailindex)\"></ion-textarea>\n                        </td>\n                        <td align=\"center\" style=\"width: 40px;\">\n                          <div class=\"rootbuttonsmallclass\" (click)=\"DeleteAnmerkung(Projektpunkt, Anmerkung)\">\n                            <ion-icon name=\"trash\" color=\"weiss\"></ion-icon>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td></td>\n                      </tr>\n                      <tr>\n                        <td align=\"center\">\n                          <div class=\"rootbuttonsmallclass\" (click)=\"Anmerkung.Anmerkung !== '' ? SaveAnmerkung(Projektpunkt, Anmerkung) : null\">\n                            <ion-icon style=\"font-size: 24px\" [color]=\"Anmerkung.Anmerkung !== '' ? 'weiss' : 'grau'\" name=\"save-outline\"></ion-icon>\n                          </div>\n                        </td>\n                      </tr>\n                    </table>\n\n                  </td>\n                </tr>\n              </table>\n\n\n\n            </td>\n            <td *ngIf=\"ShowAddNewDetail(Projektpunkt) === true\" style=\"width: 20px; vertical-align: bottom\">\n\n              <div (click)=\"AddAnmerkungClickedHandler(Projektpunkt)\" class=\"rootbuttonsmallclass\">\n                <ion-icon name=\"add-circle-outline\" slot=\"icon-only\" color=\"weiss\"></ion-icon>\n              </div>\n\n            </td>\n          </tr>\n        </table>\n\n      </td>\n\n\n\n      <td *ngIf=\"Settings.AufgabenShowFortschritt\">\n        <div style=\"width: 100%; cursor: pointer\" (click)=\"FortschrittClickedHandler(Projektpunkt)\">\n          <table style=\"width: 100%\" class=\"nobordersmalltable\">\n            <tr>\n              <td>\n                <ion-progress-bar [value]=\"GetFortschritt(Projektpunkt)\"></ion-progress-bar>\n              </td>\n            </tr>\n            <tr>\n              <td style=\"text-align: center; font-size: 80%; padding-top: 4px\">{{Projektpunkt.Fortschritt}}%</td>\n            </tr>\n          </table>\n        </div>\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowZeitansatz\" style=\"font-size: 90%; text-align: center\">{{Projektpunkt.Zeitansatz + ' ' + Projektpunkt.Zeitansatzeinheit}}</td>\n      <td *ngIf=\"Settings.AufgabenShowTermin\" style=\"height: inherit\">\n\n        <table class=\"nobordersmalltable\" style=\"width: 100%; height: 100%\">\n          <tr>\n            <td style=\"height: inherit\">\n\n              <div class=\"endedatumdivclass\" [style.background]=\"Database.GetFaelligBackground(Projektpunkt)\"\n                   (click)=\"EndedatumClickedHandler(Projektpunkt)\">\n                <table class=\"nobordersmalltable\">\n                  <tr>\n                    <td [ngStyle]=\"GetEndedatumstyle(Projektpunkt)\">\n                      {{Database.GetEndedatumString(Projektpunkt)}}\n                    </td>\n                  </tr>\n                </table>\n\n              </div>\n            </td>\n          </tr>\n          <tr *ngIf=\"Projektpunkt.Status === Const.Projektpunktstatustypen.Ruecklauf.Name &&\n                     Database.CheckProjektpunktFaellig(Projektpunkt) !== Const.Faelligkeitsstatus.Nicht_faellig &&\n                     Projektpunkt.ZustaendigeExternIDListe.length > 0\">\n            <td style=\"padding-top: 4px; height: inherit\">\n              <!--\n               (click)=\"SendeRuecklauferinnerungMail($event, Projektpunkt)\"\n              -->\n              <div class=\"endedatumdivclass\" [style.background]=\"Database.GetFaelligBackground(Projektpunkt)\">\n                  <ion-icon style=\"font-size: 20px\" color=\"weiss\" name=\"skull\"></ion-icon>\n              </div>\n            </td>\n          </tr>\n        </table>\n\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowTage\" style=\"height: inherit\">\n        <div class=\"endtagedivclass\" [style.background]=\"Database.GetFaelligBackground(Projektpunkt)\">\n          <table class=\"nobordersmalltable\">\n            <tr>\n              <td [ngStyle]=\"GetEndetagestyle(Projektpunkt)\">\n                {{Database.GetRestageanzahl(Projektpunkt)}}\n              </td>\n            </tr>\n          </table>\n        </div>\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowZustaendig\">\n        <table style=\"width: 100%\" class=\"nobordersmalltable\">\n          <tr>\n            <td align=\"center\" style=\"height: inherit\">\n\n              <div *ngIf=\"Projektpunkt.ZustaendigeInternIDListe.length === 0\" class=\"zustaendigdivemptyclass\" (click)=\"ZustaendigInternZuweisenClickedHandler(Projektpunkt)\">Intern</div>\n              <div *ngIf=\"Projektpunkt.ZustaendigeInternIDListe.length !== 0\" class=\"zustaendigdivfillclass\"  (click)=\"ZustaendigInternZuweisenClickedHandler(Projektpunkt)\">\n\n                <table class=\"nobordersmalltable\">\n                  <tr *ngFor=\"let ZustaendigID of Projektpunkt.ZustaendigeInternIDListe\">\n                    <td style=\"font-size: 90%\">\n                      {{GetZustaendigInternName(ZustaendigID)}}\n                    </td>\n                  </tr>\n                </table>\n              </div>\n\n            </td>\n          </tr>\n          <tr>\n            <td style=\"height: 3px\"></td>\n          </tr>\n          <tr>\n            <td align=\"center\" style=\"height: inherit\">\n\n              <div *ngIf=\"Projektpunkt.ZustaendigeExternIDListe.length === 0\" class=\"zustaendigdivemptyclass\" (click)=\"ZustaendigExternZuweisenClickedHandler(Projektpunkt)\">Extern</div>\n              <div *ngIf=\"Projektpunkt.ZustaendigeExternIDListe.length !== 0\" class=\"zustaendigdivfillclass\"  (click)=\"ZustaendigExternZuweisenClickedHandler(Projektpunkt)\">\n\n                <table class=\"nobordersmalltable\">\n                  <tr *ngFor=\"let ZustaendigID of Projektpunkt.ZustaendigeExternIDListe\">\n                    <td style=\"font-size: 90%; text-align: center\">\n                      {{GetZustaendigExternName(ZustaendigID)}}\n                    </td>\n                  </tr>\n                </table>\n              </div>\n\n            </td>\n          </tr>\n        </table>\n\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowStatus\" style=\"height: inherit\">\n        <div class=\"statusdivclass\" [style.background]=\"Database.GetStatuscolor(Projektpunkt)\" (click)=\"ChangeStatusClicked(Projektpunkt)\">\n          <table class=\"nobordertable\">\n            <tr>\n              <td>{{Database.GetProjektpunktstusByName(Projektpunkt.Status).Displayname}}</td>\n            </tr>\n            <tr *ngIf=\"Projektpunkt.Status === Const.Projektpunktstatustypen.Geschlossen.Name\">\n              <td style=\"text-align: center\">{{GetGeschlossenDatum(Projektpunkt)}}</td>\n            </tr>\n          </table>\n        </div>\n      </td>\n      <td *ngIf=\"Settings.AufgabenShowStatus\" style=\"height: inherit\">\n        <div class=\"statusdivclass\" [style.background]=\"Database.GetStatuscolor(Projektpunkt)\">\n          <checkbox-clon [Checked]=\"Projektpunkt.Status === Const.Projektpunktstatustypen.Geschlossen.Name\" (CheckChanged)=\"StatusCheckChanged($event, Projektpunkt)\"></checkbox-clon>\n        </div>\n      </td>\n    </tr>\n\n\n  </ng-container>\n\n  <tr *ngIf=\"Datenliste.length === 0\">\n    <td colspan=\"20\">\n      <div class=\"leerdivclass\">\n        Kein Eintrag vorhanden\n      </div>\n    </td>\n  </tr>\n\n  <tr>\n    <td colspan=\"20\" class=\"nobordereintragbuttonclass\">\n      <ion-button size=\"small\" color=\"burnicklbraun\" (click)=\"AddProjektpunktButtonClicked()\">\n        <ion-icon name=\"add-circle-outline\" color=\"weiss\" slot=\"start\"></ion-icon>\n        <ion-text color=\"weiss\">Neuer Eintrag</ion-text>\n      </ion-button>\n      <div class=\"addbuttondiv\">\n      </div>\n    </td>\n  </tr>\n\n</table>\n\n<span *ngIf=\"Settings === null\">Settings null</span>\n<span *ngIf=\"Projekt  === null\">Projekt null</span>\n";

/***/ }),

/***/ 33196:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-debug/common-debug.page.html?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"false\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n  <ion-grid>\n    <ion-row>\n      <ion-col>\n        <ion-button (click)=\"ClearSecurityToken()\">Security Token lÃ¶schen</ion-button>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <ion-button (click)=\"TestButtonCLcicked()\">Test</ion-button>\n      </ion-col>\n      <ion-row>\n        <ion-col>\n          <ion-button (click)=\"ClearMessagesButtonCLcicked()\">Clear Messages</ion-button>\n        </ion-col>\n      </ion-row>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <b>Security Token:</b>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        {{AuthService.ActiveUsername}}<br><br>\n        {{AuthService.SecurityToken}}\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <table class=\"docinnertable\">\n          <tr>\n            <td><b>CurrentProjekt</b></td>\n            <td><b>CurrentProjektpunkt</b></td>\n          </tr>\n          <tr>\n            <td>\n              {{DBProjekte.CurrentProjekt !== null ? DBProjekte.CurrentProjekt.Projektname : 'null'}}\n            </td>\n            <td>\n              {{DBProjektpunkte.CurrentProjektpunkt !== null ? DBProjektpunkte.CurrentProjektpunkt.Aufgabe : 'null'}}\n            </td>\n          </tr>\n\n        </table>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n\n  <div *ngFor=\"let message of Debug.Debugmessageliste\" style=\"width: 100%;\" [innerHTML]=\"message | prettyjson\"></div>\n\n\n\n  <abstand-element-fixed></abstand-element-fixed>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n";

/***/ }),

/***/ 69748:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-einstellungen/common-einstellungen.page.html?ngResource ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <table *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"paddingtable\">\n    <tr>\n      <td style=\"width: 460px\">\n        <button-value [Buttontext]=\"'Anzahl der Favoriten pro Zeile'\"\n                      [Wert_A]=\"Pool.Mitarbeitersettings.HeadermenueMaxFavoriten.toString()\"\n                      [Buttoncolor]=\"Basics.Farben.Burnicklbraun\"\n                      (ButtonClicked)=\"FavoritenanzahlClicked()\">\n        </button-value>\n      </td>\n    </tr>\n  </table>\n\n  <table *ngIf=\"Pool.Mitarbeitersettings !== null\" class=\"paddingtable\">\n    <tr>\n      <td style=\"width: 460px\">\n        <button-value [Buttontext]=\"'Meilensteine anzeigen nach Erledigung'\"\n                      [Wert_A]=\"Pool.Mitarbeitersettings.AufgabenMeilensteineNachlauf.toString() + ' Kalenderwochen'\"\n                      [Buttoncolor]=\"Basics.Farben.Burnicklbraun\"\n                      (ButtonClicked)=\"MeilensteineNachlaufClicked()\">\n        </button-value>\n      </td>\n    </tr>\n  </table>\n\n  <ion-grid *ngIf=\"Pool.Mitarbeitersettings !== null\">\n    <ion-row>\n      <ion-col>\n        <table  class=\"paddingtable\">\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowNummer\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Nummer')\"></checkbox-clon></td><td>Nummer</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowStartdatum\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Startdatum')\"></checkbox-clon></td><td>Startdatum</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowAufgabe\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Aufgabe')\"></checkbox-clon></td><td>Aufgabe</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowBemerkung\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Bemerkungen')\"></checkbox-clon></td><td>Bemerkungen</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowFortschritt\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Fortschritt')\"></checkbox-clon></td><td>Fortschritt</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowZeitansatz\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Zeitansatz')\"></checkbox-clon></td><td>Zeitansatz</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowTermin\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Termin')\"></checkbox-clon></td><td>Termin</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowTage\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Tage')\"></checkbox-clon></td><td>Tage</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowZustaendig\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Zustaendig')\"></checkbox-clon></td><td>ZustÃ¤ndig</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowStatus\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Status')\"></checkbox-clon></td><td>Status</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowMeintag\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Meintag')\"></checkbox-clon></td><td>Meintag</td>\n          </tr>\n          <tr>\n            <td><checkbox-clon [Checked]=\"Pool.Mitarbeitersettings.AufgabenShowMeinewoche\" (CheckChanged)=\"ListesettingCheckChanged($event, 'Meine Woche')\"></checkbox-clon></td><td>Meintag</td>\n          </tr>\n        </table>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"300\" [Dialoghoehe]=\"300\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"'apps-outline'\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n";

/***/ }),

/***/ 68630:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-error/common-error.page.html?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header></page-header>\n</ion-header>\n<ion-content>\n    <table class=\"paddingtable\">\n      <tr>\n        <td valign=\"middle\" [innerHTML]=\"Message | safe : 'html'\"></td>\n      </tr>\n      <!--\n      <tr *ngIf=\"!SendMailFinished\">\n        <td>\n          <ion-button color=\"blau\" (click)=\"SendMailButtonCLicked()\">\n            <ion-icon name=\"mail\" slot=\"start\" style=\"font-size: 32px\"></ion-icon>\n            <ion-text color=\"weiss\">Fehlerbericht senden</ion-text>\n          </ion-button>\n        </td>\n      </tr>\n      <tr *ngIf=\"SendMailFinished\">\n        <td [style.color]=\"SendMailError ? 'red' : 'green'\">{{SendMailResult}}</td>\n      </tr>\n      -->\n    </table>\n\n</ion-content>\n";

/***/ }),

/***/ 84909:
/*!********************************************************************!*\
  !*** ./src/app/pages/common-home/common-home.page.html?ngResource ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n\n    <table>\n      <tr>\n        <td style=\"width: 10px\"></td>\n        <td>\n          <div class=\"menubuttonclass\"\n               (mouseenter)=\"LogoutMouseOver = true\"\n               (mouseleave)=\"LogoutMouseOver = false\"\n               (click)=\"LogoutButtonClicked()\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <ion-icon name=\"log-out-outline\"\n                            [color]=\"LogoutMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.Weiss\">\n                  </ion-icon>\n                </td>\n                <td [style.color]=\"LogoutMouseOver ? '#c7d304' : 'white'\">Abmelden</td>\n              </tr>\n            </table>\n          </div>\n        </td>\n        <td style=\"width: 10px\"></td>\n        <td align=\"center\" class=\"trennertdclass\"><div class=\"trennerdivclass\"></div></td>\n        <td style=\"width: 10px\"></td>\n        <td>\n          <div class=\"menubuttonclass\"\n               (mouseenter)=\"DebugMouseOver = true\"\n               (mouseleave)=\"DebugMouseOver = false\"\n               (click)=\"DebugButtonClicked()\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <ion-icon name=\"bug-outline\"\n                            [color]=\"DebugMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.Weiss\">\n                  </ion-icon>\n                </td>\n                <td [style.color]=\"DebugMouseOver ? '#c7d304' : 'white'\">Debug</td>\n              </tr>\n            </table>\n          </div>\n        </td>\n        <td style=\"width: 10px\"></td>\n        <td>\n          <div class=\"menubuttonclass\"\n               (mouseenter)=\"EinstellungenMouseOver = true\"\n               (mouseleave)=\"EinstellungenMouseOver = false\"\n               (click)=\"EinstellungenButtonClicked()\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <ion-icon name=\"settings-outline\"\n                            [color]=\"EinstellungenMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.Weiss\">\n                  </ion-icon>\n                </td>\n                <td [style.color]=\"EinstellungenMouseOver ? '#c7d304' : 'white'\">Einstellungen</td>\n              </tr>\n            </table>\n          </div>\n        </td>\n    </tr>\n  </table>\n\n</page-header>\n</ion-header>\n<ion-content>\n\n  <div style=\"width: 100%; height: 100%; background: #354547\">\n    <div style=\"position: absolute; width: 100%; height: 100%; z-index: 1;\">\n\n      <img [src]=\"BackgroundimageURL\">\n\n    </div>\n    <div style=\"position: absolute; width: 100%; height: 100%; z-index: 2\">\n      <ion-grid>\n        <ion-row>\n          <ion-col size=\"12\">\n            <div style=\"height: 40px\"></div>\n          </ion-col>\n        </ion-row>\n      <ion-row>\n        <ion-col>\n          <table style=\"width: 100%;\">\n            <tr>\n              <td align=\"center\">\n\n                <table>\n                  <tr>\n                    <td>\n\n                      <div class=\"buttonclass\"\n                           (click)=\"StandorteButtonClicked()\"\n                           (mouseenter)=\"StandortMouseOver = true\"\n                           (mouseleave)=\"StandortMouseOver = false\">\n\n                        <table>\n                          <tr>\n                            <td align=\"center\">\n                              <ion-icon name=\"location-outline\" [color]=\"StandortMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"text-align: center;\">\n                              <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 22px\">Standorte</ion-text>\n                            </td>\n                          </tr>\n                        </table>\n\n                      </div>\n\n\n                    </td>\n                    <td>\n                      <div class=\"trennerdiv\"></div>\n                    </td>\n                    <td>\n\n                      <div class=\"buttonclass\"\n                           (click)=\"MitarbeiterButtonClicked()\"\n                           (mouseenter)=\"MitarbeiterMouseOver = true\"\n                           (mouseleave)=\"MitarbeiterMouseOver = false\">\n\n                        <table>\n                          <tr>\n                            <td align=\"center\">\n                              <ion-icon name=\"people-outline\" [color]=\"MitarbeiterMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"text-align: center;\">\n                              <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 22px\">Mitarbeiter</ion-text>\n                            </td>\n                          </tr>\n                        </table>\n\n                      </div>\n\n                    </td>\n                    <td>\n                      <div class=\"trennerdiv\"></div>\n                    </td>\n                    <td>\n\n                      <div class=\"buttonclass\"\n                           (click)=\"ProjekteButtonClicked()\"\n                           (mouseenter)=\"ProjekteMouseOver = true\"\n                           (mouseleave)=\"ProjekteMouseOver = false\">\n                        <table>\n                          <tr>\n                            <td align=\"center\">\n                              <ion-icon name=\"business-outline\" [color]=\"ProjekteMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"text-align: center;\">\n                              <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 22px\">Projekte</ion-text>\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n\n\n                    </td>\n                    <td>\n                      <div class=\"trennerdiv\"></div>\n                    </td>\n                    <td>\n                      <div class=\"buttonclass\"\n                           (click)=\"FavoritenButtonClicked()\"\n                           (mouseenter)=\"FavoritenMouseOver = true\"\n                           (mouseleave)=\"FavoritenMouseOver = false\">\n                        <table>\n                          <tr>\n                            <td align=\"center\">\n                              <ion-icon name=\"bookmarks-outline\" [color]=\"FavoritenMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 80px\"></ion-icon>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td style=\"text-align: center;\">\n                              <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 22px\">Favoriten</ion-text>\n                            </td>\n                          </tr>\n                        </table>\n                      </div>\n\n                    </td>\n                  </tr>\n                </table>\n\n\n              </td>\n            </tr>\n          </table>\n        </ion-col>\n      </ion-row>\n        <ion-row>\n          <ion-col size=\"12\">\n            <div style=\"height: 40px\"></div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <table style=\"width: 100%\">\n              <tr>\n                <td align=\"center\">\n\n                  <div class=\"favlistedivclass\" [style.height.px]=\"GetFavoritenlistehoehe()\">\n\n                    <ion-radio-group *ngIf=\"Pool.Mitarbeiterdaten !== null\" [value]=\"DBProjekte.CurrentFavorit !== null ? DBProjekte.CurrentFavorit.FavoritenID : null\" (ionChange)=\"FavoritChangedHandler($event)\">\n                      <table *ngIf=\"Pool.Mitarbeiterdaten.Favoritenliste.length > 0\" class=\"paddingtable\">\n                        <tr *ngFor=\"let Favorit of Pool.Mitarbeiterdaten.Favoritenliste\">\n                          <td>\n                            <ion-radio [value]=\"Favorit.FavoritenID\" style=\"font-size: 40px\"></ion-radio>\n                          </td>\n                          <td style=\"font-size: 22px\"\n                              [style.color]=\"DBProjekte.CurrentFavorit === null || DBProjekte.CurrentFavorit.FavoritenID !== Favorit.FavoritenID ? '#7b6a58' : '#c7d304'\">{{Favorit.Name}}</td>\n                        </tr>\n                      </table>\n                    </ion-radio-group>\n\n                    <table style=\"width: 100%;\" *ngIf=\"Pool.Mitarbeiterdaten !== null &&  Pool.Mitarbeiterdaten.Favoritenliste.length === 0\" class=\"paddingtable\">\n                      <tr>\n                        <td style=\"font-size: 22px; text-align: center\" [style.color]=\"'#7b6a58'\">Bitte erstelle zuerst deine Projektfavoriten.</td>\n                      </tr>\n                    </table>\n\n                  </div>\n\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col size=\"12\">\n            <div style=\"height: 40px\"></div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <table style=\"width: 100%;\">\n              <tr>\n                <td align=\"center\">\n\n                  <table>\n                    <tr>\n                      <td>\n\n                        <div class=\"buttonbigclass\"\n                             (click)=\"PlayButtonClicked()\"\n                             (mouseenter)=\"PlayMouseOver = true\"\n                             (mouseleave)=\"PlayMouseOver = false\">\n\n                          <table style=\"width: 100%;\">\n                            <tr>\n                              <td align=\"center\">\n                                <ion-icon name=\"airplane-outline\" [color]=\"PlayMouseOver && DBProjekte.CurrentFavorit ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 120px\"></ion-icon>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td style=\"text-align: center;\">\n                                <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 26px\">BIB Cockpit</ion-text>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td style=\"text-align: center; font-size: 90%; color: gray\">\n                                Version: {{Basics.AppVersionName}} / {{Basics.AppVersionDatum}}\n                              </td>\n                            </tr>\n                          </table>\n\n                          <!--\n\n                          <table>\n                            <tr>\n                              <td align=\"center\">\n                                <ion-icon name=\"play-outline\" [color]=\"PlayMouseOver ? Basics.Ionicfarben.BurnicklGruen : Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 120px\"></ion-icon>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td style=\"text-align: center;\">\n                                <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 24px\">Start</ion-text>\n                              </td>\n                            </tr>\n                          </table>\n                          -->\n\n                        </div>\n\n\n                      </td>\n                    </tr>\n                  </table>\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n\n      </ion-grid>\n    </div>\n  </div>\n\n</ion-content>\n<ion-footer>\n<page-footer #PageFooter>\n\n</page-footer>\n</ion-footer>\n";

/***/ }),

/***/ 2611:
/*!**********************************************************************!*\
  !*** ./src/app/pages/common-login/common-login.page.html?ngResource ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n\n    <table style=\"width: 100%;\">\n      <tr>\n        <td style=\"width: 10px\"></td>\n        <td>\n          <div class=\"menubuttonclass\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n      </tr>\n    </table>\n\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"12\">\n        <div style=\"height: 100px\"></div>\n      </ion-col>\n    </ion-row>\n    <ion-row>\n      <ion-col>\n        <table style=\"width: 100%;\">\n          <tr>\n            <td align=\"center\">\n              <ion-icon name=\"airplane-outline\" [color]=\"Basics.Ionicfarben.BurnicklGrau\" style=\"font-size: 220px\"></ion-icon>\n            </td>\n          </tr>\n          <tr>\n            <td style=\"text-align: center;\">\n              <ion-text [color]=\"Basics.Ionicfarben.BurnicklBraun\" style=\"font-size: 40px\">BIB Cockpit</ion-text>\n            </td>\n          </tr>\n          <tr>\n            <td style=\"text-align: center; font-size: 90%; color: gray\">\n              Version: {{Basics.AppVersionName}} / {{Basics.AppVersionDatum}}\n            </td>\n          </tr>\n          <tr>\n            <td style=\"text-align: center; vertical-align: center; height: 100px\">\n              <ion-button [color]=\"Basics.Ionicfarben.BurnicklGruen\" (click)=\"AuthService.Login()\">Login</ion-button>\n            </td>\n          </tr>\n        </table>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n  <!--\n  <ion-grid>\n    <ion-row>\n      <ion-col sizeXs=\"12\" sizeSm=\"12\" offsetMd=\"1\" sizeMd=\"10\" offsetLg=\"2\" sizeLg=\"8\" offsetXl=\"3\" sizeXl=\"6\">\n\n        <form *ngIf=\"LoginForm\" [formGroup]=\"LoginForm\" autocomplete=\"off\">\n\n          <div class=\"doctablecontainer\">\n            <div class=\"bluedoctableheader\">\n              <table  cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                  <td><b>Benutzerdaten</b></td>\n                </tr>\n              </table>\n            </div>\n            <div class=\"doctablecontent\">\n              <table class=\"paddingtable\" width=\"100%\">\n                <tr>\n                  <td>\n                    <ion-input [style.border]=\"LoginForm.controls['Email'].valid ? OkBorder : RequiredBorder\"  formControlName=\"Email\" placeholder=\"Email\"></ion-input>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <ion-input type=\"text\" [style.border]=\"LoginForm.controls['Password'].valid ? OkBorder : RequiredBorder\" formControlName=\"Password\" placeholder=\"Passwort\">\n                    </ion-input>\n                  </td>\n                </tr>\n              </table>\n            </div>\n          </div>\n\n          <abstand-element [Hoehe]=\"3\"></abstand-element>\n\n          <div class=\"doctablecontainer\">\n            <div class=\"bluedoctableheader\">\n              <table  cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                  <td><b>Weitere Optionen</b></td>\n                </tr>\n              </table>\n            </div>\n            <div class=\"doctablecontent\">\n              <table class=\"paddingtable\" width=\"100%\">\n                <tr>\n                  <td height=\"20\"></td><td></td>\n                </tr>\n                <tr>\n                  <td>Ich besitze Zugangsdaten und habe mein Passwort vergessen.</td><td><ion-button color=\"blau\" expand=\"block\" (click)=\"PasswortVergessenButtonClicked()\">Passwort vergessen</ion-button></td>\n                </tr>\n                <tr>\n                  <td>Ich habe noch kein Benutzerkonto fÃ¼r diese Application.</td><td><ion-button color=\"blau\" expand=\"block\" (click)=\"NeuButtonClicked()\">Neue Registrierung</ion-button></td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </form>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n  -->\n  <abstand-element-fixed></abstand-element-fixed>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n";

/***/ }),

/***/ 83858:
/*!**************************************************************************************!*\
  !*** ./src/app/pages/common-registrierung/common-registrierung.page.html?ngResource ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n\n    <table style=\"width: 100%;\">\n      <tr>\n        <td style=\"width: 10px\"></td>\n        <td>\n          <div class=\"menubuttonclass\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n\n                </td>\n              </tr>\n            </table>\n          </div>\n        </td>\n      </tr>\n    </table>\n\n  </page-header>\n</ion-header>\n<ion-content>\n\n\n\n\n\n  <abstand-element-fixed></abstand-element-fixed>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"200\" [Dialoghoehe]=\"200\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n\n<fi-mitarbeiter-editor *ngIf=\"ShowEditor\" [SkipOkButtonAction]=\"true\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"660\" [PositionY]=\"100\"  [Titel]=\"GetDialogTitel()\" Iconname=\"people-outline\"\n                       (StandortClickedEvent)=\"StandortClickedHandler()\"\n                       (CancelClickedEvent)=\"EditorCancelButtonClicked($event)\"\n                       (OkClickedEvent)=\"EditorOkButtonClicked()\"\n                       (FachbereichClickedEvent)=\"FachbereichClickedHandler()\">\n</fi-mitarbeiter-editor>\n";

/***/ }),

/***/ 84422:
/*!******************************************************************************!*\
  !*** ./src/app/pages/common-testseite/common-testseite.page.html?ngResource ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <table class=\"paddingtable\">\n    <tr>\n      <td>Mainmenu Bereich:  </td><td>{{Menuservice.MainMenuebereich}}</td>\n    </tr>\n    <tr>\n      <td>Firmamenu Bereich:</td><td>{{Menuservice.FirmaMenuebereich}}</td>\n    </tr>\n    <tr>\n      <td>Projektmenu Bereich:</td><td>{{Menuservice.ProjekteMenuebereich}}</td>\n    </tr>\n  </table>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n  </page-footer>\n</ion-footer>\n";

/***/ }),

/***/ 21335:
/*!*******************************************************************************!*\
  !*** ./src/app/pages/fi-mitarbeiterliste/fi-mitarbeiterliste.html?ngResource ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header no-shadow no-border>\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"true\" [ShowSandortfilter]=\"true\" [ShowMitarbeitertitle]=\"true\"\n                      (SucheChanged)=\"SucheChanged($event)\" (StandortfilterClicked)=\"StandortFilterClickedHandler()\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content no-shadow no-border>\n\n    <ion-list *ngIf=\"Mitarbeiterliste && Mitarbeiterliste.length > 0\">\n      <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Mitarbeiter of Mitarbeiterliste, let i = index\" (click)=\"MitrabeiterButtonClicked(Mitarbeiter)\">\n        <ion-grid class=\"maingridclass\">\n          <ion-row  *ngIf=\"Mitarbeiterbuchstabenliste[i] !== ''\">\n            <ion-col size=\"12\">\n              <ion-text color=\"orange\"><b>{{Mitarbeiterbuchstabenliste[i]}}</b></ion-text>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col size=\"12\">\n              <div class=\"kontaktclass\">\n                <table class=\"paddingsmalltable\" width=\"100%\">\n                  <tr>\n                    <td>\n                      <table cellspacing=\"0\" cellpadding=\"0\">\n                        <tr *ngIf=\"!Mitarbeiter.Filtered\">\n                          <td>\n                            {{Mitarbeiter.Name}} {{Mitarbeiter.Vorname}} / {{Mitarbeiter.Kuerzel}}\n                          </td>\n                        </tr>\n                        <tr *ngIf=\"Mitarbeiter.Filtered\">\n                          <td>\n                            <span>{{Mitarbeiter.Text_A}}</span><span style=\"color: green\">{{Mitarbeiter.Text_B}}</span><span>{{Mitarbeiter.Text_C}}</span> / {{Mitarbeiter.Kuerzel}}\n                          </td>\n                        </tr>\n                      </table>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <table class=\"infotable\" style=\"white-space:nowrap;\">\n                        <tr>\n                          <td class=\"ergonametextclass\">Stadort:</td><td>{{DBStandort.GetStandort(Mitarbeiter.StandortID)}}</td><td style=\"width: 20px\"></td>\n                          <td class=\"ergonametextclass\">Email:</td><td>{{Mitarbeiter.Email}}</td><td style=\"width: 20px\"></td>\n                          <td class=\"ergonametextclass\">Fachbereich:</td><td>{{Mitarbeiter.Fachbereich}}</td><td style=\"width: 20px\"></td>\n                        </tr>\n                      </table>\n                  </tr>\n                </table>\n              </div>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-item>\n    </ion-list>\n\n    <table *ngIf=\"Mitarbeiterliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n      <tr>\n        <td style=\"height: 80px; text-align: center; vertical-align: center\">\n          keine Mitarbeiter vorhanden\n        </td>\n      </tr>\n    </table>\n\n\n\n\n    <!--\n  <ng-container *ngIf=\"Menueindex === 2\">\n    <ion-list [style.width.px]=\"Listenbreite\">\n\n      <ion-item  *ngFor=\"let Lager of Pool.Lagerliste, let i = index\" class=\"ion-text-wrap\" class=\"ion-no-padding\"   (click)=\"LieferantButtonClicked(Lager)\">\n        <ion-grid class=\"maingridclass\">\n          <ion-row>\n            <ion-col>\n              <table cellspacing=\"0\" cellpadding=\"0\">\n                <tr>\n                  <td>\n                    {{Lager.Displayname}}\n                  </td>\n                  <td>\n                    <ion-icon  name=\"subway\" [color]=\"'blau'\" style=\"font-size: 32px\"></ion-icon>\n                  </td>\n                </tr>\n              </table>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-item>\n    </ion-list>\n\n    <table *ngIf=\"Pool.Lagerliste.length === 0\"  class=\"paddingtable\" width=\"100%\">\n      <tr>\n        <td align=\"center\">\n          kein Lager / EinzelhÃ¤ndler vorhanden\n        </td>\n      </tr>\n    </table>\n  </ng-container>\n  [Buttoncolor]=\"Basics.Ionicfarben.GRUEN\"\n-->\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddMitarbeiterButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n<fi-mitarbeiter-editor *ngIf=\"ShowEditor\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"660\" [PositionY]=\"100\"  [Titel]=\"GetDialogTitel()\" Iconname=\"people-outline\"\n                       (StandortClickedEvent)=\"StandortClickedHandler()\"\n                       (CancelClickedEvent)=\"ShowEditor = false\"\n                       (OkClickedEvent)=\"ShowEditor = false\" (DeleteClickedEvent)=\"ShowEditor = false\"\n                       (FachbereichClickedEvent)=\"FachbereichClickedHandler()\">\n</fi-mitarbeiter-editor>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"300\" [Dialoghoehe]=\"300\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n\n<alphabet #Alphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n          [PageHeader]=\"PageHeader\"\n          [PageFooter]=\"PageFooter\"\n          [Breite]=\"Alphapetbreite\"\n          [Buchstabenliste]=\"Mitarbeiteralphabet\"\n          [Auswahl]=\"Mitarbeiteralphabetauswahl\"></alphabet>\n";

/***/ }),

/***/ 41769:
/*!***************************************************************************!*\
  !*** ./src/app/pages/fi-standorteliste/fi-standorteliste.html?ngResource ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"true\" [ShowStandorttitle]=\"true\" (SucheChanged)=\"SucheChangedHandler($event)\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n  <ion-list *ngIf=\"Standorteliste && Standorteliste.length > 0\">\n    <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Eintrag of Standorteliste, let i = index\" (click)=\"StandortButtonClicked(Eintrag)\">\n      <ion-grid class=\"maingridclass\">\n        <ion-row  *ngIf=\"Standortebuchstabenliste[i] !== ''\">\n          <ion-col size=\"12\">\n            <ion-text color=\"orange\"><b>{{Standortebuchstabenliste[i]}}</b></ion-text>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col sizeXs=\"11\" sizeSm=\"11\" sizeMd=\"6\" sizeLg=\"6\" sizeXl=\"6\">\n            <div class=\"kontaktclass\">\n              <table class=\"paddingsmalltable\" width=\"100%\">\n                <tr>\n                  <td>\n                    <table cellspacing=\"0\" cellpadding=\"0\">\n                      <tr *ngIf=\"!Eintrag.Filtered\">\n                        <td>\n                          {{Eintrag.Ort}}\n                        </td>\n                      </tr>\n                      <tr *ngIf=\"Eintrag.Filtered\">\n                        <td>\n                          <span>{{Eintrag.Text_A}}</span><span style=\"color: green\">{{Eintrag.Text_B}}</span><span>{{Eintrag.Text_C}}</span>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <table class=\"infotable\" style=\"white-space:nowrap;\">\n                      <tr>\n                        <td class=\"ergonametextclass\">KÃ¼rzel:</td><td>{{Eintrag.Kuerzel}}</td><td style=\"width: 20px\"></td>\n                        <td class=\"ergonametextclass\">Email:</td><td>{{Eintrag.Email}}</td><td style=\"width: 20px\"></td>\n                      </tr>\n                    </table>\n                </tr>\n              </table>\n            </div>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-item>\n  </ion-list>\n  <table *ngIf=\"Standorteliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n    <tr>\n      <td style=\"height: 80px; text-align: center; vertical-align: center\">\n        kein Standorte vorhanden\n      </td>\n    </tr>\n  </table>\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddStandorteButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n<fi-standort-editor *ngIf=\"ShowEditor\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"400\" [PositionY]=\"100\" [Titel]=\"GetDialogTitel()\" Iconname=\"location-outline\"\n                    (CancelClickedEvent)=\"ShowEditor = false\"\n                    (OkClickedEvent)=\"ShowEditor = false\" (DeleteClickedEvent)=\"ShowEditor = false\"></fi-standort-editor>\n\n<alphabet #Alphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n          [PageHeader]=\"PageHeader\"\n          [PageFooter]=\"PageFooter\"\n          [Buchstabenliste]=\"Standortealphabet\"\n          [Breite]=\"Alphapetbreite\"\n          [Auswahl]=\"Standortealphabetauswahl\"></alphabet>\n\n\n";

/***/ }),

/***/ 54300:
/*!********************************************************************************!*\
  !*** ./src/app/pages/pj-aufgaben-liste/pj-aufgaben-liste.page.html?ngResource ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<!--\n<div style=\"position: absolute; z-index: 1000000; width: 100px; height: 100px; left: 0px; top: 212px; background: red\"></div>\n-->\n\n<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu\n      [Filterorigin]=\"Auswahlservice.Auswahloriginvarianten.Aufgabenliste_Zeitfilter\"\n      (FavoritenClicked)=\"FavoritenClickedHandler($event)\"\n      (FilterChanged)=\"FilterChangedHandler($event)\"\n      (ZeitspanneFilterClicked)=\"ZeitspanneFilterClickedHandler()\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <!--\n  {{Heute.format('DD.MM.YYYY')}} / {{Heute.format('dddd')}}\n  -->\n\n  <!-- Meilensteine Projektpunkte  -->\n\n  <ng-container *ngIf=\"DBProjekte.CurrentFavoritprojektindex === 1500\">\n    <ng-container  *ngFor=\"let Datenliste of this.Meilensteineprojektpunkteliste; let projektindex = index\">\n\n      <div style=\"padding: 4px;\">\n        <pj-projektpunkteliste [Datenliste]=\"Datenliste\"\n                               [CheckFilterEnabled]=\"false\"\n                               [ShowProjektnamen]=\"true\"\n                               [ShowMeintag]=\"true\"\n                               [Projekt]=\"MeilensteineProjektliste[projektindex]\"\n                               (FortschrittClicked)=\"FortschrittClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (ZustaendigExternZuweisenClicked)=\"ListeZustaendigExternHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (ZustaendigInternZuweisenClicked)=\"ListeZustaendigInternHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (StatusClicked)=\"StatusClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (EndedatumClicked)=\"EndedatumClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (MeintagClicked)=\"PrepareDaten()\"\n                               (MeilensteinClicked)=\"PrepareDaten()\"\n                               (ProtokollmarkeClicked)=\"ProtokollmarkeClickedHandler()\"\n                               (AufgabeClicked)=\"AufgabeClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (TerminFiltermodusClicked)=\"TerminFiltermodusClickedHandler($event)\"\n                               (AddProjektpunktClicked)=\"AddAufgabeClickedHandler(projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (MeinewocheZuweisenClicked)=\"MeinewocheZuweisenClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\"\n                               (MeinewocheBearbeitenClicked)=\"MeineWocheBearbeitenClickedHandler($event, projektindex, Datenursprungsvarianten.Meilensteine)\">\n        </pj-projektpunkteliste>\n\n      </div>\n\n    </ng-container>\n\n    <div *ngIf=\"Meilensteineprojektpunkteliste.length === 0\" class=\"keineintragclass\">\n      Kein Eintrag vorhanden\n    </div>\n  </ng-container>\n\n  <!-- Mein Tag Projektpunkte  -->\n\n  <ng-container *ngIf=\"DBProjekte.CurrentFavoritprojektindex === 2000\">\n\n    <ng-container  *ngFor=\"let Datenliste of this.Meintagprojektpunkteliste; let projektindex = index\">\n\n      <div *ngIf=\"DBProjektpunkte.CountProjektpunkte(Datenliste, true) !== 0\" style=\"padding: 4px;\">\n        <pj-projektpunkteliste [Datenliste]=\"Datenliste\"\n                               [ShowProjektnamen]=\"true\"\n                               [ShowMeintag]=\"true\"\n                               [Projekt]=\"MeinTagProjektliste[projektindex]\"\n                               (FortschrittClicked)=\"FortschrittClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (ZustaendigExternZuweisenClicked)=\"ListeZustaendigExternHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (ZustaendigInternZuweisenClicked)=\"ListeZustaendigInternHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (StatusClicked)=\"StatusClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (EndedatumClicked)=\"EndedatumClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (MeintagClicked)=\"PrepareDaten()\"\n                               (MeilensteinClicked)=\"PrepareDaten()\"\n                               (ProtokollmarkeClicked)=\"ProtokollmarkeClickedHandler()\"\n                               (AufgabeClicked)=\"AufgabeClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (TerminFiltermodusClicked)=\"TerminFiltermodusClickedHandler($event)\"\n                               (AddProjektpunktClicked)=\"AddAufgabeClickedHandler(projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (MeinewocheZuweisenClicked)=\"MeinewocheZuweisenClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\"\n                               (MeinewocheBearbeitenClicked)=\"MeineWocheBearbeitenClickedHandler($event, projektindex, Datenursprungsvarianten.MeinTag)\">\n        </pj-projektpunkteliste>\n\n      </div>\n\n\n    </ng-container>\n\n    <div *ngIf=\"Meintagprojektpunkteliste.length === 0\" class=\"keineintragclass\">\n      Kein Eintrag vorhanden\n    </div>\n  </ng-container>\n\n  <!-- Meine Woche --->\n\n  <ng-container *ngIf=\"DBProjekte.CurrentFavoritprojektindex === 3000\">\n\n    <div style=\"width: 100%; background: red; overflow: hidden\">\n      <table style=\"width: 100%\">\n        <tr>\n          <td [style.width.px]=\"Tagbreite\" [style.height.px]=\"Listenhoehe\">\n            <div class=\"tagaufteilungkeeperdivclass\">\n              <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Montag']\" class=\"tagaufteilungeintragdivclass\"\n                   [style.background]=\"DBProjekte.GetProjektFarbe(Punkt).Background\"\n                   [style.color]=\"DBProjekte.GetProjektFarbe(Punkt).Foreground\"\n                   [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                   (click)=\"MeineWocheEintragEditClicked($event, Punkt, 'Montag')\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\"></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"calendar-outline\" (click)=\"MeineWocheEintragTagClicked($event, Punkt, 'Montag')\"></ion-icon></td>\n                  </tr>\n                  <tr>\n                    <td><div (click)=\"MeineWocheStatusClicked($event, Punkt)\" class=\"meintagstatusdivclass\" [style.background]=\"DBProjektpunkte.GetStatuscolor(Punkt)\">{{Punkt.Status}}</div></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"trash-outline\" (click)=\"MeineWocheDeleteClicked($event, Punkt, 'Montag')\"></ion-icon></td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </td>\n          <td style=\"width: 1px; background: white\"></td>\n          <td [style.width.px]=\"Tagbreite\" [style.height.px]=\"Listenhoehe\">\n            <div class=\"tagaufteilungkeeperdivclass\">\n              <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Dienstag']\" class=\"tagaufteilungeintragdivclass\"\n                   [style.background]=\"DBProjekte.GetProjektFarbe(Punkt).Background\"\n                   [style.color]=\"DBProjekte.GetProjektFarbe(Punkt).Foreground\"\n                   [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                   (click)=\"MeineWocheEintragEditClicked($event,Punkt,'Dienstag')\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\"></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"calendar-outline\" (click)=\"MeineWocheEintragTagClicked($event, Punkt, 'Dienstag')\"></ion-icon></td>\n                  </tr>\n                  <tr>\n                    <td><div (click)=\"MeineWocheStatusClicked($event, Punkt)\" class=\"meintagstatusdivclass\" [style.background]=\"DBProjektpunkte.GetStatuscolor(Punkt)\">{{Punkt.Status}}</div></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"trash-outline\" (click)=\"MeineWocheDeleteClicked($event, Punkt, 'Dienstag')\"></ion-icon></td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </td>\n          <td style=\"width: 1px; background: white\"></td>\n          <td [style.width.px]=\"Tagbreite\" [style.height.px]=\"Listenhoehe\">\n            <div class=\"tagaufteilungkeeperdivclass\">\n              <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Mittwoch']\" class=\"tagaufteilungeintragdivclass\"\n                   [style.background]=\"DBProjekte.GetProjektFarbe(Punkt).Background\"\n                   [style.color]=\"DBProjekte.GetProjektFarbe(Punkt).Foreground\"\n                   [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                   (click)=\"MeineWocheEintragEditClicked($event, Punkt, 'Mittwoch')\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\"></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"calendar-outline\" (click)=\"MeineWocheEintragTagClicked($event, Punkt, 'Mittwoch')\"></ion-icon></td>\n                  </tr>\n                  <tr>\n                    <td><div (click)=\"MeineWocheStatusClicked($event, Punkt)\" class=\"meintagstatusdivclass\" [style.background]=\"DBProjektpunkte.GetStatuscolor(Punkt)\">{{Punkt.Status}}</div></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"trash-outline\" (click)=\"MeineWocheDeleteClicked($event, Punkt, 'Mittwoch')\"></ion-icon></td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </td>\n          <td style=\"width: 1px; background: white\"></td>\n          <td [style.width.px]=\"Tagbreite\" [style.height.px]=\"Listenhoehe\">\n            <div class=\"tagaufteilungkeeperdivclass\">\n              <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Donnerstag']\" class=\"tagaufteilungeintragdivclass\"\n                   [style.background]=\"DBProjekte.GetProjektFarbe(Punkt).Background\"\n                   [style.color]=\"DBProjekte.GetProjektFarbe(Punkt).Foreground\"\n                   [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                   (click)=\"MeineWocheEintragEditClicked($event, Punkt, 'Donerstag')\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\"></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"calendar-outline\" (click)=\"MeineWocheEintragTagClicked($event, Punkt, 'Donnerstag')\"></ion-icon></td>\n                  </tr>\n                  <tr>\n                    <td><div (click)=\"MeineWocheStatusClicked($event, Punkt)\" class=\"meintagstatusdivclass\" [style.background]=\"DBProjektpunkte.GetStatuscolor(Punkt)\">{{Punkt.Status}}</div></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"trash-outline\" (click)=\"MeineWocheDeleteClicked($event, Punkt, 'Donnerstag')\"></ion-icon></td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </td>\n          <td style=\"width: 1px; background: white\"></td>\n          <td [style.width.px]=\"Tagbreite\" [style.height.px]=\"Listenhoehe\">\n            <div class=\"tagaufteilungkeeperdivclass\">\n              <div *ngFor=\"let Punkt of DBProjektpunkte.Wochenpunkteliste['Freitag']\" class=\"tagaufteilungeintragdivclass\"\n                   [style.background]=\"DBProjekte.GetProjektFarbe(Punkt).Background\"\n                   [style.color]=\"DBProjekte.GetProjektFarbe(Punkt).Foreground\"\n                   [style.height.px]=\"GetProjektpunthoehe(Punkt)\"\n                   (click)=\"MeineWocheEintragEditClicked($event, Punkt, 'Freitag')\">\n                <table style=\"width: 100%\">\n                  <tr>\n                    <td [innerHTML]=\"GetProjektpunktAufgabentext(Punkt)\"></td>\n                    <td style=\"width: 30px\"><ion-icon name=\"calendar-outline\" (click)=\"MeineWocheEintragTagClicked($event, Punkt, 'Freitag')\"></ion-icon></td>\n                  </tr>\n                  <tr>\n                    <td><div (click)=\"MeineWocheStatusClicked($event, Punkt)\" class=\"meintagstatusdivclass\" [style.background]=\"DBProjektpunkte.GetStatuscolor(Punkt)\">{{Punkt.Status}}</div></td>\n                    <td style=\"width: 30px\">\n                      <ion-icon tooltip=\"Eintrag lÃ¶schen\" name=\"trash-outline\" (click)=\"MeineWocheDeleteClicked($event, Punkt, 'Freitag')\"></ion-icon>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </div>\n          </td>\n          <!--\n          <td><div class=\"tagaufteilungkeeperdivclass\" [style.height.px]=\"Listenhoehe\">{{Resthoehe}}</div></td>\n          -->\n        </tr>\n      </table>\n\n    </div>\n\n  </ng-container>\n\n  <!-- Meine Woche Ende --->\n\n  <!-- Favoritenprojektpunkte  -->\n\n  <div *ngIf=\"DBProjekte.CurrentFavoritprojektindex !== 1500 && DBProjekte.CurrentFavoritprojektindex !== 2000 && DBProjekte.CurrentFavoritprojektindex !== 3000\" style=\"padding: 4px\">\n\n    <pj-projektpunkteliste [Datenliste]=\"FavoritenProjektpunkteliste\"\n                           [ShowProjektnamen]=\"true\"\n                           [Projekt]=\"DBProjekte.CurrentProjekt\"\n                           (FortschrittClicked)=\"FortschrittClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (ZustaendigExternZuweisenClicked)=\"ListeZustaendigExternHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (ZustaendigInternZuweisenClicked)=\"ListeZustaendigInternHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (StatusClicked)=\"StatusClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (EndedatumClicked)=\"EndedatumClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (MeintagClicked)=\"PrepareDaten()\"\n                           (MeilensteinClicked)=\"PrepareDaten()\"\n                           (ProtokollmarkeClicked)=\"ProtokollmarkeClickedHandler()\"\n                           (AufgabeClicked)=\"AufgabeClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (TerminFiltermodusClicked)=\"TerminFiltermodusClickedHandler($event)\"\n                           (AddProjektpunktClicked)=\"AddAufgabeClickedHandler(null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (MeinewocheZuweisenClicked)=\"MeinewocheZuweisenClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\"\n                           (MeinewocheBearbeitenClicked)=\"MeineWocheBearbeitenClickedHandler($event, null, Datenursprungsvarianten.Favoritenprojekt)\">\n    </pj-projektpunkteliste>\n\n  </div>\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <table width=\"100%\">\n      <tr>\n        <td align=\"left\">\n          <div class=\"datumkeeperclass\">{{GetDatum()}}</div>\n        </td>\n        <td style=\"width: 50px\" align=\"right\">\n          <!--\n          <div class=\"rootbuttonclass\" (click)=\"DBProjekte.CurrentProjekt !== null ? AddAufgabeClickedHandler() : null\">\n            <ion-icon style=\"font-size: 28px\" [color]=\"DBProjekte.CurrentProjekt !== null ? 'burnicklgruen' : 'burnicklbraun'\" name=\"add-circle-outline\"></ion-icon>\n          </div>\n          -->\n        </td>\n      </tr>\n    </table>\n\n  </page-footer>\n</ion-footer>\n\n<pj-aufgaben-listefilter *ngIf=\"ShowZeitspannefilter\"\n                         [Titel]=\"'Zeitspanne festlegen'\"\n                         [Dialogbreite]=\"700\"\n                         [Dialoghoehe]=\"340\"\n                         [PositionY]=\"DialogPosY + 200\"\n                         [ZIndex]=\"4000\" (CancelClickedEvent)=\"ShowZeitspannefilter = false\"\n                         (OkClickedEvent)=\"ShowZeitspannefilter = false\">\n</pj-aufgaben-listefilter>\n\n\n<pj-projektpunkt-editor *ngIf=\"ShowProjektpunktEditor\" [Dialogbreite]=\"Dialogbreite\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                        [ZIndex]=\"3000\" [Titel]=\"GetProjektpunkteditorTitel()\" Iconname=\"book-outline\"\n                        (StatusClicked)=\"EditorStatusClickedHandler()\" (FachbereichClicked)=\"FachbereichClickedHandler()\"\n                        (KostengruppeClicked)=\"KostengruppeClickedHandler()\"\n                        (ZustaendigInternClicked)=\"EditorZustaendigInternHandler()\"\n                        (ZustaendigExternClicked)=\"EditorZustaendigExternHandler()\"\n                        (GebaeudeteilClicked)=\"GebaeudeteilClickedHandler()\"\n                        (TerminButtonClicked)=\"ShowDateKkPicker = true\"\n                        (CancelClickedEvent)=\"ShowProjektpunktEditor = false\"\n                        (OkClickedEvent)=\"ShowProjektpunktEditor = false\"></pj-projektpunkt-editor>\n\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"'ZustÃ¤ndige Kollegen festlegen'\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe - 200\" [PositionY]=\"DialogPosY + 100\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"true\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n<pj-beteiligten-auswahl *ngIf=\"ShowBeteiligteauswahl\"\n                        [Titel]=\"GetBeteiligtenauswahlTitel()\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe - 200\" [PositionY]=\"DialogPosY + 100\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"true\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowBeteiligteauswahl = false\"\n                        (OkClickedEvent)=\"BeteiligteauswahlOkButtonClicked($event)\"></pj-beteiligten-auswahl>\n\n<projektpunkt-statusdate-picker *ngIf=\"ShowDateStatusPicker\" [Dialogbreite]=\"600\"\n                                   [Dialoghoehe]=\"Dialoghoehe - 200\"\n                                   [PositionY]=\"DialogPosY + 100\"\n                                   [ZIndex]=\"4000\"\n                                   [Iconname]=\"'calendar-outline'\"\n                                   [Titel]=\"'Termin und Status festlegen'\"\n                                   [ShowProtokollpunkte]=\"false\"\n                                   [Datum]=\"Datum\"\n                                   [Status]=\"DBProjektpunkte.CurrentProjektpunkt.Status\"\n                                   (OkClickedEvent)=\"ShowDateStatusPicker = false\"\n                                   (CancelClickedEvent)=\"ShowDateStatusPicker = false\">\n</projektpunkt-statusdate-picker>\n\n<projektpunkt-date-kw-picker *ngIf=\"ShowDateKkPicker\" [Dialogbreite]=\"380\"\n                                   [Dialoghoehe]=\"460\"\n                                   [PositionY]=\"DialogPosY + 200\"\n                                   [ZIndex]=\"5000\"\n                                   [Iconname]=\"'calendar-outline'\"\n                                   [Titel]=\"'Termin oder KW festlegen'\"\n                                   (OkClickedEvent)=\"ShowDateKkPicker = false\"\n                                   (CancelClickedEvent)=\"ShowDateKkPicker = false\">\n</projektpunkt-date-kw-picker>\n\n<pj-favoriten-auswahl *ngIf=\"ShowFavoritenauswahl\"\n                      [ZIndex]=\"5000\"\n                      [Dialogbreite]=\"800\"\n                      [Dialoghoehe]=\"Auswahlhoehe\"\n                      [PositionY]=\"200\" [Titel]=\"'Favoriten auswÃ¤hlen'\" [Iconname]=\"'star-outline'\"\n                      (CancelClickedEvent)=\"ShowFavoritenauswahl = false\"\n                      (OkClickedEvent)=\"ShowFavoritenauswahl = false\">\n</pj-favoriten-auswahl>\n\n<pj-meinewoche-editor *ngIf=\"ShowMeinewocheEditor\"\n                      [ZIndex]=\"5000\"\n                      [Dialogbreite]=\"Basics.Contentbreite - 40\"\n                      [Dialoghoehe]=\"900\"\n                      [PositionY]=\"160\" [Titel]=\"'Wochentage auswÃ¤hlen'\" [Iconname]=\"'calendar-outline'\"\n                      (OkClickedEvent)=\"ShowMeinewocheEditor = false\"\n                      (CancelClickedEvent)=\"ShowMeinewocheEditor = false\">\n</pj-meinewoche-editor>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"200\" [Dialoghoehe]=\"Auswahlhoehe\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\">\n</auswahl-dialog>\n\n<pj-protokoll-editor *ngIf=\"ShowProtokollEditor\"  [Dialogbreite]=\"Dialogbreite\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                     [Titel]=\"'Protokoll bearbeiten'\" Iconname=\"book-outline\"\n                     [ZIndex]=\"2000\"\n                     (OkClickedEvent)=\"ShowProtokollEditor = false\"\n                     (CancelClickedEvent)=\"ShowProtokollEditor = false\"\n                     (LeistungsphaseClickedEvent)=\"LeistungsphaseClickedHandler()\"\n                     (TeamteilnehmerClicked)=\"TeamteilnehmerClickedHandler()\"\n                     (BeteiligteteilnehmerClicked)=\"BeteiligteteilnehmerClickedHandler()\"\n                     (ProtokollpunktClicked)=\"ProtokollpunktClickedHandler($event)\"\n                     (AddProtokollpunktClicked)=\"AddProtokollpunktClickedHandler()\">\n</pj-protokoll-editor>\n\n\n";

/***/ }),

/***/ 89768:
/*!**********************************************************************************!*\
  !*** ./src/app/pages/pj-favoriten-liste/pj-favoriten-liste.page.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"false\" [ShowFavoritentitle]=\"true\" [ShowSandortfilter]=\"false\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <ion-list *ngIf=\"Pool.Mitarbeiterdaten !== null\">\n    <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Favorit of Pool.Mitarbeiterdaten.Favoritenliste, let i = index\"  (click)=\"FavoritButtonClicked(Favorit)\">\n      <ion-grid class=\"maingridclass\">\n        <ion-row>\n          <ion-col size=\"12\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <ion-text color=\"burnicklgruen\">\n                    <b>{{Favorit.Name}}</b>\n\n                  </ion-text>\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n        <ion-row *ngIf=\"Favorit.Projekteliste.length > 0\">\n          <ion-col>\n            <table class=\"paddingtable\">\n              <tr style=\"font-weight: bold;\">\n                <td style=\"width: 120px\" colspan=\"2\">Nummer</td>\n                <td style=\"width: 120px\">KÃ¼rzel</td>\n                <td style=\"width: 500px\">Projektname</td>\n                <td style=\"width: 200px\">Ort</td>\n                <td style=\"width: 200px\">Standort</td>\n              </tr>\n              <tr *ngFor=\"let Projket of Datenliste[i]\">\n                <td style=\"width: 20px; text-align: center; font-weight: bold; font-size: 30px\">&bull;</td>\n                <td>{{Projket.Projektnummer}}</td>\n                <td>{{Projket.Projektkurzname}}</td>\n                <td>{{Projket.Projektname}}</td>\n                <td>{{Projket.Ort}}</td>\n                <td>{{GetStandortname(Projket.StandortID)}}</td>\n              </tr>\n            </table>\n\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-item>\n  </ion-list>\n\n  <table *ngIf=\"GetFavoritenanzahl() === 0\" class=\"paddingtable\" width=\"100%\">\n    <tr>\n      <td align=\"center\">\n        keine Favoiten vorhanden\n      </td>\n    </tr>\n  </table>\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddFavoritenButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n\n<pj-favoriten-editor *ngIf=\"ShowEditor\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"100\" [Titel]=\"GetFavoritenTitel()\" Iconname=\"star-outline\"\n                   (CancelClickedEvent)=\"ShowEditor = false\"\n                     (OkClickedEvent)=\"ShowEditor = false\" (EditProjektlisteEvent)=\"EditProjektlisteEventHandler()\"></pj-favoriten-editor>\n\n<pj-projekte-auswahl *ngIf=\"ShowProjekteauswahl\"\n                        [Titel]=\"ProjekteauswahlTitel\" Iconname=\"business-outline\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                        [Multiselect]=\"true\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowProjekteauswahl = false\"\n                        (OkClickedEvent)=\"ProjekteauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"ProjekteStandortfilterClickedHandler()\"></pj-projekte-auswahl>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"200\" [Dialoghoehe]=\"200\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n";

/***/ }),

/***/ 9497:
/*!*************************************************************************!*\
  !*** ./src/app/pages/pj-projekt-liste/pj-projekt-liste.html?ngResource ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu [ShowSuchleiste]=\"true\" [ShowProjektetitle]=\"true\"\n                      [ShowSandortfilter]=\"ShowMitarbeiterauswahl === false\" (StandortfilterClicked)=\"StandortfilterClickedHandler()\"\n                      (SucheChanged)=\"SucheChanged($event)\">\n    </page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n  <ion-list>\n    <ion-item class=\"ion-text-wrap\" class=\"ion-no-padding\" *ngFor=\"let Projekt of Liste, let i = index\"  (click)=\"ProjektButtonClicked(i)\">\n      <ion-grid class=\"maingridclass\">\n        <ion-row  *ngIf=\"Buchstabenliste[i] !== ''\">\n          <ion-col size=\"12\">\n            <table class=\"paddingsmalltable\">\n              <tr>\n                <td>\n                  <ion-text color=\"orange\"><b>{{Buchstabenliste[i]}}</b></ion-text>\n                </td>\n              </tr>\n            </table>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col sizeXs=\"12\" sizeSm=\"5\" sizeMd=\"5\" sizeLg=\"5\" sizeXl=\"5\">\n              <ion-grid>\n                <ion-row>\n                  <ion-col size=\"12\">\n                    <table>\n                      <tr>\n                        <td>\n                          <div class=\"kontaktclass\">\n                            <table class=\"paddingsmalltable\">\n                              <tr>\n                                <td style=\"width: 30px\"><div style=\"height: 30px; width: 30px; border-radius: 4px\" [style.background]=\"DB.GetProjektfarbeByName(Projekt.Projektfarbe).Background\"></div></td>\n                                <td>\n                                  <table>\n                                    <tr *ngIf=\"!Projekt.Filtered\">\n                                      <td>{{Projekt.Projektname}} / {{Projekt.Projektkurzname}}</td>\n                                    </tr>\n                                    <tr *ngIf=\"Projekt.Filtered\">\n                                      <td>\n                                        <span>{{Projekt.Text_A}}</span><span style=\"color: green\">{{Projekt.Text_B}}</span><span>{{Projekt.Text_C}}</span> / {{Projekt.Projektkurzname}}\n                                      </td>\n                                    </tr>\n                                  </table>\n                                </td>\n                              </tr>\n                              <tr>\n                                <td colspan=\"2\">\n\n                                  <table class=\"infotable\" style=\"white-space:nowrap;\">\n                                    <tr>\n                                      <td class=\"ergonametextclass\">Projektnummer:</td><td>{{Projekt.Projektnummer}}</td><td style=\"width: 20px\"></td>\n                                      <td class=\"ergonametextclass\">Projektleiter:</td><td>{{DBMitarbeiter.GetMitarbeitername(Projekt.ProjektleiterID)}}</td><td style=\"width: 20px\"></td>\n                                      <td class=\"ergonametextclass\">Stellvertreter:</td><td>{{DBMitarbeiter.GetMitarbeitername(Projekt.StellvertreterID)}}</td><td style=\"width: 20px\"></td>\n                                      <td class=\"ergonametextclass\">Standort:</td><td>{{DBStandort.GetStandort(Projekt.StandortID)}}</td><td style=\"width: 20px\"></td>\n                                      <td class=\"ergonametextclass\">Status:</td><td [style.color]=\"DB.GetProjektstatuscolor(Projekt.Status)\">{{Projekt.Status}}</td><td style=\"width: 20px\"></td>\n                                    </tr>\n                                  </table>\n\n                                </td>\n                              </tr>\n                            </table>\n                          </div>\n                        </td>\n                      </tr>\n                    </table>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-item>\n  </ion-list>\n\n  <table *ngIf=\"Liste.length === 0\" class=\"paddingtable\" width=\"100%\">\n    <tr>\n      <td align=\"center\">\n        keine Projekte vorhanden\n      </td>\n    </tr>\n  </table>\n\n  <abstand-element-fixed></abstand-element-fixed>\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddProjektButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n<pj-projekt-editor *ngIf=\"ShowEditor\"\n                   [Dialogbreite]=\"StrukturDialogbreite\" [Dialoghoehe]=\"StrukturDialoghoehe\" [PositionY]=\"DialogPosY\" [Titel]=\"GetProjekteditorTitel()\" Iconname=\"business-outline\"\n                    (StatusClickedEvent)=\"StatusClickedHandler()\"\n                    (StandortClickedEvent)=\"StandortClickedHandler()\"\n                    (ProjektleiterClickedEvent)=\"ProjektleiterClickedHandler()\"\n                    (StellvertreterClickedEvent)=\"StellvertreterClickedHandler()\"\n                    (CancelClickedEvent)=\"ShowEditor = false\"\n                    (OkClickedEvent)=\"ShowEditor = false\"\n                    (BeteiligteClickedEvend)=\"BeteiligteClickedEventHandler($event)\"\n                    (AddBeteiligteClickedEvent)=\"AddProjektbeteiligteButtonClickedHandler()\"\n                    (AddBauteilClickedEvent)=\"AddBauteilClickedHandler()\"\n                    (AddGeschossClickedEvent)=\"AddGeschossClickedHandler()\"\n                    (AddRaumClickedEvent)=\"AddRaumClickedHandler()\"\n                    (EditBauteilClickedEvent)=\"EditBauteilClickedHandler($event)\"\n                    (EditGeschossClickedEvent)=\"EditGeschossClickedHandler($event)\"\n                    (EditRaumClickedEvent)=\"EditRaumClickedHandler($event)\"></pj-projekt-editor>\n\n<pj-beteiligten-editor *ngIf=\"ShowBeteiligteneditor\" [Dialogbreite]=\"600\" [Dialoghoehe]=\"640\" [PositionY]=\"200\" [Titel]=\"GetBerteiligteeditorTitel()\" Iconname=\"color-filter-outline\"\n                       (CancelClickedEvent)=\"ShowBeteiligteneditor = false\"\n                       (OkClickedEvent)=\"ShowBeteiligteneditor = false\"\n                       (DeleteClickedEvent)=\"ShowBeteiligteneditor = false\"\n                       (FachbereichClickedEvent)=\"BeteiligteFachbereichClickedEventHandler()\">\n</pj-beteiligten-editor>\n\n<pj-gebaeude-bauteileditor *ngIf=\"ShowBauteilEditor\" [PositionY]=\"200\" [Dialoghoehe]=\"200\" [Dialogbreite]=\"300\" Iconname=\"hammer-outline\" [Titel]=\"GetBauteileditorTitel()\"\n                       (CancelClickedEvent)=\"ShowBauteilEditor = false\"\n                       (OkClickedEvent)=\"ShowBauteilEditor = false\">\n</pj-gebaeude-bauteileditor>\n\n<pj-gebaeude-geschosseditor *ngIf=\"ShowGeschossEditor\" [PositionY]=\"200\" [Dialoghoehe]=\"400\" [Dialogbreite]=\"300\" Iconname=\"hammer-outline\" [Titel]=\"GetGeschosseditorTitel()\"\n                            (CancelClickedEvent)=\"ShowGeschossEditor = false\"\n                            (OkClickedEvent)=\"ShowGeschossEditor = false\"\n                            (DeleteClickedEvent)=\"ShowGeschossEditor = false\">\n</pj-gebaeude-geschosseditor>\n\n<pj-gebaeude-raumeditor *ngIf=\"ShowRaumEditor\" [PositionY]=\"200\" [Dialoghoehe]=\"400\" [Dialogbreite]=\"300\" Iconname=\"hammer-outline\" [Titel]=\"GetRaumeditorTitel()\"\n                            (CancelClickedEvent)=\"ShowRaumEditor = false\"\n                            (OkClickedEvent)=\"ShowRaumEditor = false\"\n                            (DeleteClickedEvent)=\"ShowRaumEditor = false\">\n</pj-gebaeude-raumeditor>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"MitarbeiterauswahlTitel\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                        [Multiselect]=\"false\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\"\n                [Dialogbreite]=\"200\" [Dialoghoehe]=\"200\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n\n<alphabet #Alphabet (AlphabetClicked)=\"AlphabetClicked($event)\"\n          [PageHeader]=\"PageHeader\"\n          [PageFooter]=\"PageFooter\"\n          [Buchstabenliste]=\"Kontaktephabet\"\n          [Auswahl]=\"Alphabetauswahl\"\n          [Breite]=\"Alphapetbreite\"></alphabet>\n\n\n\n";

/***/ }),

/***/ 34576:
/*!************************************************************************************!*\
  !*** ./src/app/pages/pj-protokolle-liste/pj-protokolle-liste.page.html?ngResource ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header>\n  <page-header #PageHeader>\n    <page-header-menu\n      (LeistungsphaseFilterClicked)=\"LeistungsphaseFilterClickedHanlder()\"\n      (ZeitspanneFilterClicked)=\"ZeitspanneFilterClickedHandler()\"></page-header-menu>\n  </page-header>\n</ion-header>\n<ion-content>\n\n  <div style=\"height: 100%; width: 100%;\">\n    <div  [style.height.px]=\"Headerhoehe\" style=\"width: 100%; padding-left: 8px; padding-right: 8px; padding-top: 8px\">\n      <table *ngIf=\"Protokollliste.length !== 0\"  width=\"100%\" class=\"docinnertable\">\n        <tr>\n          <td style=\"width: 60px; height: 30px; font-weight: bold\">Nr.</td>\n          <td style=\"width: 100px; font-weight: bold\">Datum</td>\n          <td style=\"width: 80px; font-weight: bold\">LPH</td>\n          <td style=\"width: auto; font-weight: bold\">Titel</td>\n          <td style=\"width: 80px; font-weight: bold\">EintrÃ¤ge</td>\n          <td style=\"width: 60px; font-weight: bold\">Offen</td>\n        </tr>\n      </table>\n\n    </div>\n    <div [style.height.px]=\"Listenhoehe\" style=\"width: 100%; height: 100%; overflow: auto;\">\n\n      <div  *ngFor=\"let Protokoll of Protokollliste;\" (click)=\"ProtokollClicked(Protokoll)\" style=\"width: 100%; cursor: pointer; padding-left: 8px; padding-right: 8px\">\n        <table width=\"100%\" class=\"docinnertable\">\n          <tr>\n            <td style=\"width: 60px; height: 40px\">{{Protokoll.Protokollnummer}}</td>\n            <td style=\"width: 100px;\">{{Protokoll.Zeitstring}}</td>\n            <td style=\"width: 80px;\">{{Protokoll.Leistungsphase !== Const.NONE ? Protokoll.Leistungsphase : ''}}</td>\n            <td style=\"width: auto;\">\n              <ng-container *ngIf=\"Protokoll.Filtered !== true\">\n                {{Protokoll.Titel}}\n              </ng-container>\n              <ng-container *ngIf=\"Protokoll.Filtered === true\">\n                <span>{{Protokoll.Text_A}}</span><span style=\"color: orange\">{{Protokoll.Text_B}}</span><span>{{Protokoll.Text_C}}</span>\n              </ng-container>\n            </td>\n\n            <td style=\"width: 80px;\">{{Protokoll.ProjektpunkteIDListe.length !== 0 ? Protokoll.ProjektpunkteIDListe.length : 'leer'}}</td>\n            <td style=\"width: 60px;\" [style.color]=\"Protokoll.Punkteanzahl > 0 ? 'red' : 'green'\">{{Protokoll.Punkteanzahl > 0 ? Protokoll.Punkteanzahl  : '0'}}</td>\n          </tr>\n        </table>\n\n      </div>\n\n      <table *ngIf=\"Protokollliste.length === 0\" class=\"paddingtable\" width=\"100%\">\n        <tr>\n          <td style=\"text-align: center; padding: 40px;\">\n            keine Protokolle fÃ¼r <b>{{DBProjekte.CurrentProjekt !== null ? DBProjekte.CurrentProjekt.Projektname : 'unbekannt'}}</b> vorhanden\n          </td>\n        </tr>\n      </table>\n\n    </div>\n  </div>\n\n\n</ion-content>\n<ion-footer>\n  <page-footer #PageFooter>\n\n    <div class=\"rootbuttonclass\" (click)=\"AddProtokollButtonClicked()\">\n      <ion-icon style=\"font-size: 28px\" color=\"burnicklgruen\" name=\"add-circle-outline\"></ion-icon>\n    </div>\n\n  </page-footer>\n</ion-footer>\n\n<pj-protokoll-editor *ngIf=\"ShowProtokollEditor\"  [Dialogbreite]=\"Dialogbreite\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                     [Titel]=\"GetProtokollTitel()\" Iconname=\"book-outline\"\n                     [ZIndex]=\"2000\"\n                     (OkClickedEvent)=\"ShowProtokollEditor = false\"\n                     (CancelClickedEvent)=\"ShowProtokollEditor = false\"\n                     (LeistungsphaseClickedEvent)=\"LeistungsphaseClickedHandler()\"\n                     (TeamteilnehmerClicked)=\"TeamteilnehmerClickedHandler()\"\n                     (BeteiligteteilnehmerClicked)=\"BeteiligteteilnehmerClickedHandler()\"\n                     (ProtokollpunktClicked)=\"ProtokollpunktClickedHandler($event)\"\n                     (AddProtokollpunktClicked)=\"AddProtokollpunktClickedHandler()\"></pj-protokoll-editor>\n\n<pj-projektpunkt-editor *ngIf=\"ShowProjektpunktEditor\" [Dialogbreite]=\"Dialogbreite\" [Dialoghoehe]=\"Dialoghoehe\" [PositionY]=\"DialogPosY\"\n                        [ZIndex]=\"3000\" [Titel]=\"GetProjektpunkteditorTitel()\" Iconname=\"book-outline\"\n                        (StatusClicked)=\"StatusClickedHandler()\"\n                        (FachbereichClicked)=\"FachbereichClickedHandler()\"\n                        (KostengruppeClicked)=\"KostengruppeClickedHandler()\"\n                        (ZustaendigInternClicked)=\"ZustaendigInternHandler()\"\n                        (ZustaendigExternClicked)=\"ZustaendigExternHandler()\"\n                        (GebaeudeteilClicked)=\"GebaeudeteilClickedHandler()\"\n                        (TerminButtonClicked)=\"ShowDateKkPicker = true\"\n                        (CancelClickedEvent)=\"ShowProjektpunktEditor = false\"\n                        (OkClickedEvent)=\"ShowProjektpunktEditor = false\"></pj-projektpunkt-editor>\n\n<projektpunkt-date-kw-picker *ngIf=\"ShowDateKkPicker\" [Dialogbreite]=\"380\"\n                             [Dialoghoehe]=\"460\"\n                             [PositionY]=\"DialogPosY + 200\"\n                             [ZIndex]=\"5000\"\n                             [Iconname]=\"'calendar-outline'\"\n                             [Titel]=\"'Termin oder KW festlegen'\"\n                             (OkClickedEvent)=\"ShowDateKkPicker = false\"\n                             (CancelClickedEvent)=\"ShowDateKkPicker = false\">\n</projektpunkt-date-kw-picker>\n\n<pj-kostengruppen-auswahl *ngIf=\"ShowKostengruppenauswahl\" Titel=\"Kostengruppe festlegen\"\n                          [Dialogbreite]=\"KostenDialogbreite\" [Dialoghoehe]=\"KostenDialoghoehe\" [PositionY]=\"DialogPosY\"\n                          (OkClickedEvent)=\"ShowKostengruppenauswahl = false\"\n                          (CancelClickedEvent)=\"ShowKostengruppenauswahl = false\"></pj-kostengruppen-auswahl>\n\n<fi-mitarbeiter-auswahl *ngIf=\"ShowMitarbeiterauswahl\"\n                        [Titel]=\"'ZustÃ¤ndige Kollegen festlegen'\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe - 200\" [PositionY]=\"DialogPosY + 100\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"true\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowMitarbeiterauswahl = false\"\n                        (OkClickedEvent)=\"MitarbeiterauswahlOkButtonClicked($event)\"\n                        (StandortfilterClickedEvent)=\"MitarebiterStandortfilterClickedHandler()\"></fi-mitarbeiter-auswahl>\n\n<pj-beteiligten-auswahl *ngIf=\"ShowBeteiligteauswahl\"\n                        [Titel]=\"GetBeteiligtenauswahlTitel()\"\n                        [Dialogbreite]=\"600\" [Dialoghoehe]=\"Dialoghoehe - 200\" [PositionY]=\"DialogPosY + 100\" [ZIndex]=\"4000\"\n                        [Multiselect]=\"true\"\n                        Iconname=\"people-outline\"\n                        [AuswahlIDliste]=\"AuswahlIDliste\"\n                        (CancelClickedEvent)=\"ShowBeteiligteauswahl = false\"\n                        (OkClickedEvent)=\"BeteiligteauswahlOkButtonClicked($event)\"></pj-beteiligten-auswahl>\n\n<pj-gebaeude-raumauswahl *ngIf=\"ShowRaumauswahl\" [Titel]=\"'GebÃ¤udeteil auswÃ¤hlen'\" [Dialogbreite]=\"StrukturDialogbreite\" [Dialoghoehe]=\"StrukturDialoghoehe\"\n                         [PositionY]=\"DialogPosY\" [ZIndex]=\"4000\"\n                         (CancelClickedEvent)=\"ShowRaumauswahl = false\"\n                         (OkClickedEvent)=\"ShowRaumauswahl = false\">\n</pj-gebaeude-raumauswahl>\n\n<pj-protokoll-listefilter *ngIf=\"ShowZeitspannefilter\" [PositionY]=\"140\" [Dialoghoehe]=\"514\" [Dialogbreite]=\"580\" Iconname=\"filter-circle-outline\" [Titel]=\"'Zeitspanne festlegen'\"\n                          (CancelClickedEvent)=\"ShowZeitspannefilter = false\"\n                          (OkClickedEvent)=\"ShowZeitspannefilter = false\"></pj-protokoll-listefilter>\n\n<auswahl-dialog *ngIf=\"ShowAuswahl\" [Auswahlliste]=\"Auswahlliste\" [Auswahlindex]=\"Auswahlindex\" [ZIndex]=\"5000\"\n                [Dialogbreite]=\"200\" [Dialoghoehe]=\"280\" [PositionY]=\"200\"\n                [Titel]=\"Auswahltitel\" [Iconname]=\"GetDialogTitelicon()\"\n                (OkClickedEvent)=\"AuswahlOkButtonClicked($event)\"\n                (CancelClickedEvent)=\"ShowAuswahl = false\"></auswahl-dialog>\n\n";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(14431)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map